<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MMMMMCCLXXVII</title>
  <subtitle>美丽的火花在恋人的周围环绕</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mmmmmcclxxvii.cn/"/>
  <updated>2017-06-09T06:02:37.000Z</updated>
  <id>http://www.mmmmmcclxxvii.cn/</id>
  
  <author>
    <name>Crayon Chaney</name>
    <email>mmmmmcclxxvii@yeah.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hadoop 相关数据的规约mapreduce程序 in python</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/09/mtjoin/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/09/mtjoin/</id>
    <published>2017-06-09T05:07:57.000Z</published>
    <updated>2017-06-09T06:02:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">chans   = [<span class="string">'ABC'</span>,<span class="string">'DEF'</span>,<span class="string">'CNO'</span>,<span class="string">'NOX'</span>,<span class="string">'YES'</span>,<span class="string">'CAB'</span>,<span class="string">'BAT'</span>,<span class="string">'MAN'</span>,<span class="string">'ZOO'</span>,<span class="string">'XYZ'</span>,<span class="string">'BOB'</span>]</div><div class="line">sh1 =[<span class="string">'Hot'</span>,<span class="string">'Almost'</span>,<span class="string">'Hourly'</span>,<span class="string">'PostModern'</span>,<span class="string">'Baked'</span>,<span class="string">'Dumb'</span>,<span class="string">'Cold'</span>,<span class="string">'Surreal'</span>,<span class="string">'Loud'</span>]</div><div class="line">sh2 =[<span class="string">'News'</span>,<span class="string">'Show'</span>,<span class="string">'Cooking'</span>,<span class="string">'Sports'</span>,<span class="string">'Games'</span>,<span class="string">'Talking'</span>,<span class="string">'Talking'</span>]</div><div class="line">vwr =range(<span class="number">17</span>,<span class="number">1053</span>)</div><div class="line"></div><div class="line">chvnm=sys.argv[<span class="number">1</span>]  <span class="comment">#get number argument, if its n, do numbers not channels,</span></div><div class="line"></div><div class="line">lch=len(chans)</div><div class="line">lsh1=len(sh1)</div><div class="line">lsh2=len(sh2)</div><div class="line">lvwr=len(vwr)</div><div class="line">ci=<span class="number">1</span></div><div class="line">s1=<span class="number">2</span></div><div class="line">s2=<span class="number">3</span></div><div class="line">vwi=<span class="number">4</span></div><div class="line">ri=int(sys.argv[<span class="number">3</span>])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,int(sys.argv[<span class="number">2</span>])):  <span class="comment">#arg 2 is the number of lines to output</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> chvnm==<span class="string">'n'</span>:  <span class="comment">#no numuber</span></div><div class="line">        print(<span class="string">'&#123;0&#125;_&#123;1&#125;,&#123;2&#125;'</span>.format(sh1[s1],sh2[s2],chans[ci]))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'&#123;0&#125;_&#123;1&#125;,&#123;2&#125;'</span>.format(sh1[s1],sh2[s2],vwr[vwi]))</div><div class="line">    ci=(<span class="number">5</span>*ci+ri) % lch</div><div class="line">    s1=(<span class="number">4</span>*s1+ri) % lsh1</div><div class="line">    s2=(<span class="number">3</span>*s1+ri+i) % lsh2</div><div class="line">    vwi=(<span class="number">2</span>*vwi+ri+i) % lvwr</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (vwi==<span class="number">4</span>): vwi=<span class="number">5</span></div></pre></td></tr></table></figure>
<p>然后执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">python make_join2data.py y 1000 13 &gt; num1.txt</div><div class="line">python make_join2data.py y 2000 17 &gt; num2.txt</div><div class="line">python make_join2data.py y 3000 19 &gt; num3.txt</div><div class="line">python make_join2data.py n 100  23 &gt; chan1.txt</div><div class="line">python make_join2data.py n 200  19 &gt; chan2.txt</div><div class="line">python make_join2data.py n 300  37 &gt; chan3.txt</div></pre></td></tr></table></figure></p>
<p>可以查看数据：<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%201.14.03%20PM.png" alt="dat"></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>然后在上面比如<code>Hourly_Talking,922</code>这些表明是有922个观众在观看<code>Hourly_Takling</code>这个节目。<code>Almost_Show,ABC</code>表明是<code>ABC</code>电视台下有<code>Almost_Show</code>这个节目，然后现在要计算<code>ABC</code>电视台的收视情况</p>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>这里主要就是要筛选出<code>ABC</code>电视台</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">pat = re.compile(<span class="string">r'\d+'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    <span class="keyword">if</span> <span class="string">'ABC'</span> <span class="keyword">in</span> line <span class="keyword">or</span> len(pat.findall(line)):</div><div class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125;\t&#123;&#125;'</span>.format(*(line.strip().split(<span class="string">','</span>)))</div></pre></td></tr></table></figure>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%201.35.54%20PM.png" alt="resu"></p>
<p>因为观众数的那些还不知道和那些电视台相关，所以这些数据要保留</p>
<h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">line_count     = <span class="number">0</span>      </div><div class="line">old_key        = <span class="keyword">None</span> </div><div class="line">viewer_count   = <span class="number">0</span>       </div><div class="line">abc_found      = <span class="keyword">False</span>   </div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    line       = line.strip()       </div><div class="line">    key_value  = line.split(<span class="string">'\t'</span>)   </div><div class="line">    key        = key_value[<span class="number">0</span>]       </div><div class="line">    value      = key_value[<span class="number">1</span>]       </div><div class="line"></div><div class="line">    line_count = line_count + <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> key == old_key <span class="keyword">or</span> line_count == <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> value == <span class="string">"ABC"</span>:</div><div class="line">            abc_found = <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            viewer_count = viewer_count + int(value)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> key != old_key <span class="keyword">and</span> line_count: <span class="comment">#这是进入下一组了</span></div><div class="line">        <span class="keyword">if</span> abc_found == <span class="keyword">True</span>: <span class="comment">#只有在是ABC的才打印出来</span></div><div class="line">            print( <span class="string">'%s %s'</span> % (old_key, viewer_count) )</div><div class="line">        old_key      = key  <span class="comment">#下一个</span></div><div class="line">        <span class="keyword">if</span> value.isdigit():</div><div class="line">            viewer_count = int(value)</div><div class="line">        abc_found    = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'%s %s'</span> % (key, viewer_count)</div></pre></td></tr></table></figure>
<p>在reduce阶段的时候，shuffle已sort了，<code>&lt;key,value&gt;</code>的value要么是’ABC’，要么是数字，如果是数字的话累加，而且，因为是sort过的，然后一定是这样的形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d,12</div><div class="line">d,23</div><div class="line">d,abc</div></pre></td></tr></table></figure></p>
<p><strong>所以相关的点就在<code>key</code>都是<code>d</code>的value累加完后，势必会读到<code>d</code>的value是哪个电视台的，如果是’ABC’的话，就可以输出了。</strong></p>
<h1 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%201.54.54%20PM.png" alt="local test"></p>
<h1 id="hadoop-集群测试"><a href="#hadoop-集群测试" class="headerlink" title="hadoop 集群测试"></a>hadoop 集群测试</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%202.00.15%20PM.png" alt="1"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%202.00.30%20PM.png" alt="2"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%202.01.47%20PM.png" alt="3"></p>
<p>与本地测试的结果一样</p>
]]></content>
    
    <summary type="html">
    
      一个电视台有多个节目，一个节目有收看的观众，那电视台的有多少观众？
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.mmmmmcclxxvii.cn/tags/mapreduce/"/>
    
  </entry>
  
  <entry>
    <title>hadoop mapreduce -- 数据去重(python)</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/09/dedup/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/09/dedup/</id>
    <published>2017-06-09T00:05:32.000Z</published>
    <updated>2017-06-09T05:07:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>就用mapreduce的思想来将重复的数据剔除</p>
<h1 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h1><p>自己随便弄<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.18.29%20AM.png" alt="testfile1"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.18.37%20AM.png" alt="testfile2"></p>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    line = line.strip()</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"&#123;0&#125;\t&#123;1&#125;"</span>.format(line,<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>这个比wordcount程序简单多了。其实在这个例子中，<code>&lt;key,value&gt;</code>的value没有什么用，最后不用输出。</p>
<h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">last_key = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    this_key = line.split(<span class="string">'\t'</span>)[<span class="number">0</span>].strip()</div><div class="line">    <span class="keyword">if</span> this_key == last_key:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> last_key:</div><div class="line">            <span class="comment">#print this_key #错误！！！</span></div><div class="line">            <span class="keyword">print</span> last_key <span class="comment">#this_key每一轮都更新，当不一样了的时候，要将上一轮的key输出</span></div><div class="line">        last_key = this_key</div><div class="line"><span class="keyword">print</span> this_key</div></pre></td></tr></table></figure>
<p>在<code>this_key == last_key</code>条件满足的时候，跟wordcount不一样的是，这里什么都不用做，比较wordcount程序这里是要累加的。但其实reduce这一步只要将相同的输出一个就行了。</p>
<h1 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h1><p>命令: <code>python mapper.py &lt; testfile* | sort | python reducer.py</code><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.51.38%20AM.png" alt="localtest"></p>
<h1 id="hadoop测试"><a href="#hadoop测试" class="headerlink" title="hadoop测试"></a>hadoop测试</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.58.26%20AM.png" alt="ha"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.58.40%20AM.png" alt="doop"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.58.17%20AM.png" alt="result"></p>
<p>看到结果也是一样的。</p>
<h1 id="combine"><a href="#combine" class="headerlink" title="combine"></a>combine</h1><p>上面结果中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Combine input records=0</div><div class="line">Combine output records=0</div></pre></td></tr></table></figure></p>
<p>了解了一下combine的过程，我一开始疑惑combine到底在哪个阶段，他的输入是什么（输入的是sort前还是sort后），是在哪个节点运行的。</p>
<p>参考：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/35195101/which-runs-first-combiner-or-partitioner-in-a-mapreduce-job" target="_blank" rel="external">Which runs first, Combiner or Partitioner in a MapReduce Job</a></li>
</ul>
<p>-[] combine阶段在shuffle阶段之前，因为shuffle阶段做的是copy和sort，那么表示的就是combine阶段的时候是没有sort过的数据输入。这很重要。如果是sort过的话的，那么combine的程序就跟reducer的程序一样。只是在单个节点上，可以看作预处理的reduce。那在旧的mapreduce架构shuflle在jobtracker上运行，combine在tasktracker上执行。那在YARN架构下，combine应该在nodemanager，shuffle在resourcemanager。[Todo] 不确定</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%209.29.39%20AM.png" alt="combine"></p>
<p><strong>combine只是处理一个节点中的输出，而不能享受像reduce一样的输入（经过了shuffle阶段的数据）,这个非常关键</strong></p>
<h2 id="实验combine带来的优化能力"><a href="#实验combine带来的优化能力" class="headerlink" title="实验combine带来的优化能力"></a>实验combine带来的优化能力</h2><p>先用wordcount测试，词频统计是一个可以展示combine用处的例子。词频统计程序为每一个它看到的词生成了一个（word，1）键值对。所以如果在同一个文档内“cat”出现了3次，（”cat”，1）键值对会被生成3次，这些键值对会被送到Reducer那里。通过使用Combiner，这些键值对可以被压缩为一个送往Reducer的键值对（”cat”，3）。现在每一个节点针对每一个词只会发送一个值到reducer，大大减少了shuffle过程所需要的带宽并加速了作业的执行。</p>
<h3 id="测试数据-1"><a href="#测试数据-1" class="headerlink" title="测试数据"></a>测试数据</h3><p>网上下载了两个英文小说<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%209.54.51%20AM.png" alt="entxt"></p>
<p>一个是165k，另一个是446k</p>
<hr>
<p><strong>不使用 combine ：</strong></p>
<p>命令: <code>hadoop jar ../../hadoop-2.8.0/share/hadoop/tools/lib/hadoop-streaming-2.8.0.jar -input file:///Users/Crayon_277/Develop/Project/hadoop/mapreduce-program/wordcount/f*.txt -output file:///Users/Crayon_277/Develop/Project/hadoop/mapreduce-program/wordcount/output -mapper mapper.py -reducer reducer.py</code></p>
<p>结果：<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%209.54.20%20AM.png" alt="result"></p>
<p>可以看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GC time elapsed (ms)=4</div><div class="line">Total committed heap usage (bytes)=1160773632</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>使用了combine: </strong></p>
<p>命令：<code>hadoop jar ../../hadoop-2.8.0/share/hadoop/tools/lib/hadoop-streaming-2.8.0.jar -input file:///Users/Crayon_277/Develop/Project/hadoop/mapreduce-program/wordcount/f*.txt -output file:///Users/Crayon_277/Develop/Project/hadoop/mapreduce-program/wordcount/output -mapper mapper.py -reducer reducer.py -combiner reducer.py</code></p>
<p>combine的程序用回reducer.py的程序</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%2010.06.01%20AM.png" alt="usecombine"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GC time elapsed (ms)=3</div><div class="line">Total committed heap usage (bytes)=1159200768</div></pre></td></tr></table></figure>
<hr>
<p>可以对比出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GC time elapsed (ms)=4</div><div class="line">Total committed heap usage (bytes)=1160773632</div><div class="line">	</div><div class="line">GC time elapsed (ms)=3</div><div class="line">Total committed heap usage (bytes)=1159200768</div></pre></td></tr></table></figure></p>
<p>是有优化的。时间上效率也有提升。</p>
<h2 id="combine不是所有的情景都适合"><a href="#combine不是所有的情景都适合" class="headerlink" title="combine不是所有的情景都适合"></a>combine不是所有的情景都适合</h2><p>combiner操作是有风险的，使用它的原则是combiner的输入不会影响到reduce计算的最终输入，例如：如果计算只是求总数，最大值，最小值可以使用combiner，但是做平均值计算使用combiner的话，最终的reduce计算结果就会出错。</p>
<h1 id="数据去重的例子中使用combine"><a href="#数据去重的例子中使用combine" class="headerlink" title="数据去重的例子中使用combine"></a>数据去重的例子中使用combine</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">s = set() <span class="comment">#集合</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    s.add(line.strip().split(<span class="string">'\t'</span>)[<span class="number">0</span>]) <span class="comment">#取&lt;key,value&gt;中的value</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:</div><div class="line">    <span class="keyword">print</span> <span class="string">"&#123;0&#125;\t&#123;1&#125;"</span>.format(item,<span class="number">0</span>) <span class="comment"># 0其实没有什么意义</span></div></pre></td></tr></table></figure>
<p>我预想的是这个在每个节点上将map输出的东西，先筛选一遍，就是用集合的方法，然后再输出，但是！！</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%2010.55.19%20AM.png" alt="wrong"></p>
<p>结果有点问题，用的时间也多了</p>
<p>[Todo]不知道为啥？combine的输出格式也和map阶段的一样，但错误。</p>
<p>从结果上看，还有重复的数据，反推，说明有数据没有被sort到一起，因为从打印结果看到，相同的中间隔着一些，但是在reduce的程序，可以看出，如果是收集在一起的数据是只会打印一个的，说明shuffle没有起作用？？</p>
]]></content>
    
    <summary type="html">
    
      打个比方，桌上有10个苹果，之前的编程思想是从上往下看，mapreduce的编程思想是贴着桌面，平行透视的看。combiner阶段也是可以用于这个场景的。而且combiner是在每个运行map任务的节点上运行。是一个迷你的reduce过程
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.mmmmmcclxxvii.cn/tags/mapreduce/"/>
    
  </entry>
  
  <entry>
    <title>hadoop wordcount in python</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/08/wordcount/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/08/wordcount/</id>
    <published>2017-06-08T14:28:34.000Z</published>
    <updated>2017-06-08T22:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为不会java，暂时用自己熟悉的python来写mapreduce程序放在hadoop上跑。mapreduce只是一个编程思想，不局限于语言。</p>
<hr>
<h1 id="hadoop-streaming"><a href="#hadoop-streaming" class="headerlink" title="hadoop streaming"></a>hadoop streaming</h1><blockquote>
<p>both the mapper and the reducer are executables that read the input from stdin (line by line) and emit the output to stdout. The utility will create a Map/Reduce job, submit the job to an appropriate cluster, and monitor the progress of the job until it completes.</p>
</blockquote>
<p>官网的解释，也就是说，这个可执行文件或脚本里面，只要从stdin标准输入读入数据，然后进行内部的分词处理，输出到stdout，就行了，streaming会创建mapreduce的作业，发送给各个tasktracker，同时监控整个作业的执行过程。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hadoop jar hadoop-streaming-2.8.0.jar \</div><div class="line">  -input myInputDirs \</div><div class="line">  -output myOutputDir \</div><div class="line">  -mapper /bin/cat \</div><div class="line">  -reducer /usr/bin/wc</div></pre></td></tr></table></figure>
<p>官网给出的，但在机子上首先需要找到hadoop-streaming的jar文件，路径跟官网的不一样。</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2011.09.41%20PM.png" alt="streaming"><br>我的路径是：<code>./share/hadoop/tools/lib/hadoop-streaming-2.8.0.jar</code></p>
<h1 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2010.47.18%20PM.png" alt="data"></p>
<h1 id="map阶段："><a href="#map阶段：" class="headerlink" title="map阶段："></a>map阶段：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    line = line.strip()</div><div class="line">    keys = line.split()</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys:</div><div class="line">        value = <span class="number">1</span></div><div class="line">        print(<span class="string">'&#123;0&#125;\t&#123;1&#125;'</span>.format(key,value))</div></pre></td></tr></table></figure>
<p>python从stdin标准输入中读取每行数据, 然后将词切分，然后输入格式为<code>&lt;key,value&gt;</code>的形式，因为在map阶段，value都是1</p>
<p>本地测试结果：</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2010.52.19%20PM.png" alt="test-map"></p>
<h1 id="reduce阶段："><a href="#reduce阶段：" class="headerlink" title="reduce阶段："></a>reduce阶段：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">last_key = <span class="keyword">None</span></div><div class="line">running_total = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> input_line <span class="keyword">in</span> sys.stdin:</div><div class="line">    input_line = input_line.strip()</div><div class="line"></div><div class="line">    this_key, value = input_line.split(<span class="string">"\t"</span>,<span class="number">1</span>)</div><div class="line">    value = int(value)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> last_key == this_key:</div><div class="line">        running_total += value</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> last_key: <span class="comment">#进入新的一组会进入这条语句，last_key初始是None，一开始不会打印</span></div><div class="line">            print(<span class="string">"&#123;0&#125;\t&#123;1&#125;"</span>.format(last_key,running_total))</div><div class="line"></div><div class="line">        running_total = value</div><div class="line">        last_key = this_key</div><div class="line"></div><div class="line"><span class="keyword">if</span> last_key == this_key: <span class="comment">#最后一组输出</span></div><div class="line">    print(<span class="string">"&#123;0&#125;\t&#123;1&#125;"</span>.format(last_key,running_total))</div></pre></td></tr></table></figure>
<p>本地测试：<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2010.56.42%20PM.png" alt="test-reduce"></p>
<p>有问题！怎么没有把相同的归在一起，其实这个程序如果按照map的输出当作输入执行结果就是这样的。因为<code>last_key</code>和<code>this_key</code>不停在变，因为map的输出哪怕没有两行是相同的key。那其实这里就涉及mapreduce的机制了，map阶段完成由输入数据到单词切分的工作，还有<strong><code>shuffle</code></strong>阶段，这个阶段完成相同的单词的聚集和分发工作，<strong>这个过程是mapreduce的默认过程，不用具体配置</strong>,也就是map和reduce的中间环节会把相同的给收集起来再进行reduce，如果在本地测试应该是这样的：</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2011.03.25%20PM.png" alt="test_reduce2"></p>
<p>用<code>sort</code>命令将相同的放在了一起，就模拟了把相同单词的聚集工作。</p>
<ul>
<li>[] ？有个疑问就是：相同的单词聚集在一起是分发给一个节点么，也就是不同节点计算着不同的单词，可能有节点计算好几个不同的单词，但问题是，是不是一个相同的所有单词都是在一个节点上reduce，如果不是，因为相同的单词被分了几份reduce了，那岂不是还要再reduce，总归要合并的，那这步在哪个节点上，由谁控制？</li>
</ul>
<h1 id="hadoop-上测试"><a href="#hadoop-上测试" class="headerlink" title="hadoop 上测试"></a>hadoop 上测试</h1><p>用<code>file:///</code>放在本地看</p>
<p><code>hadoop jar ../hadoop-2.8.0/share/hadoop/tools/lib/hadoop-streaming-2.8.0.jar -input file:///Users/Crayon_277/Develop/Project/hadoop/wordcount/testfile* -output file:///Users/Crayon_277/Develop/Project/hadoop/wordcount/output2 -mapper mapper.py -reducer reducer.py</code></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2011.19.07%20PM.png" alt="1"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2011.21.23%20PM.png" alt="2"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2011.21.37%20PM.png" alt="3"></p>
<p>注：以上在伪分布集群下测试的。</p>
<h2 id="mapreduce-framework"><a href="#mapreduce-framework" class="headerlink" title="mapreduce framework"></a>mapreduce framework</h2><p>运行hadoop程序给出的INFO，可以看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Map-Reduce Framework</div><div class="line">	Map input records=2</div><div class="line">	Map output records=16</div><div class="line">	Map output bytes=109</div><div class="line">	Map output materialized bytes=153</div><div class="line">	Input split bytes=234</div><div class="line">	Combine input records=0</div><div class="line">	Combine output records=0</div><div class="line">	Reduce input groups=12</div><div class="line">	Reduce shuffle bytes=153</div><div class="line">	Reduce input records=16</div><div class="line">	Reduce output records=12</div><div class="line">	Spilled Records=32</div><div class="line">	Shuffled Maps =2</div><div class="line">	Failed Shuffles=0</div><div class="line">	Merged Map outputs=2</div><div class="line">	GC time elapsed (ms)=0</div><div class="line">	Total committed heap usage (bytes)=1160773632</div></pre></td></tr></table></figure></p>
<p><code>Map input records=2</code> 这是说明有两个文件输入<br><code>Map output records=16</code>数了一下<code>mapper.py</code>程序的输出，就是16个<br>然后可以看到<code>Reduce input groups=12</code>应该就是说明了<code>shuffle</code>的工作收集相同的单词，但<code>Reduce input records=16</code>这个16应该指的的总的还是16个，不是按<strong>单词组</strong>来看。<br><code>Shuffled Maps=2</code> 我本来觉得是代表了有2种单词是有相同的，收集在一起了。但不是，因为其实在这个案例上是有4种是单词是有重复的。[Todo]</p>
<p>贴个流程图：</p>
<p><img src="https://i.stack.imgur.com/ToZS9.png" alt="mapreduceprogram"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实应该有5个阶段：</p>
<ul>
<li><p>map phase</p>
<blockquote>
<p>The map phase is done by mappers. Mappers run on unsorted input key/values pairs. Each mapper emits zero, one, or multiple output key/value pairs for each input key/value pairs.</p>
</blockquote>
</li>
<li><p>combine phase</p>
<blockquote>
<p>The combine phase is done by combiners. The combiner should combine key/value pairs with the same key. Each combiner may run zero, once, or multiple times.</p>
</blockquote>
</li>
<li><p>shuffle and sort phase</p>
<blockquote>
<p>The shuffle and sort phase is done by the framework. Data from all mappers are grouped by the key, split among reducers and sorted by the key. Each reducer obtains all values associated with the same key. The programmer may supply custom compare functions for sorting and a partitioner for data split.</p>
</blockquote>
</li>
<li><p>partitioner</p>
<blockquote>
<p>The partitioner decides which reducer will get a particular key value pair.</p>
</blockquote>
</li>
<li><p>reducer</p>
<blockquote>
<p>The reducer obtains sorted key/[values list] pairs, sorted by the key. The value list contains all values with the same key produced by mappers. Each reducer emits zero, one or multiple output key/value pairs for each input key/value pair.<br>参考：<br><a href="https://stackoverflow.com/questions/22141631/what-is-the-purpose-of-shuffling-and-sorting-phase-in-the-reducer-in-map-reduce" target="_blank" rel="external">What is the purpose of shuffling and sorting phase in the reducer in Map Reduce Programming?</a></p>
</blockquote>
</li>
</ul>
<p>因为combiner操作是有风险的，使用它的原则是combiner的输入不会影响到reduce计算的最终输入，例如：如果计算只是求总数，最大值，最小值可以使用combiner，但是做平均值计算使用combiner的话，最终的reduce计算结果就会出错。这个例子统计词频，同样也不能combine，因为会遗失数据了。</p>
]]></content>
    
    <summary type="html">
    
      Hadoop Streaming是Hadoop提供的一个编程工具，它允许用户使用任何可执行文件或者脚本文件作为Mapper和Reducer
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.mmmmmcclxxvii.cn/tags/mapreduce/"/>
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>shell （一）</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/05/shell/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/05/shell/</id>
    <published>2017-06-05T07:00:53.000Z</published>
    <updated>2017-06-05T07:53:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p>
<ul>
<li><p><a href="http://blog.csdn.net/solomon1558/article/details/51763751" target="_blank" rel="external">Linux的环境变量.bash_profile .bashrc profile文件</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/415403/whats-the-difference-between-bashrc-bash-profile-and-environment" target="_blank" rel="external">What’s the difference between .bashrc, .bash_profile, and .environment?’</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      /etc/profile, ~/.bash_profile, ~/.bashrc, ~/.profile 都是什么,区别是什么
    
    </summary>
    
      <category term="linux" scheme="http://www.mmmmmcclxxvii.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.mmmmmcclxxvii.cn/tags/linux/"/>
    
      <category term="shell" scheme="http://www.mmmmmcclxxvii.cn/tags/shell/"/>
    
      <category term="bash" scheme="http://www.mmmmmcclxxvii.cn/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>重新编译hadoop过程终于到的问题</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/02/recompile-hadoop/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/02/recompile-hadoop/</id>
    <published>2017-06-02T09:03:42.000Z</published>
    <updated>2017-06-03T08:10:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>在macOS上直接执行命令<code>brew install hadoop</code></p>
<p>然后执行hadoop命令的时候会出现<br><code>WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</code><br>的警报。这是因为apcche hadoop 官网上下载的源文件是在32为的机器上编译的。所以当64位的机子在加载.so文件的时候会出错。基本上不影响使用hadoop(如果使用mahout做一些机器学习的任务时有可能会遇到麻烦，加载不成功，任务直接退出，所以还是有必要解决掉这个warn的)。</p>
<a id="more"></a>
<p>从网上下载的源文件中的<code>BUILDING.txt</code>看到如下的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Requirements:</div><div class="line"></div><div class="line">* Unix System</div><div class="line">* * JDK 1.7+</div><div class="line">* * Maven 3.0 or later</div><div class="line">* * Findbugs 1.3.9 (if running findbugs)</div><div class="line">* * ProtocolBuffer 2.5.0</div><div class="line">* * CMake 2.6 or newer (if compiling native code), must be 3.0 or newer on Mac</div><div class="line">* * Zlib devel (if compiling native code)</div><div class="line">* * openssl devel (if compiling native hadoop-pipes and to get the best HDFS encryption performance)</div><div class="line">* * Linux FUSE (Filesystem in Userspace) version 2.6 or above (if compiling fuse_dfs)</div><div class="line">* * Internet connection for first build (to fetch all Maven and Hadoop dependencies)</div></pre></td></tr></table></figure>
<hr>
<h2 id="java-路径问题"><a href="#java-路径问题" class="headerlink" title="java 路径问题"></a>java 路径问题</h2><p>mac 下安装的路径见 <a href="http://blog.csdn.net/azhou_hui/article/details/46636769" target="_blank" rel="external">Mac下jdk的安装路径</a></p>
<h2 id="protobuf的问题"><a href="#protobuf的问题" class="headerlink" title="protobuf的问题"></a>protobuf的问题</h2><p>因为用<code>brew insatll protobuf</code>命令来安装<code>protobuf</code>版本是最新的，而这里是要求<code>2.5.0</code>，所以要自己手动下载<a href="https://github.com/google/protobuf/releases?after=v3.0.0-alpha-1" target="_blank" rel="external">protobuf2.5</a></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar xfvj tar xfvj protobuf-2.5.0.tar.bz2</code></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>进入目录后</p>
<p><code>./configure CC=clang CXX=clang++ CXXFLAGS=&#39;-std=c++11 -stdlib=libc++ -O3 -g&#39; LDFLAGS=&#39;-stdlib=libc++&#39; LIBS=&quot;-lc++ -lc++abi&quot;</code></p>
<h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p><code>make -j 4</code><br><code>sudo make install</code></p>
<p>完成！</p>
<h2 id="关于zlib的"><a href="#关于zlib的" class="headerlink" title="关于zlib的"></a>关于zlib的</h2><p>在Linux机子上的话就用各自的包管理工具安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y install svn ncurses-devel gcc*</div><div class="line">yum -y install lzo-devel zlib-devel autoconf automake libtool cmake openssl-devel</div></pre></td></tr></table></figure>
<p>mac下执行<br><code>xcode-select --install</code>就行了</p>
<h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p>修改安装目录下<code>conf/settings.xml</code>（因为maven使用的国外的reposity，国内有时无法访问，修改为国内镜像即可）<br>修改如下：<br>在<mirrors></mirrors>里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;mirror&gt;</div><div class="line">    &lt;id&gt;nexus-osc&lt;/id&gt;</div><div class="line">	&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</div><div class="line">	&lt;name&gt;Nexusosc&lt;/name&gt;</div><div class="line">	&lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class="line">&lt;/mirror&gt;</div></pre></td></tr></table></figure></p>
<p>上面最终是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;mirrors&gt;</div><div class="line"> &lt;mirror&gt;</div><div class="line">  ...</div><div class="line"> &lt;/mirror&gt;</div><div class="line">&lt;/mirrors&gt;</div></pre></td></tr></table></figure></p>
<p>同样在<profiles></profiles>内新添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;profile&gt;</div><div class="line">       &lt;id&gt;jdk-1.8&lt;/id&gt;</div><div class="line">       &lt;activation&gt;</div><div class="line">         &lt;jdk&gt;1.8&lt;/jdk&gt;</div><div class="line">       &lt;/activation&gt;</div><div class="line">       &lt;repositories&gt;</div><div class="line">         &lt;repository&gt;</div><div class="line">           &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">           &lt;name&gt;local private nexus&lt;/name&gt;</div><div class="line">           &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class="line">           &lt;releases&gt;</div><div class="line">             &lt;enabled&gt;true&lt;/enabled&gt;</div><div class="line">           &lt;/releases&gt;</div><div class="line">           &lt;snapshots&gt;</div><div class="line">             &lt;enabled&gt;false&lt;/enabled&gt;</div><div class="line">           &lt;/snapshots&gt;</div><div class="line">         &lt;/repository&gt;</div><div class="line">       &lt;/repositories&gt;</div><div class="line">       &lt;pluginRepositories&gt;</div><div class="line">         &lt;pluginRepository&gt;</div><div class="line">           &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">          &lt;name&gt;local private nexus&lt;/name&gt;</div><div class="line">           &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class="line">           &lt;releases&gt;</div><div class="line">             &lt;enabled&gt;true&lt;/enabled&gt;</div><div class="line">           &lt;/releases&gt;</div><div class="line">           &lt;snapshots&gt;</div><div class="line">             &lt;enabled&gt;false&lt;/enabled&gt;</div><div class="line">           &lt;/snapshots&gt;</div><div class="line">         &lt;/pluginRepository&gt;</div><div class="line">       &lt;/pluginRepositories&gt;</div><div class="line">     &lt;/profile&gt;</div></pre></td></tr></table></figure>
<p>But！！！在我的机子上有问题，还是保持原样就行了。因为后面出现了一个问题，所以以为这里是一个症状，排除法么。但如果有谁是因为镜像下载问题的话，估计是这个的问题。还有这里的国内镜像，<code>maven.oschian.net</code>，【todo】再去找找其他镜像的地址。<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-02%20at%207.16.06%20PM.png" alt="maven"></p>
<h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">....</div><div class="line">[INFO] Apache Hadoop Auth ................................. SUCCESS [  3.375 s]</div><div class="line">[INFO] Apache Hadoop Auth Examples ........................ SUCCESS [  2.518 s]</div><div class="line">[INFO] Apache Hadoop Common ............................... FAILURE [  4.272 s]</div><div class="line">[INFO] Apache Hadoop NFS .................................. SKIPPED</div><div class="line">[INFO] Apache Hadoop KMS .................................. SKIPPED</div><div class="line">....</div></pre></td></tr></table></figure>
<p>可以看到 hadoop common 编译失败</p>
<p>报错：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[INFO] BUILD FAILURE</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: 21.337 s</div><div class="line">[INFO] Finished at: 2017-06-03T11:20:12+08:00</div><div class="line">[INFO] Final Memory: 73M/725M</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.7:run (make) on project hadoop-common: An Ant BuildException has occured: <span class="built_in">exec</span> returned: 2</div><div class="line">[ERROR] around Ant part ...&lt;<span class="built_in">exec</span> failonerror=<span class="string">"true"</span> dir=<span class="string">"/Users/Crayon_277/Develop/Project/hadoop/hadoop-2.8.0-src/hadoop-common-project/hadoop-common/target/native"</span> executable=<span class="string">"make"</span>&gt;... @ 7:160 <span class="keyword">in</span> /Users/Crayon_277/Develop/Project/hadoop/hadoop-2.8.0-src/hadoop-common-project/hadoop-common/target/antrun/build-main.xml</div><div class="line">[ERROR] -&gt; [Help 1]</div><div class="line">[ERROR]</div><div class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the <span class="_">-e</span> switch.</div><div class="line">[ERROR] Re-run Maven using the -X switch to <span class="built_in">enable</span> full debug logging.</div><div class="line">[ERROR]</div><div class="line">[ERROR] For more information about the errors and possible solutions, please <span class="built_in">read</span> the following articles:</div><div class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</div><div class="line">[ERROR]</div><div class="line">[ERROR] After correcting the problems, you can resume the build with the <span class="built_in">command</span></div><div class="line">[ERROR]   mvn &lt;goals&gt; -rf :hadoop-common</div></pre></td></tr></table></figure>
<p>链接文章：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/19943766/hadoop-unable-to-load-native-hadoop-library-for-your-platform-warning" target="_blank" rel="external">Hadoop “Unable to load native-hadoop library for your platform” warning</a></li>
<li><a href="http://www.ercoppa.org/posts/how-to-compile-apache-hadoop-on-ubuntu-linux.html" target="_blank" rel="external">Compile Apache Hadoop on Linux (fix warning: Unable to load native-hadoop library)</a><br>-</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在macOS上直接执行命令&lt;code&gt;brew install hadoop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后执行hadoop命令的时候会出现&lt;br&gt;&lt;code&gt;WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable&lt;/code&gt;&lt;br&gt;的警报。这是因为apcche hadoop 官网上下载的源文件是在32为的机器上编译的。所以当64位的机子在加载.so文件的时候会出错。基本上不影响使用hadoop(如果使用mahout做一些机器学习的任务时有可能会遇到麻烦，加载不成功，任务直接退出，所以还是有必要解决掉这个warn的)。&lt;/p&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>stackoverflow-bitcoin-1</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/05/29/stackoverflow-bitcoin-1/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/05/29/stackoverflow-bitcoin-1/</id>
    <published>2017-05-29T10:31:21.000Z</published>
    <updated>2017-05-29T12:35:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工作量证明机制和权益证明机制有什么区别What’s-the-difference-between-PoW-and-PoS-’"><a href="#工作量证明机制和权益证明机制有什么区别What’s-the-difference-between-PoW-and-PoS-’" class="headerlink" title="工作量证明机制和权益证明机制有什么区别What’s the difference between PoW and PoS?’"></a>工作量证明机制和权益证明机制有什么区别<a href="https://bitcoin.stackexchange.com/questions/43467/whats-the-difference-between-pow-and-pos" target="_blank" rel="external">What’s the difference between PoW and PoS?’</a></h1><p>我正在寻找能够说明工作量证明机制算法和权益证明机制算法的解释，还有他们是如何和比特币还有区块链有联系的。</p>
<p>也希望有一个非常简单明了没有包含过多技术的回答。可以有一点技术方面的东东，但我不是开发者，我并不知道怎么去编程。</p>
<p>（）（）</p>
<hr>
<p>下面几点简要的概括：</p>
<ul>
<li>一个加密货币有它自己的区块链来储存所有出现的交易</li>
<li>工作量证明机制和权益证明机制是两种不同的算法来获取 哪个区块将会链接到区块链后面 的共识。</li>
<li><a href="https://en.bitcoin.it/wiki/Proof_of_work" target="_blank" rel="external">工作量证明（PoW）</a>需要某种类型的工作发生的证明。就比特币矿工来说，他们需要在区块被其他接受之前做这个工作。</li>
<li><a href="https://en.bitcoin.it/wiki/Proof_of_Stake" target="_blank" rel="external">权益证明(PoS)</a> 要求用户拥有相当量的货币（比如拥有许多coins）来决定下一个区块。这有某一方垄断货币的高风险。但是有几种方法可以阻止（通过随机分配利益相关者来共识新区块，其他）</li>
</ul>
<p>最主要的区别可以归结于，工作量证明机制需要额外的资源（挖矿设备）但权益证明不需要。如果比特币家里减少，越来越少的人被激励去挖矿，因此会导致整个系统的安全性减少，工作量机制会被苛责（criticized) 。而权益证明机制，因为它是免费来增加新区块到区块链后面的，你可以用它来同事做几个相似的币的权益证明（详见PoS链接中的“nothing at stake”问题）</p>
<p>例子：</p>
<ul>
<li>比特币，莱特币还有其他许多币种使用PoW方法。</li>
<li>NXT，BitShares还有其他使用PoS方法。</li>
<li>以太坊使用PoW但是它计划要转到PoS.</li>
<li>PeerCoin使用PoW和PoS的结合机制。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      学习stackexchange bitcoin板块的别人的惑。
    
    </summary>
    
      <category term="stackoverflow" scheme="http://www.mmmmmcclxxvii.cn/categories/stackoverflow/"/>
    
    
      <category term="bitcoin" scheme="http://www.mmmmmcclxxvii.cn/tags/bitcoin/"/>
    
      <category term="stackoverflow" scheme="http://www.mmmmmcclxxvii.cn/tags/stackoverflow/"/>
    
      <category term="blockchain" scheme="http://www.mmmmmcclxxvii.cn/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>project of stackoverflow - C Piece (一)</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/05/27/stackoverflow-c-piece-1/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/05/27/stackoverflow-c-piece-1/</id>
    <published>2017-05-27T10:55:09.000Z</published>
    <updated>2017-06-03T09:13:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C中的操作符优先级-precedence-of-operator-in-c"><a href="#C中的操作符优先级-precedence-of-operator-in-c" class="headerlink" title="C中的操作符优先级 precedence of operator in c"></a>C中的操作符优先级 <a href="https://stackoverflow.com/questions/25057097/precedence-of-operator-in-c" target="_blank" rel="external">precedence of operator in c</a></h1><p>我是一个变成新手，现在我正在学有关C操作符优先级的部分。我尝试着想要分析下面给出的代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">int</span> x, y, z;</div><div class="line">   x = y = z= <span class="number">-1</span>;</div><div class="line">  z = ++x&amp;&amp;++y&amp;&amp;++z;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"x = %d y = %d z = %d"</span>, x, y ,z);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在学了操作符的优先级后，我知道一元操作符(unary operator)有更高的优先级，所以在上面的代码中：<br><code>z = ++0&amp;&amp;++0&amp;&amp;++0;</code><br>所以<code>x</code>,<code>y</code>,<code>z</code>的值是0，对吧？但是编译执行后，结果是<code>x = 0 y = -1 z = 0</code><br>有人能帮我解决这个问题么？</p>
<hr>
<p>得票2:</p>
<p>这个表达式：<br><code>z = ++x&amp;&amp;++y&amp;&amp;++z;</code></p>
<p>其实和下面这个表达式是等价的：</p>
<p><code>z = ( ++x &amp;&amp; ++y ) &amp;&amp; ++z;</code></p>
<p>根据标准C：</p>
<blockquote>
<ol>
<li>和二进制位操作&amp;不一样，&amp;&amp;操作是从左向右结合计算。如果第二个操作数北极算了，那就说明在第一个操作数和第二个操作数之间存在一个<strong>sequence point</strong>。如果第一个操作数比较等于0，那么第二个操作数不会被计算。</li>
</ol>
</blockquote>
<p>所以首先<code>++x</code>被计算。它等于0。所以<code>++y</code>不会被计算。表达式：<br><code>(++x &amp;&amp; ++y)</code><br>结果是0。因为它等于0，所以表达式<code>(++x &amp;&amp; ++y) &amp;&amp; ++z</code>中的子表达式<code>++z</code>不会被计算。<br>所以<code>z</code>会被赋值整个表达式的值，那就是0。</p>
<p>这里至少没有任何未定义的行为(undefined behaviour) 因为表达式<code>++z</code>不会被计算。</p>
<p>所以你会得到 x == 0, y == -1, 和 z == 0 （这是因为赋值语句）</p>
<hr>
<h1 id="Undefined-behavior-and-sequence-points"><a href="#Undefined-behavior-and-sequence-points" class="headerlink" title="Undefined behavior and sequence points"></a><a href="https://stackoverflow.com/questions/4176328/undefined-behavior-and-sequence-points" target="_blank" rel="external">Undefined behavior and sequence points</a></h1><p>tag: c++ , undefined-behavior, c++.fag, sequence-points</p>
<p>什么是“序列点”(sequence points)? (不知道这么翻译对不对)<br>未定义行为和序列点的关系是什么？</p>
<p>我经常使用像<code>a[++i] = i</code>这种有趣却复杂的表达式，我也感觉不错，为什么要停止使用这些呢？</p>
<p>如果你已经阅读到这里了，确保访问下面的问题<a href="https://stackoverflow.com/questions/4638364" target="_blank" rel="external">Undefined behavior and sequence points reloaded.</a></p>
<hr>
<p>556票的回答：</p>
<p>C++98 和 C++03</p>
<p>这个回答是准备给C++旧标准的。C++11和C++14标准版本没有正式的包含”[sequence points]”这个说法；运算反而是(sequence before) 或 (unsequenced) 或 (indeterminately sequenced) 。网络效应（net effect)？基本上一致，但是术语不一样而已。</p>
<hr>
<p>不承诺： 好吧，这个回答有点长，所以在阅读的时候需要一点耐心，如果你已经知道这些东西了，再次阅读不会让你疯狂的。</p>
<p>前提： 需要<a href="">C++ standard</a>的一点基础知识</p>
<hr>
<p>什么是sequence points?</p>
<p>标准中说到：</p>
<blockquote>
<p>At certain specified points in the execution sequence called sequence points, all side effects of previous evaluations shall be complete and no side effects of subsequent evaluations shall have taken place. (§1.9/7)</p>
</blockquote>
<p>[TODO]</p>
]]></content>
    
    <summary type="html">
    
      搬运stackoverflow有关C的知识，即练英语，又可以从他人的困惑中学到新东西。
    
    </summary>
    
      <category term="stackoverflow" scheme="http://www.mmmmmcclxxvii.cn/categories/stackoverflow/"/>
    
    
      <category term="stackoverflow" scheme="http://www.mmmmmcclxxvii.cn/tags/stackoverflow/"/>
    
      <category term="c" scheme="http://www.mmmmmcclxxvii.cn/tags/c/"/>
    
      <category term="c-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/c-piece/"/>
    
  </entry>
  
  <entry>
    <title>愚见比特币（一）--货币的本质</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/05/18/inside-money/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/05/18/inside-money/</id>
    <published>2017-05-18T02:42:39.000Z</published>
    <updated>2017-05-23T09:41:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>对货币的研究不是很深入，但毕竟是每天都用的东西，然后结合了一些看的资料，下面给出我的理解，不对的地方非常欢迎指点。</p>
<hr>
<p>要想了解比特币，还得从猴子变人开始说起…</p>
<p>古时候，人们交易，实际上就是交换，比如我有鸡蛋，你有牛奶，我刚好需要牛奶，然后你刚好需要鸡蛋，然后商量着，我用30个鸡蛋换你一桶牛奶。</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-05-18%20at%2010.48.12%20AM.png" alt="exchange"></p>
<p>但是社会体系越来越庞大后，需求也越来越多后，可能我要牛奶，但牛奶拥有者不要鸡蛋，所以我还得先换到他想要的那样东西，这让我想起了我小时候听的磁带里面的一则故事，故事名字还有里面具体的那个物品名字我给忘了，大概意思就是小兔他妈妈让小兔子拿着自家缝的一块布去换家里需要的白菜（我指的具体的物品是指这些，但这不是终点，忽略这些细节），然后小兔子找到白菜主人，他不要布，他要地瓜，然后找到地瓜主人，问要不要交换，然后也不要，他要香蕉，然后又去找香蕉的主人，反反复复，找到最终能交换到需要布的，然后再一步步回朔换到白菜。就是一个递归的过程。这样换，就很麻烦</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-05-23%20at%203.02.26%20PM.png" alt="exchange_multi"></p>
<p>（图片中的尖头表示拥有者手中持有物的更替）</p>
<p>然后慢慢大家达成某种共识，就是抽取出一种特殊商品，所有其他东西都可以由它等价交换（一般等价物）。现在我鸡蛋换牛奶是，先用30个鸡蛋换100个海贝，这里海贝就是这种“中介商品”，然后100个海贝再去换1桶牛奶</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-05-18%20at%2011.02.56%20AM.png" alt="exchange-agency"></p>
<p>这个海贝其实就是货币的雏形，然后慢慢的发展到金属货币，经历银本位，复本位，金本位，blabla的，这里我也不是很了解，但不影响。比如我国古代的铜币，银子，金子。但是金属有个弊端就是太重了，后来就有钱庄，发行银票，但银票本质还是以金子做货币基础的，银票只是起到了符号的作用。我国南宋的交子是最早政府发行的纸币（银票），而且这些交子（银票）都是由商人自由发行的。</p>
<p>到了二战结束后，全球形成了以美元为中心的布雷顿森林体系，取代了站前的金本位制度，后来美国取消兑换黄金后，全球真正进入了信贷程序发行货币的时代。</p>
<p>以前是用黄金作为中介，这些都是实物，看得见摸得着的。现在的纸币本位，其实是由国家信用作为“抵押”的</p>
<blockquote>
<p>基础货币相当于政府向全国国民的借债，但至于借债是否能被偿还，乃至政府资产是否价值，只取决于人们对政府的信心和政府自身的信用</p>
</blockquote>
<p>我是这么理解的。如果A欠B十块钱，B欠C十块钱，是不是通过商量协定后A欠C十块钱一样的。那现在其实就是把人民币看作一种权利义务的关系，我们是债权人，国家是债务人，我们有100元，先把这个单元去掉，相当于就是（我们有对国家的100债券），然后我们交易，我给你10元，就是我把对国家的10个债权转让给你。现在是把这个关系抽象出来放在原来黄金的位置上。</p>
<p>其实上面的这个债券债务关系比喻还是有点不太恰当，毕竟国家发行货币就是不断印钞，印多了通货膨胀。之前商业银行还可以发行自己的货币，但后来中央将这个权利回收，只有中央可以发行货币。</p>
<p>总结来说，很久以前的海贝变成了现在的纸币。货币用来买卖的，为什么我接受这个货币，其实就是大家都认可么，就像海贝，从商品中分离出来固定充当一般等价物，因为海贝是实物，摸得着看得见，后面是大自然“撑腰”。现在只是后面是国家的信用“撑腰”</p>
<p>那我们的财富是什么，是我们手上的100元吗？不是，财富是我们<strong>资产负债表</strong>的加加减减。可以说货币就是记账方式，钱只是账本上面的一串数字，那每个人其实有一本账本（在银行里）。</p>
<p>那比特币本质其实就是一个所有人的账本，所有人交易放在一个账本上，所有人都可以看，所有人都可以维护。<br>它是去中心化的，没有中央银行。记载在我们现在生活中的账本的那些数字，我们给它一个单位叫元，叫美元，日元等等。然后在比特币这个系统，我们给它一个单位叫比特币。这个系统中发行货币的方式就是“矿工挖矿“（我不太喜欢这个称号，久而久之就不知道本质是啥了，其实就是全网的记账人），给记账人记账的奖励就是产生新的比特币，以及交易产生的手续费。</p>
<p>那我们现实生活中的货币是基于国家信用的，而比特币是基于密码学，基于数学原理。<strong>只要大家都认可</strong>（共识机制），就可以交易了。</p>
<p>那国家货币还有一些防伪手段等来解决现实生活中出现的问题。下面会说明比特币是怎么利用数学来解决这个问题的。</p>
<hr>
<p>我的理解不是很深，欢迎指正。也请阅读的过的人留下邮箱，万一有错，不想误人子弟，等错误更正会通过邮箱来提醒你。</p>
]]></content>
    
    <summary type="html">
    
      看了一些资料，表达能力不好，但还是尽量把我的看法尽可能的表达出来
    
    </summary>
    
      <category term="interest" scheme="http://www.mmmmmcclxxvii.cn/categories/interest/"/>
    
    
      <category term="bitcoin" scheme="http://www.mmmmmcclxxvii.cn/tags/bitcoin/"/>
    
      <category term="monetary" scheme="http://www.mmmmmcclxxvii.cn/tags/monetary/"/>
    
      <category term="currency" scheme="http://www.mmmmmcclxxvii.cn/tags/currency/"/>
    
  </entry>
  
  <entry>
    <title>平静和沉淀</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/05/17/calm-down/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/05/17/calm-down/</id>
    <published>2017-05-17T15:44:57.000Z</published>
    <updated>2017-05-17T16:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>焦虑。</p>
<p>其实我觉得我有毅力做一件事，但是太急功近利了，没有耐心。而且，懒。这个是人的天性啊，但是为了要达到你想追求的目标，就必须要和天性斗争。不能老是拿顺其自然的话语来安慰自己，目前在自己身上这两者是竞品。</p>
<p>在这个追求快速制胜的时代，连NBA联盟都流行小球，快准狠的风格了，做一只马刺队一样的清流还是很难的啊。</p>
<p>毕竟人家波波老爷子用了20年打造的文化基奠。</p>
<p>浮躁。</p>
<p>受大环境影响，往往迷失了自己。我感觉现在虚活着，什么都想干，但不知道干嘛。</p>
<p>静。</p>
]]></content>
    
    <summary type="html">
    
      Just slow down, step by step
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>install hadoop</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/14/install-hadoop/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/14/install-hadoop/</id>
    <published>2017-04-14T06:47:18.000Z</published>
    <updated>2017-06-06T02:02:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为hadoop版本的问题，有些命令可能不一样。网上搜到的一些资料都会过时或与我现在安装的版本不兼容。<br>所以直接看<a href="http://hadoop.apache.org/docs/" target="_blank" rel="external">官方文档</a></p>
<p>那安装其实涉及的就是单机和集群。特地在知乎上逛了一圈，得到的答案是，看目的吧，如果主要想学习mapreduce编程的，不要搭集群，不要搭集群，不要搭集群！！！因为目的是修炼内功，就没必要磨练工具了吧。但至少我觉得安装个工具如果都搞不定的话，那就不用混了。还是把重心放在mapreduce编程上吧</p>
<p>这里记录一个安装<code>single-node</code> hadoop的历程。</p>
<p>我mac上用的是<code>homebrew</code>包管理工具，所以我就直接<code>brew install hadoop</code>。好了，安装完成。</p>
<p>接下来的<a href="http://hadoop.apache.org/docs/r2.8.0/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="external">文档</a>里面都有。</p>
<p>主要记录一下几个点：</p>
<ol>
<li>java的路径</li>
</ol>
<p>因为是从官网下载的dmg直接安装的。java home的路径是<code>/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home</code><br>如果是其他途径，比如<code>brew cask install java</code>的话，那应该会在<code>/usr/local/Cellar/java</code>中吧（我猜的），还有其他的肯定会有提示的。</p>
<ol>
<li>官网文档中的etc/hadoop？？在哪？</li>
</ol>
<p>因为是通过<code>brew</code>安装的<code>hadoop</code>，所以<code>hadoop</code>都在<code>/usr/local/Cellar/hadoop</code>里面。文档直接说是<code>etc/hadop</code>，对应我机子上完整的路径是<code>/usr/local/Cellar/hadoop/2.8.0/libexec/etc</code></p>
<p>同理<code>bin/hadoop</code></p>
<p>中间什么配置<code>core-site.xml</code>等文件看文档就好了。<strong>因为不同版本可能配置会不一样！！！所以还是看官方文档</strong></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-03%20at%2012.29.03%20AM.png" alt="hadoop-localhost"></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-05%20at%207.22.24%20PM.png" alt="yarn"></p>
<p>出来这个页面就可以了</p>
<ol>
<li>hadoop fs -ls</li>
</ol>
<p>在官网文档里面的命令是<code>hdfs dfs</code>，但其实是一样的<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-03%20at%2012.54.22%20AM.png" alt="hadoop"></p>
<p>但执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</div><div class="line">ls: `.<span class="string">': No such file or directory</span></div></pre></td></tr></table></figure></p>
<p>上面那个是因为编译的问题。hadoop官方是32位编译的好像。然后我机子是64位的。这个暂时不管。<br>下面这个报错其实是正常的。</p>
<p><code>hadoop fs -ls</code>命令的语法完整其实是<code>hadoop fs -ls [path]</code><br>而默认情况下，不用详细指定<code>[path]</code>,hadoop会认为是在hdfs中的<code>/home/[username]</code>，这个<code>[username]</code>就是用bash shell当前的用户替换。</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-03%20at%205.17.35%20AM.png" alt="shell"></p>
<p>比如在我机子上，hadoop回去找<code>/home/MMMMMCCLXXVII</code>，但这个路径不存在hdfs中。那这样，其实就是指定一个路径就可以了。</p>
<p><code>hadoop fs -ls /</code> 它会自动获取计算出hdfs的根目录，然后显示</p>
<p>其实根据<code>core-site.xml</code>的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">	    &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">		&lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p>预想<code>hadoop fs -ls hdfs://localhost:9000/</code> 应该可以的。但是好像有问题。[TOdo]</p>
<p>然后用hadoop命令显示本地的文件。<code>hadoop fs -ls file:///</code></p>
<p>借鉴的文档：</p>
<hr>
<p><a href="http://blog.csdn.net/joe_007/article/details/8298814" target="_blank" rel="external">【hadoop】ssh localhost 免密码登陆（图解）</a><br>主要就是先要有sudo权限，如果没有用root账户的时候。<br><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-centos-quickstart" target="_blank" rel="external">How To Create a Sudo User on CentOS </a><br>这个<code>usermod</code>命令后，要重启终端。</p>
<blockquote>
<p>Have you logged in again after the usermod? IIRC, groups are only looked up when you log in (e.g. opened a new terminal window).</p>
</blockquote>
<p>然后就是那两个命令，创建isa-pub.<br>主要就是要有权限。</p>
<hr>
<p>关闭SElinux</p>
<p><a href="http://www.centoscn.com/CentOS/config/2015/0618/5681.html" target="_blank" rel="external">CentOS7中关闭selinux</a><br>这个设置后重启没用，还是开着的</p>
]]></content>
    
    <summary type="html">
    
      记录安装hadoop 2.8.0
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>vim的字符编码</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/10/vim-encoding/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/10/vim-encoding/</id>
    <published>2017-04-10T04:43:00.000Z</published>
    <updated>2017-04-10T05:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim中的编码"><a href="#vim中的编码" class="headerlink" title="vim中的编码"></a>vim中的编码</h1><p>vim 有四个跟字符编码方式有关的选项，encoding、fileencoding、fileencodings、termencoding (这些选项可能的取值请参考 Vim 在线帮助 :help encoding-names)</p>
<ul>
<li>encoding: Vim 内部使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、消息文本等。默认是根据你的locale选择.用户手册上建议只在 .vimrc 中改变它的值，事实上似乎也只有在.vimrc 中改变它的值才有意义。你可以用另外一种编码来编辑和保存文件，如你的vim的encoding为utf-8,所编辑的文件采用cp936编码,vim会自动将读入的文件转成utf-8(vim的能读懂的方式），而当你写入文件时,又会自动转回成cp936（文件的保存编码). </li>
<li>fileencoding: Vim 中当前编辑的文件的字符编码方式，Vim 保存文件时也会将文件保存为这种字符编码方式 (不管是否新文件都如此)。 </li>
<li>fileencodings: Vim自动探测fileencoding的顺序列表， 启动时会按照它所列出的字符编码方式逐一探测即将打开的文件的字符编码方式，并且将 fileencoding 设置为最终探测到的字符编码方式。因此最好将Unicode 编码方式放到这个列表的最前面，将拉丁语系编码方式 latin1 放到最后面。 </li>
<li>termencoding: Vim 所工作的终端 (或者 Windows 的 Console 窗口) 的字符编码方式。如果vim所在的term与vim编码相同，则无需设置。如其不然，你可以用vim的termencoding选项将自动转换成term的编码.这个选项在 Windows 下对我们常用的 GUI 模式的 gVim 无效，而对 Console 模式的Vim 而言就是 Windows 控制台的代码页，并且通常我们不需要改变它。 </li>
</ul>
<p>最主要的就是关注一下<code>encoding</code>和<code>fileencoding</code>，总结就是前者是vim内部处理字符的用的。vim中可能会处理不一样的编码的字符，然后都化为统一的格式进行处理是最明智的。后者是文件的编码格式。</p>
<p>上面也说的很清楚了，文件读入时，若是<code>fileencoding</code>和<code>encoding</code>不一致，会先转化成<code>encoding</code>，统一处理，最后保存的时候再转化回<code>fileencoding</code>。转化的过程就是通过<code>unicode</code>这个第二层过渡。看<a href="http://www.mmmmmcclxxvii.cn/2016/10/04/encoding/">编码总结</a></p>
<h1 id="vim的多字符编码方式支持工作流程"><a href="#vim的多字符编码方式支持工作流程" class="headerlink" title="vim的多字符编码方式支持工作流程"></a>vim的多字符编码方式支持工作流程</h1><ol>
<li>Vim 启动，根据 <code>.vimrc</code> 中设置的<code>encoding</code> 的值来设置 buffer、菜单文本、消息文的字符编码方式。 </li>
<li>读取需要编辑的文件，根据<code>fileencodings</code> 中列出的字符编码方式逐一探测该文件编码方式。并设置<code>fileencoding</code>为探测到的，看起来是正确的 字符编码方式。 </li>
<li>对比<code>fileencoding</code>和<code>encoding</code>的值，若不同则调用<code>iconv</code>将文件内容转换为<code>encoding</code>所描述的字符编码方式，并且把转换后的内容放到为此文件开辟的<code>buffer</code>里，此时我们就可以开始编辑这个文件了。注意，完成这一步动作需要调用外部的<code>iconv.dll</code>，你需要保证这个文件存在于<code>$VIMRUNTIME</code>或者其他列在<code>PATH</code>环境变量中的目录里。 </li>
<li>编辑完成后保存文件时，再次对比<code>fileencoding</code>和<code>encoding</code>的值。若不同，再次调用<code>iconv</code>将即将保存的 buffer 中的文本转换为<code>fileencoding</code>所描述的字符编码方式，并保存到指定的文件中。同样，这需要调用<code>iconv.dll</code>由于<code>Unicode</code>能够包含几乎所有的语言的字符，而且<code>Unicode</code>的<code>UTF-8</code>编码方式又是非常具有性价比的编码方式 (空间消耗比<code>UCS-2</code>小)，因此建议<code>encoding</code>的值设置为<code>utf-8</code>。这么做的另一个理由是<code>encoding</code>设置为<code>utf-8</code>时，Vim 自动探测文件的编码方式会更准确 (或许这个理由才是主要的 ;)。我们在中文 Windows 里编辑的文件，为了兼顾与其他软件的兼容性，文件编码还是设置为<code>GB2312/GBK</code> 比较合适，因此<code>fileencoding</code>建议设置为 chinese (chinese 是个别名，在 Unix 里表示 gb2312，在 Windows 里表示cp936，也就是 GBK 的代码页)。 </li>
</ol>
]]></content>
    
    <summary type="html">
    
      对vim中`encoding`,`filenecoding`,`fileencodings`,`termencoding`的区别做个认识
    
    </summary>
    
      <category term="砍树人" scheme="http://www.mmmmmcclxxvii.cn/categories/%E7%A0%8D%E6%A0%91%E4%BA%BA/"/>
    
    
      <category term="encode" scheme="http://www.mmmmmcclxxvii.cn/tags/encode/"/>
    
      <category term="utf-8" scheme="http://www.mmmmmcclxxvii.cn/tags/utf-8/"/>
    
  </entry>
  
  <entry>
    <title>用r做一个简单的统计词频的程序</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/08/r-text-mining-word-frequency/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/08/r-text-mining-word-frequency/</id>
    <published>2017-04-08T06:31:23.000Z</published>
    <updated>2017-04-10T10:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>要求：<br>假设<code>文件1</code>中有内容<code>a b c c</code>,<code>文件2</code>中有<code>a b d</code><br>现在要统计成如下的样子：</p>
<table>
<thead>
<tr>
<th></th>
<th>a</th>
<th>b</th>
<th>c</th>
<th>d</th>
</tr>
</thead>
<tbody>
<tr>
<td>文件1</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>0</td>
</tr>
<tr>
<td>文件2</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>用到R中的table函数</p>
<a id="more"></a>
<h1 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h1><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><blockquote>
<p>table uses the cross-classifying factors to build a contingency table of the counts at each combination of factor levels.</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; f1</div><div class="line">[<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"c"</span></div><div class="line">&gt; table(f1)</div><div class="line">f1</div><div class="line">a b c </div><div class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure>
<p>文档中说了<code>table</code>使用<code>facter</code>中的<code>level</code>来生成统计项，然后记录各项出现的次数。</p>
<h2 id="factor"><a href="#factor" class="headerlink" title="factor"></a>factor</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set.seed(<span class="number">102</span>)                           <span class="comment"># This yields a good illustration.</span></div><div class="line">x &lt;- sample(<span class="number">1</span>:<span class="number">3</span>, <span class="number">15</span>, replace=<span class="literal">TRUE</span>)</div><div class="line">education &lt;- factor(x, labels=c(<span class="string">"None"</span>, <span class="string">"School"</span>, <span class="string">"College"</span>))</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; x</div><div class="line">[<span class="number">1</span>] <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span></div><div class="line">&gt;education</div><div class="line">[<span class="number">1</span>] School  School  College School  None    School  College None    College</div><div class="line">[<span class="number">10</span>] School  College College College School  School </div><div class="line">Levels: None School College</div></pre></td></tr></table></figure>
<p>上面可以看出labels就是实现一种转化么。默认是<code>lables = levels(x)</code></p>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>因为<code>文件1</code>中没有d，但统计的时候还是要有它的项，当然值是0。所以我们要有一个<code>level</code>是包含所有的项的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; table(factor(f1,levels=c(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>)))</div><div class="line"></div><div class="line">a b c d </div><div class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>这里有另一个话题就是读取文件还可以用<code>readLines</code>函数，不过<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; readLines(file.choose())</div><div class="line">[<span class="number">1</span>] <span class="string">"a b c c"</span></div></pre></td></tr></table></figure></p>
<p>可以看到，这是一个向量，<code>scan</code>读进来直接是分开的。<br>所以如果用readLines的话，还要用<code>strsplit</code>函数进行分割，就和python中的<code>split</code>函数一样<br>还有我这里用<code>file.choose()</code>来手动选择文件，因为在mac上不知道为什么绝对路径传进去都有问题。[Todo]</p>
<h2 id="简单情况"><a href="#简单情况" class="headerlink" title="简单情况"></a>简单情况</h2><p>现在将情况简单化一点，现在假设只有一个文件，现在统计的<code>文件1</code>等就是第1行，依次类推。</p>
<h3 id="先得到所有的词，每个词是一个元素，像scan那样"><a href="#先得到所有的词，每个词是一个元素，像scan那样" class="headerlink" title="先得到所有的词，每个词是一个元素，像scan那样"></a>先得到所有的词，每个词是一个元素，像<code>scan</code>那样</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dat &lt;- readLines(file.choose())</div><div class="line">rownum &lt;- length(dat)</div><div class="line">word &lt;- <span class="literal">NULL</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:rownum)&#123;</div><div class="line">	di &lt;- dat[i]</div><div class="line">	di &lt;- strsplit(di,split=<span class="string">' '</span>)[[<span class="number">1</span>]]</div><div class="line">	word &lt;- c(word,di)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="得到所有的项"><a href="#得到所有的项" class="headerlink" title="得到所有的项"></a>得到所有的项</h3><p>其实也就是数学里面的集合么。估计<code>Levels</code>就是集合实现的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; factor(word)</div><div class="line">[<span class="number">1</span>] a b c c a b d</div><div class="line">Levels: a b c d</div></pre></td></tr></table></figure></p>
<p>这样就得到了所需要的所有项<code>a</code>,<code>b</code>,<code>c</code>,<code>d</code></p>
<p>那其实因子<code>a b c c a b d</code>它是按顺序来的，那其实对第一行的统计就可以<code>table(factor(word[1:len_row_1]))</code><br>那<code>len_row_1</code>怎么得来，就可以在原来的<code>for</code>循环中直接用<code>length</code>计算出<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dat &lt;- readLines(file.choose())</div><div class="line">rownum &lt;- length(dat)</div><div class="line">len &lt;- rep(<span class="number">0</span>,rownum) <span class="comment">#</span></div><div class="line">word &lt;- <span class="literal">NULL</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:rownum)&#123;</div><div class="line">	di &lt;- dat[i]</div><div class="line">	di &lt;- strsplit(di,split = <span class="string">' '</span>)[[<span class="number">1</span>]]</div><div class="line">	word &lt;- c(word,di)</div><div class="line">	len[i] &lt;- length(di) <span class="comment">#</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多了有<code>#</code>号标记的这两行</p>
<h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>事先先生成<code>rownum</code>行然后<code>length(levels(factor(word)))</code>列的矩阵，之后往里面塞就行了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f &lt;- factor(word)</div><div class="line">l &lt;- levels(f)</div><div class="line">m &lt;- matrix(<span class="number">0</span>,nrow = rownum,ncol = length(l))</div></pre></td></tr></table></figure></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; m</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></div></pre></td></tr></table></figure>
<p>因为我们现在有了<code>len</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; len</div><div class="line">[<span class="number">1</span>] <span class="number">4</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p><code>4</code>意思是文件第一行的元素个数，<code>3</code>就是第二行的<br>然后我们可以用数组的知识，也就是类似c语言中的两个指针来移动了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">start &lt;- <span class="number">1</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:rownum)&#123; <span class="comment"># 这里我一开始忘了写1:，只是rownum，导致一直bug</span></div><div class="line">	end &lt;- start+len[i] - <span class="number">1</span></div><div class="line">	m[i,]&lt;-table(factor(word[start:end],levels = l))</div><div class="line">	start &lt;- end+<span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; m</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">0</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span></div></pre></td></tr></table></figure>
<p>弄的好看一点<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; colnames(m)&lt;-c(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>)</div><div class="line">&gt; m</div><div class="line">     a b c d</div><div class="line">[<span class="number">1</span>,] <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span></div><div class="line">[<span class="number">2</span>,] <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h2 id="复杂情况"><a href="#复杂情况" class="headerlink" title="复杂情况"></a>复杂情况</h2><p>就是要前面的步骤，要读取多个文件。其实后面步骤都是一样的。只是一个是将多文件的内容放在一个文件的每一行，同样我们需要知道所有的项，也就是levels。多出来的工作也就是我们要读多个文件，然后进行拼接而已。<br>没什么难度，只是代码的优雅程度不一样而已。</p>
<h3 id="R下的文件目录操作"><a href="#R下的文件目录操作" class="headerlink" title="R下的文件目录操作"></a>R下的文件目录操作</h3><ul>
<li><code>dir.create(&#39;newdir&#39;)</code>：创建文件夹</li>
<li><code>unlink(&#39;directory&#39;,recursive=TRUE)</code>:删除文件夹，若有文件一并删除</li>
<li><code>file.create(&#39;newfile&#39;)</code>: 创建一个新文件，若存在则会覆盖原文件</li>
<li><code>cat(&#39;hello world&#39;,file=&#39;newfile&#39;,append=TRUE)</code>: 文件加入一行内容</li>
<li><code>file.append(&#39;file1&#39;,&#39;file2&#39;)</code>: 将<code>file2</code>的内容添加到<code>file1</code>的后面</li>
<li><code>file.copy(&#39;source&#39;,&#39;des&#39;)</code>:拷贝文件<code>source</code>到文件<code>des</code></li>
<li><code>file.show(&#39;filename&#39;)</code>： 显示文件内容</li>
<li><code>file.remove(&#39;filea&#39;,&#39;fileb&#39;)</code>: 删除文件</li>
<li><code>list.files()</code>：显示当前工作目录下的文件列表</li>
</ul>
<p>这里可以借助<code>list.files()</code>来搭桥。知道了目录下的文件列表，我们就可以用循环了</p>
<h3 id="合并数据"><a href="#合并数据" class="headerlink" title="合并数据"></a>合并数据</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">f &lt;- <span class="keyword">function</span>(x)&#123;</div><div class="line">	data &lt;- readLines(x)</div><div class="line">	<span class="keyword">return</span>(strsplit(data,split=<span class="string">' '</span>))</div><div class="line">&#125;</div><div class="line">	</div><div class="line">dir_path &lt;- <span class="string">'/Users/Crayon_277/Develop/Project/R/homework/3'</span></div><div class="line">files &lt;- list.files(dir_path,pattern = <span class="string">'[0-9]+.txt$'</span>,full.names = <span class="literal">T</span>)</div><div class="line">	</div><div class="line">result &lt;- lapply(files,f)</div></pre></td></tr></table></figure>
<p><code>list.files</code>中的<code>full.names</code>参数为<code>false</code>的时候<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; files</div><div class="line">[<span class="number">1</span>] <span class="string">"1.txt"</span>      <span class="string">"2.txt"</span></div></pre></td></tr></table></figure></p>
<p>当为<code>T</code>的时候<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; files</div><div class="line">[<span class="number">1</span>] <span class="string">"/Users/Crayon_277/Develop/Project/R/homework/3/1.txt"</span></div><div class="line">[<span class="number">2</span>] <span class="string">"/Users/Crayon_277/Develop/Project/R/homework/3/2.txt"</span></div></pre></td></tr></table></figure></p>
<p>区别就一目了然了</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; result</div><div class="line">[[<span class="number">1</span>]]</div><div class="line">[[<span class="number">1</span>]][[<span class="number">1</span>]]</div><div class="line">[<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"c"</span></div><div class="line"></div><div class="line"></div><div class="line">[[<span class="number">2</span>]]</div><div class="line">[[<span class="number">2</span>]][[<span class="number">1</span>]]</div><div class="line">[<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"d"</span></div></pre></td></tr></table></figure>
<p>然后可以在用<code>for</code>语句拼接，或者一开始直接用<code>for</code>遍历</p>
<blockquote>
<p>lapply returns a list of the same length as X, each element of which is the result of applying FUN to the corresponding element of X.<br>lapply就类似python中的map</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要求：&lt;br&gt;假设&lt;code&gt;文件1&lt;/code&gt;中有内容&lt;code&gt;a b c c&lt;/code&gt;,&lt;code&gt;文件2&lt;/code&gt;中有&lt;code&gt;a b d&lt;/code&gt;&lt;br&gt;现在要统计成如下的样子：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;d&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用到R中的table函数&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/categories/R/"/>
    
    
      <category term="R-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/R-piece/"/>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/tags/R/"/>
    
      <category term="text-mining" scheme="http://www.mmmmmcclxxvii.cn/tags/text-mining/"/>
    
  </entry>
  
  <entry>
    <title>用R画出下面这样子的形式的图</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/07/r-lines/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/07/r-lines/</id>
    <published>2017-04-07T05:35:06.000Z</published>
    <updated>2017-04-07T07:08:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>用到什么学什么</p>
<h1 id="plot的使用"><a href="#plot的使用" class="headerlink" title="plot的使用"></a>plot的使用</h1><p>官方的description</p>
<blockquote>
<p>Generic function for plotting of R objects. For more details about the graphical parameter arguments, see par.</p>
<p>For simple scatter plots, plot.default will be used. However, there are plot methods for many R objects, including functions, data.frames, density objects, etc. Use methods(plot) and the documentation for these.</p>
<p>plot(x, y, …)</p>
</blockquote>
<p>这里先用到plot的一个type参数</p>
<blockquote>
<p>what type of plot should be drawn. Possible types are</p>
<p>“p” for points,</p>
<p>“l” for lines,</p>
<p>“b” for both,</p>
<p>“c” for the lines part alone of “b”,</p>
<p>“o” for both ‘overplotted’,</p>
<p>“h” for ‘histogram’ like (or ‘high-density’) vertical lines,</p>
<p>“s” for stair steps,</p>
<p>“S” for other steps, see ‘Details’ below,</p>
<p>“n” for no plotting.</p>
</blockquote>
<p>这里有个<code>&quot;n&quot;</code>的参数值可以选择，也就是什么都不会打印，先看个例子<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x &lt;- seq(-pi,pi,length = <span class="number">100</span>)</div><div class="line">plot(x,sin(x),type=<span class="string">'p'</span>)</div><div class="line">plot(x,sin(x),type=<span class="string">'l'</span>)</div><div class="line">plot(x,sin(x),type=<span class="string">'n'</span>)</div></pre></td></tr></table></figure></p>
<p>分别是这样色儿的<br><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-sin.png" alt="points"><br><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-sin-line.png" alt="line"><br><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-sine-none.png" alt="none"><br>看最后一个，也就是什么都没画。什么都没有有什么用！？<br><strong>存在即合理</strong>，它可以用来弄一个画布，然后再在上面画其他图形</p>
<p>比如：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>))</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-canvas-with-something.png" alt="with points"></p>
<p>这里<code>plot</code>的<code>x</code>,<code>y</code>参数是用向量指定的，<code>x</code>坐标的放一起，<code>y</code>坐标的放一起，其实坐标点是<code>(0,0)</code>,和<code>(10,10)</code>，在这两个坐标上，默认是画了两个小圆圈。但是如果我想要一个有坐标系的这样的一个画布，我就可以</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-canvas-blank.png" alt="no points canvas"></p>
<p>而这里<code>x</code>,<code>y</code>的作用就是撑开画布坐标系的大小，我如果<code>plot(c(0,50),c(0,50),type=&#39;n&#39;)</code>，那坐标系就变大了。</p>
<h1 id="lines"><a href="#lines" class="headerlink" title="lines"></a>lines</h1><blockquote>
<p>A generic function taking coordinates given in various ways and joining the corresponding points with line segments.<br>lines(x, …)</p>
<h2 id="Default-S3-method"><a href="#Default-S3-method" class="headerlink" title="Default S3 method:"></a>Default S3 method:</h2><p>lines(x, y = NULL, type = “l”, …)</p>
</blockquote>
<p>就是根据像<code>plot</code>那样<code>x</code>,<code>y</code>解释的意思，将两点连起来，<del>同时用<code>type</code>指定的样式画出这点线</del><br>这个说法有点不正确，好像是说<code>type</code>指定的是线的样式，比如实线，虚线，不是的。<code>lty</code>这个参数才是指定“线样式的”</p>
<p>我这里看到了<code>lines(x,...)</code>说明可以不用指定<code>y</code>，那画出来是什么？？<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">&gt; lines(c(<span class="number">0</span>,<span class="number">1</span>))</div><div class="line">&gt; lines(c(<span class="number">5</span>,<span class="number">9</span>))</div><div class="line">&gt; lines(c(<span class="number">2</span>,<span class="number">4</span>))</div><div class="line">&gt; lines(c(<span class="number">10</span>,<span class="number">1</span>))</div><div class="line">&gt; lines(c(<span class="number">4</span>,<span class="number">7</span>))</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-line%28x%29.png" alt="line(x)"><br>可以看出来给出的<code>c(a,b)</code>，a,b都是表示纵坐标，默认好像横坐标是1到2，那这样就是画<code>(1,a)</code>到<code>(2,b)</code>的线？<br>至少实验出来是这样的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; lines(c(<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>))</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-line%28x%29-456.png" alt="line(x)456"><br>三个向量元素，那上面的猜测是对的，现在是画<code>(1,a)</code>,<code>(2,b)</code>,<code>(3,c)</code>的线段，估计向量元素增多，就是横坐标到4，5，6了吧</p>
<h2 id="lines-的type"><a href="#lines-的type" class="headerlink" title="lines 的type"></a>lines 的type</h2><blockquote>
<p>lines(x, y, type = “l”, …)<br>type<br>character indicating the type of plotting; actually any of the types as in plot.default.</p>
</blockquote>
<p>说是根据<code>plot</code>的<code>type</code>来，一开始我觉得这不跟<code>lty</code>参数重复了么，其实两个是不一样的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">&gt; lines(c(<span class="number">2</span>,<span class="number">4</span>),c(<span class="number">3</span>,<span class="number">8</span>),type = <span class="string">"s"</span>)</div><div class="line">&gt; lines(c(<span class="number">6</span>,<span class="number">7</span>),c(<span class="number">3</span>,<span class="number">8</span>),type = <span class="string">"s"</span>,lty=<span class="number">2</span>)</div><div class="line">&gt; lines(c(<span class="number">6</span>,<span class="number">7</span>),c(<span class="number">3</span>,<span class="number">8</span>),type = <span class="string">"l"</span>,lty=<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-type-lty.png" alt="type-lty"><br>当<code>type=&quot;s&quot;</code>是，画的是折线！！！，<code>s</code>解释为step，相当于画的是曼哈顿路径。<br><code>lty</code>才是线是什么样子的形式的。而<code>type</code>应该是画的什么什么形状吧，不知道怎么描述</p>
<h3 id="lty的实验"><a href="#lty的实验" class="headerlink" title="lty的实验"></a>lty的实验</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">1</span>,<span class="number">6</span>),c(<span class="number">1</span>,<span class="number">1</span>),type=<span class="string">'l'</span>,lty=<span class="number">1</span>,ylim=c(<span class="number">0</span>,<span class="number">8</span>))</div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">2</span>:<span class="number">6</span>)&#123;</div><div class="line">  lines(c(<span class="number">1</span>,<span class="number">6</span>),c(i,i),type = <span class="string">'l'</span>,lty=i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-lty.png" alt="lty"></p>
<h1 id="text"><a href="#text" class="headerlink" title="text"></a>text</h1><p>在画布上写文本吧<br>直接看实验<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">&gt; text(c(<span class="number">5</span>,<span class="number">1</span>),c(<span class="number">3</span>,<span class="number">3</span>),<span class="number">1</span>)</div><div class="line">&gt; text(c(<span class="number">5</span>,<span class="number">8</span>),c(<span class="number">2</span>,<span class="number">3</span>),c(<span class="string">"A"</span>,<span class="string">"B"</span>))</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-text.png" alt="text"></p>
<h1 id="points"><a href="#points" class="headerlink" title="points"></a>points</h1><p>画点。主要是<code>pch</code>,<code>cex</code>这两个参数有点意思</p>
<blockquote>
<p>pch<br>plotting ‘character’, i.e., symbol to use. This can either be a single character or an integer code for one of a set of graphics symbols. The full set of S symbols is available with pch = 0:18, see the examples below. (NB: R uses circles instead of the octagons used in S.)</p>
<p>Value pch = “.” (equivalently pch = 46) is handled specially. It is a rectangle of side 0.01 inch (scaled by cex). In addition, if cex = 1 (the default), each side is at least one pixel (1/72 inch on the pdf, postscript and xfig devices).</p>
<p>For other text symbols, cex = 1 corresponds to the default fontsize of the device, often specified by an argument pointsize. For pch in 0:25 the default size is about 75% of the character height (see par(“cin”)).</p>
<p>cex<br>character (or symbol) expansion: a numerical vector. This works as a multiple of par(“cex”).</p>
</blockquote>
<p>目前我的理解就是pch就是点的样式，cex就是指定大小</p>
<h2 id="pch-实验"><a href="#pch-实验" class="headerlink" title="pch 实验"></a>pch 实验</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">line.draw = <span class="number">9</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">25</span>)&#123;</div><div class="line">	<span class="keyword">if</span>((i-<span class="number">1</span>) %% <span class="number">5</span>==<span class="number">0</span>)&#123;</div><div class="line">		line.draw = line.draw - <span class="number">1</span></div><div class="line">	&#125;</div><div class="line">	points((i-<span class="number">1</span>)%%<span class="number">5</span>,line.draw,pch=i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-points-pch.png" alt="pch"></p>
<h1 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h1><p>画这样的一个三角形。思路就是用<code>points</code>画大一点的圆圈，<code>text</code>来写<code>A</code>这中标签，然后<code>lines</code>来画线，没什么难度<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type = <span class="string">'n'</span>)</div><div class="line">lines(c(<span class="number">3</span>,<span class="number">5</span>),c(<span class="number">4</span>,<span class="number">9</span>),type = <span class="string">'l'</span>,lty=<span class="number">1</span>)</div><div class="line">lines(c(<span class="number">5</span>,<span class="number">7</span>),c(<span class="number">9</span>,<span class="number">4</span>),type = <span class="string">'l'</span>,lty=<span class="number">1</span>)</div><div class="line">lines(c(<span class="number">3</span>,<span class="number">7</span>),c(<span class="number">4</span>,<span class="number">4</span>),type = <span class="string">'l'</span>,lty=<span class="number">1</span>,xlim=c(<span class="number">2.5</span>,<span class="number">6.7</span>))</div><div class="line">points(<span class="number">5</span>,<span class="number">9</span>,pch=<span class="number">1</span>,cex = <span class="number">5</span>)</div><div class="line">text(<span class="number">5</span>,<span class="number">9</span>,<span class="string">'A'</span>)</div><div class="line">points(<span class="number">3</span>,<span class="number">4</span>,pch=<span class="number">1</span>,cex = <span class="number">5</span>)</div><div class="line">text(<span class="number">3</span>,<span class="number">4</span>,<span class="string">'B'</span>)</div><div class="line">points(<span class="number">7</span>,<span class="number">4</span>,pch=<span class="number">1</span>,cex = <span class="number">5</span>)</div><div class="line">text(<span class="number">7</span>,<span class="number">4</span>,<span class="string">'C'</span>)</div></pre></td></tr></table></figure></p>
<p>不过我这样，太啰嗦了啊</p>
<p>R中的最常用的对象就是向量，很多运算都支持向量操作。可以用向量<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type = <span class="string">'n'</span>)</div><div class="line">x &lt;- c(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</div><div class="line">y &lt;- c(<span class="number">4</span>,<span class="number">9</span>,<span class="number">4</span>)</div><div class="line">points(x,y,cex=<span class="number">5</span>)</div><div class="line">text(x,y,c(<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>))</div><div class="line">lines(x,y,type=<span class="string">'l'</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-plot-triangle-vector.png" alt="triangle-vector"></p>
<p><code>lines(x,y)</code> , 这个<code>x</code>，<code>y</code>的坐标，相当于这里，两个坐标的<code>x</code>都提取出来到<code>x</code>，两个坐标的<code>y</code>都提取出来到<code>y</code>，相当于起始点终点的<code>x</code>坐标放一起，起始点终点的<code>y</code>坐标放一起.感觉python中的<code>map(None,x,y)</code> 后就是<code>[(3,4),(5,9),(7,4)]</code> 其实就是各点的坐标</p>
<p>但是是不闭合的，为什么，其实两个组合确定一条线，可能<code>lines</code>中的向量，<code>x</code>先是<code>(3,5)</code>,在是<code>(5,7)</code>,<code>y</code>对应，但后面没有回去<code>(7，3)</code>。要手动添加<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lints(c(x,<span class="number">3</span>),c(y,<span class="number">4</span>),type=<span class="string">'l'</span>)</div></pre></td></tr></table></figure></p>
<p>这样就和开篇的fancybox的图片里面一样了。</p>
]]></content>
    
    <summary type="html">
    
      主要是plot, lines, text , points 四个函数的使用
    
    </summary>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/categories/R/"/>
    
    
      <category term="R-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/R-piece/"/>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/tags/R/"/>
    
      <category term="plot" scheme="http://www.mmmmmcclxxvii.cn/tags/plot/"/>
    
  </entry>
  
  <entry>
    <title>自我约束-开会</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/06/self-discipline-meeting/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/06/self-discipline-meeting/</id>
    <published>2017-04-06T14:54:22.000Z</published>
    <updated>2017-04-06T15:01:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果不能做到以下，那么你就把你的屁股老老实实的坐到那该死的团会上，体验如坐针毡的感觉。</p>
<p>自己真的做的惜时如金的时候，真的做到压榨每一分每一秒的时候，真的做到push self的时候，当感觉到跑在计划前面的时候。</p>
<p><strong>不能不趁三十之前，立志猛进也</strong></p>
<p>野蛮生长</p>
]]></content>
    
    <summary type="html">
    
      所谓自我约束是指在向某些困难发起挑战时，故意给自己戴上一个枷锁，把自己逼到穷途末路， 制定只属于自己的规矩，正因为有了那个枷锁，你才会认真面对挑战，而一旦失败，你就能通过实践那个规矩，让自己得到严格的锻炼，使得自己不断进步，这才叫自我约束。
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
      <category term="namaste" scheme="http://www.mmmmmcclxxvii.cn/tags/namaste/"/>
    
  </entry>
  
  <entry>
    <title>Intro to hadoop and MapReduce -- hdfs &amp; mapreduce (二)</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/06/hdfs-mapreduce/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/06/hdfs-mapreduce/</id>
    <published>2017-04-06T08:34:28.000Z</published>
    <updated>2017-04-06T13:29:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quiz：-Is-there-a-problem"><a href="#Quiz：-Is-there-a-problem" class="headerlink" title="Quiz： Is there a problem"></a>Quiz： Is there a problem</h2><ul>
<li>[x] network failure</li>
<li>[x] disk failure on datanode</li>
<li>[] <del>not all datanode used</del> (Why do you think that all nodes have to be used. What if you have hundreds of Data Nodes?)</li>
<li>[] <del>block sizes differ</del> (If block sizes would have to be the same, what would happen if the file could not be divided in same size blocks?)</li>
<li>[x] disk failure on namenode</li>
</ul>
<p>what if namenode had hardware problem</p>
<h2 id="Quiz-any-problems-now"><a href="#Quiz-any-problems-now" class="headerlink" title="Quiz: any problems now"></a>Quiz: any problems now</h2><ul>
<li>[x] data inaccessible  (when network failure)</li>
<li>[x] data lost forever  (when disk failure)</li>
<li>[] no problem</li>
</ul>
<p>so, depends.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quiz：-Is-there-a-problem&quot;&gt;&lt;a href=&quot;#Quiz：-Is-there-a-problem&quot; class=&quot;headerlink&quot; title=&quot;Quiz： Is there a problem&quot;&gt;&lt;/a&gt;Quiz： Is there
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.mmmmmcclxxvii.cn/tags/mapreduce/"/>
    
      <category term="udacity" scheme="http://www.mmmmmcclxxvii.cn/tags/udacity/"/>
    
  </entry>
  
  <entry>
    <title>Intro to hadoop and MapReduce -- Big Data(一)</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/04/big-data/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/04/big-data/</id>
    <published>2017-04-04T12:26:09.000Z</published>
    <updated>2017-04-06T13:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Definition-of-Big-Data"><a href="#Definition-of-Big-Data" class="headerlink" title="Definition of Big Data"></a>Definition of Big Data</h1><p>可能有些人认为几个<code>terebytes</code>的数据量是大数据，但这个量不是标准的，所以一个合理的定义是</p>
<blockquote>
<p>It’s data that’s too big to be processed on a single machine.</p>
</blockquote>
<h2 id="Quiz-Chanllenges-with-Big-Data"><a href="#Quiz-Chanllenges-with-Big-Data" class="headerlink" title="Quiz: Chanllenges with Big Data"></a>Quiz: Chanllenges with Big Data</h2><p><del>- most data is worthless</del></p>
<ul>
<li>data is created fast</li>
<li>data from different sources in various formats</li>
</ul>
<p>most data is not worthless, but actually does have a lot of value.</p>
<h1 id="The-3-V’s-of-big-data"><a href="#The-3-V’s-of-big-data" class="headerlink" title="The 3 V’s of big data"></a>The 3 V’s of big data</h1><h2 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h2><p>总结：量大。需要考虑那些能提供有用信息</p>
<blockquote>
<p>But in order to store it, you’ll need a way to scale your storage capacity up to massive volume. Hadoop, which stores data in a distributed way across multiple machines, does that</p>
</blockquote>
<h2 id="Variety"><a href="#Variety" class="headerlink" title="Variety"></a>Variety</h2><p>就是说我们如果用像MySQL,Oracle这种数据库，数据必须要适合他们的格式，但是现在我们处理的数据很大部分都是<code>unstructured</code>或者是<code>semi-structured</code>.<br>比方说现在打客服热线不都有一个提示说是会录音，一种存储是语音识别成文字保存起来，另一种是直接存储成mp3格式然后让相应的软件解码如果后面要用的话。那hadoop不管你的数据是什么样的格式，</p>
<blockquote>
<p>you can just store the data in its raw format, and manipulate and reformat it later.</p>
</blockquote>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><blockquote>
<p>Sometimes the most unlikely data can be extremely useful and lead to savings due to better planning. </p>
</blockquote>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-04%20at%209.39.47%20PM.png" alt="optimize choice"></p>
<p>比方说现在要通知附近的货车到中心取货，基于位置的系统就会通知最近的车辆过来。但往往，这个最近，不是最佳的选择。也许那里有交通堵塞，也许最近的车辆过来需要过羊肠小道，那里的路比较难走，也许是要绕一大圈才能到中心。更需要考虑的是，这辆车上也许没有足够的空间了，这辆车没有油了。所以以下都是需要考虑的</p>
<ul>
<li>Current GPS location fromi all trucks</li>
<li>Current itineraries for all trucks</li>
<li>Current traffic speed in related areas as reported by services such as waze</li>
<li>Current load of trucks by volume and weight</li>
<li>Fuel efficiency of the different vehicles</li>
</ul>
<blockquote>
<p>The world we live in is extremely complex, and there are a lot of variables to consider that you can tweak to get large benefits.</p>
<h2 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h2><p>实时更新？？<br>If we can’t store it as it arrives, we’ll end up discarding some of it, and that’s what we absolutely want to avoid.</p>
</blockquote>
<h1 id="history-of-hadoop"><a href="#history-of-hadoop" class="headerlink" title="history of hadoop"></a>history of hadoop</h1><p>来自hadoop 之父 Doug Cutting</p>
<blockquote>
<p>So, let me tell you how Hadoop came to be. About ten years ago in around 2003, I was working on an Open Source web search engine called Nutch, and we knew it needed to be something very scalable, because the Web was you know, billions of pages. terabytes, petabytes, of data, that we needed to be able to process, and we set about doing the best job we could and it was tough. We got things up and running on four or five machines, not very well, and around that time Google published some papers about how they were doing things internally. Published a paper about their distributed file system, TFS. and about their processing, framework, MapReduce. So my partner and I, at the time, in this project, Mike Cafarella. said about trying to reimplement these in Open Source. So that more people could use them than just folks at Google. Took us a couple of years, and we had Nutch up and running on, instead of four or five machines, on, 20 to 40 machines. It wasn’t perfect, it wasn’t totally reliable, but it worked. And we realize that to get it to the point where it was scaled to thousands of machines, and be as bullet proof as it needed to be, would take more than just the two of us, working part time.</p>
<p>Around that time, Yahoo approached me and said they were interested in investing in this. So I went to work for Yahoo in January of 2006. First thing I did there, was, we took the parts of Nutch that were a distributed computing platform, and put them into a separate project. A new project christened Hadoop. Over the next couple years, with, Yahoo’s help, and the help of others, we took Hadoop, and really got it to the point where it did scale to petabytes, and running on thousands of processors. And doing so quite reliably. </p>
<p>It spread to lots of companies, and mostly in the Internet sector, and became quite a success. after that, we, we started to see a bunch of other projects grow up around it. And Hadoop’s grown to be the kernel of a, which, pretty much an operating system for big data. We’ve got tools that, allow you to, more easily do, MapReduce programming, so, you can develop using SQL or a data flow language called Pig. And we’ve also got the beginnings of higher­level tools. We’ve got interactive SQL with Impala. We’ve got Search. and so we’re really seeing this develop to being a general purpose platform for data processing. that scale’s much better and that it is much more flexible than anything that’s, that’s, else is out there.</p>
</blockquote>
<h1 id="hadoop-cluster"><a href="#hadoop-cluster" class="headerlink" title="hadoop cluster"></a>hadoop cluster</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-04%20at%2010.04.35%20PM.png" alt="cluster"><br>hadoop存储数据的方法是一个分布式的文件系统叫做<code>HDFS</code>。处理数据是通过<code>MapReduce</code>。<br>核心思想就是将数据分块，然后在集群中存储，也就是各个计算机搭建的一个网络吧。那这样的好处就是我们不用从中心取数据然后再操作，我们直接在集群中就地处理数据，后续还可以继续扩大集群的规模</p>
<h1 id="hadoop-Ecosystem"><a href="#hadoop-Ecosystem" class="headerlink" title="hadoop Ecosystem"></a>hadoop Ecosystem</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-04%20at%2010.31.42%20PM.png" alt="ecosystem"></p>
<blockquote>
<p>Core hadoop consists of HDFS and MapReduce<br>hadoop的生态系统。以hadoop为核心的，打造的周边产品，主要的目的就是降低使用hadoop的难度和门槛。<br>比如编写<code>MapReduce</code>的程序不是一件容易的事，有些没有编程经验的就可以用<code>Pig</code>，<code>Hive</code>，这种类似SQL语句来操作数据，但这两个都是将语句翻译为<code>MapReduce</code>然后再到集群上执行。<br>因为<code>Hive</code>和<code>Pig</code>它们本质上还是<code>MapReduce</code>的工作量，所以花费的时间可能更多。所以另一个开源项目<code>Impala</code>，它是允许直接用<code>SQL</code>语句来操作数据，不用经过<code>MapReduce</code>（具体现在我也不懂），所以这样就很快了<br>其他的也就类似了。</p>
</blockquote>
<p>Cloudera hadoop版的其实就是把这些都给你打包好了，你不用在一个一个去弄了。</p>
<p>核心还是hadoop的<code>HDFS</code>和<code>MapReduce</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Definition-of-Big-Data&quot;&gt;&lt;a href=&quot;#Definition-of-Big-Data&quot; class=&quot;headerlink&quot; title=&quot;Definition of Big Data&quot;&gt;&lt;/a&gt;Definition of Big Da
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.mmmmmcclxxvii.cn/tags/mapreduce/"/>
    
      <category term="udacity" scheme="http://www.mmmmmcclxxvii.cn/tags/udacity/"/>
    
  </entry>
  
  <entry>
    <title>seven-principle</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/04/seven-principle/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/04/seven-principle/</id>
    <published>2017-04-04T05:58:52.000Z</published>
    <updated>2017-04-06T07:41:12.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><strong>自带鸡血</strong>，能源源不断地给自己充电，遇到打击能迅速恢复，哪怕这种打击沉重而有力，也就是，抗压能力强。<br><img src="http://onexs3cnv.bkt.clouddn.com/balalal" alt="balala"></li>
<li><strong>不能给自己设限</strong>，既没有上限，也没有下限，凡事能想到的事，都敢做，给联合国秘书长写信也没啥不敢的</li>
<li><strong>格局大，顺势而为</strong>.胸怀达到全宇宙，又能找到把猪吹上天的风口，从来站在更大的地位上思考问题，绝不想同事蹭吃了一盒酸奶之类的小时；</li>
<li>对自己高标准，<strong>永不满足</strong>，一旦自己陷入舒适圈，马上调整自己，给自己提更高的要求，让自己不舒适，让自己不高心，让自己不痛快，给自己找别扭，上升到更高的level</li>
<li><strong>做不可替代的角色</strong></li>
<li><strong>极度自律，执行力超强（强调）</strong>。别跟我说自律，其实就是一个人呆着的时候，不放纵自己，做应当做的是，不玩游戏，不看电视剧，<strong>不在低附加值的事情上浪费时间</strong>。同时，你不能想着，我要有时间就好了，然后每天还能睡到中午12点，然后慵懒的发发朋友圈，谈谈诗和远方。</li>
<li>具备<strong>逆向思维</strong>，善于创新，说白了，就不跟大家一样思考，常人怎么想，总是反着想，具备创新精神。剑走偏锋</li>
</ol>
]]></content>
    
    <summary type="html">
    
      七条
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
      <category term="principle" scheme="http://www.mmmmmcclxxvii.cn/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>自我约束-你好</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/30/self-discipline/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/30/self-discipline/</id>
    <published>2017-03-30T08:02:29.000Z</published>
    <updated>2017-04-06T13:30:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>坐公交好几次都碰见她，一位穿着比较啰哩啰嗦的，时尚的。我想认识她</p>
<p>今天，我在看nba勇士队的比赛，她突然过来，没有一丝丝准备，都不知道我发型有没有乱的，问我能不能帮她刷下公交卡，她转支付宝给我，我下意识的说不用，现在老后悔了。</p>
<p>不过，从我过往的经验看，大多是我自己自作多情，人家也只是想寻求帮助，不要想太多了，今天不是你也是其他人。</p>
<p>但还是挺开心的，借此聊了一会，得知是大三外语系的。哈哈哈</p>
<p>这次的自我约束：<br>如果你能静下心来，不要胡思乱想。进入自己的zone, 认认真真做自己的事情，专注！！<br>看缘分，如果能做到专注，那么下次遇见的时候就厚着脸皮要个联系方式吧，不然就永远当个路人</p>
]]></content>
    
    <summary type="html">
    
      所谓自我约束是指在向某些困难发起挑战时，故意给自己戴上一个枷锁，把自己逼到穷途末路， 制定只属于自己的规矩，正因为有了那个枷锁，你才会认真面对挑战，而一旦失败，你就能通过实践那个规矩，让自己得到严格的锻炼，使得自己不断进步，这才叫自我约束。
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
      <category term="namaste" scheme="http://www.mmmmmcclxxvii.cn/tags/namaste/"/>
    
  </entry>
  
  <entry>
    <title>python name and values</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/29/python-name-and-values/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/29/python-name-and-values/</id>
    <published>2017-03-29T13:54:00.000Z</published>
    <updated>2017-03-29T14:50:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>阅读 <a href="https://nedbatchelder.com/text/names.html" target="_blank" rel="external">Facts and myths about Python names and values</a> 做的摘记<br>内容不是很深，只是这里面提到了一些需要注意的点。最主要还是<code>name</code>和<code>value</code>的区别<br><a id="more"></a></p>
<h1 id="Fact-Names-have-no-type-values-have-no-scope"><a href="#Fact-Names-have-no-type-values-have-no-scope" class="headerlink" title="Fact: Names have no type, values have no scope."></a>Fact: Names have no type, values have no scope.</h1><blockquote>
<p>Just as names have no type, values have no scope. When we say that a function has a local variable, we mean that the name is scoped to the function: you can’t use the name outside the function, and when the function returns, the name is destroyed. But as we’ve seen, if the name’s value has other references, it will live on beyond the function call. It is a local name, not a local value.</p>
</blockquote>
<p>翻译：</p>
<p>就跟名字没有类型一样，数值是没有作用范围的。当我们说一个函数有局部变量的时候，我们只是说的是名字只在函数作用域中起作用而已，你不能在函数外使用这个名字，当函数返回的时候，这个名字也就摧毁了。但是，如果这个名字指向的数值还有其他引用，它就会继续生存下去，不管这个函数了。局部变量，而不是局部数值。</p>
<h1 id="Fact-Values-can’t-be-deleted-only-names-can"><a href="#Fact-Values-can’t-be-deleted-only-names-can" class="headerlink" title="Fact: Values can’t be deleted, only names can."></a>Fact: Values can’t be deleted, only names can.</h1><blockquote>
<p>Python’s memory management is so central to its behavior, not only do you not have to delete values, but there is no way to delete values. You may have seen the del statement:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="keyword">del</span> nums</div></pre></td></tr></table></figure>
<blockquote>
<p>This does not delete the value nums, it deletes the name nums. The name is removed from its scope, and then the usual reference counting kicks in: if nums’ value had only that one reference, then the value will be reclaimed. But if it had other references, then it will not.</p>
</blockquote>
<h1 id="Fact-Assignment-never-copies-data"><a href="#Fact-Assignment-never-copies-data" class="headerlink" title="Fact: Assignment never copies data."></a>Fact: Assignment never copies data.</h1><blockquote>
<p>Mutable means that the value has methods that can change the value in-place. Immutable means that the value can never change, instead when you think you are changing the value, you are really making new values from old ones.</p>
</blockquote>
<p>比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">3</span></div><div class="line">y = x</div></pre></td></tr></table></figure></p>
<p><code>x</code>和<code>y</code>只是一起指向了<code>3</code>而已，并没有给<code>y</code>再来一个<code>3</code>。这里<code>x</code>,<code>y</code>是<code>name</code>，<code>3</code>是<code>value</code><br>上面说到的<code>Mutable</code>是什么意思，也就是因为这个赋值不拷贝数据的特性，当<code>y</code>变了的时候，比如<code>y+=1</code>，那<code>x</code>还变不变？这里就要考虑到可变类型和不可变类型了</p>
<p>Immutable values:</p>
<ol>
<li>numbers</li>
<li>strings</li>
<li>tuples </li>
</ol>
<p>Mutable values:</p>
<ol>
<li>lists</li>
<li>dicts</li>
<li>user-defined objects</li>
</ol>
<p>那在上面<code>y+=1</code>之后，其实是给<code>y</code>重新<code>reference</code>到了4</p>
<p>关于mutable的直接截图：</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/list_mutate_value.png" alt="list_mutate"></p>
<hr>
<h1 id="Fact-Python-passes-function-arguments-by-assigning-to-them"><a href="#Fact-Python-passes-function-arguments-by-assigning-to-them" class="headerlink" title="Fact: Python passes function arguments by assigning to them."></a>Fact: Python passes function arguments by assigning to them.</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def my_func(x,y)</div><div class="line">	return x+y</div><div class="line">print(my_func(8,9))</div></pre></td></tr></table></figure>
<blockquote>
<p>The names x and y are local to the function, so when the function returns, those names go away. But if the values they refer to are still referenced by other names, the values live on.</p>
</blockquote>
<p><strong>注意</strong>，这里就出现<code>name</code>和<code>value</code>的区别了，可以这样理解，<code>value</code>就是一个实物，<code>name</code>只是这个实物的标签，我可以贴很多标签，而看到这个标签，我就联想到这个实物，实物可以有多个标签，一个标签只能对应一个实物。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">augment_twice</span><span class="params">(a_list,val)</span>:</span></div><div class="line">	a_list.append(val)</div><div class="line">	a_list.append(val)</div><div class="line"></div><div class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">augment_twice(nums, <span class="number">4</span>)</div><div class="line">print(nums) <span class="comment">#[1,2,3,4,4]</span></div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-03-29%20at%2010.23.49%20PM.png" alt="before"></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-03-29%20at%2010.23.55%20PM.png" alt="after"></h2><p>虚线框表示本地<code>name</code>在一个新的<code>frame</code>里面，而参数传递只是一种赋值操作，<code>a_list</code> “指向” <code>nums</code>指向的<code>value</code>,而<code>list</code>类型是可变数据类型，所以任何<code>name</code>对它的改变都是就地的，可以通过<code>id()</code>操作来查看是否改变了地址</p>
<p>另外一个程序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">augment_twice_bad</span><span class="params">(a_list,val)</span>:</span></div><div class="line">	a_list = a_list + [val,val]</div><div class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">augment_twice_bad(nums,<span class="number">4</span>)</div><div class="line">print(nums) <span class="comment">#[1,2,3]</span></div></pre></td></tr></table></figure>
<p>这个跟上面的程序就不同在函数里面一个是用<code>.append()</code>来增加元素，一个则用加法然后赋值，赋值，赋值，重要的事情说三遍，这是个赋值操作，一旦出现赋值，就相当于等式左边的<code>name</code><strong>rebind</strong>出现在等式右边的<code>value</code></p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-03-29%20at%2010.35.39%20PM.png" alt="bad_before"></h2><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-03-29%20at%2010.35.45%20PM.png" alt="bad_after"></p>
<blockquote>
<p>It’s really important to keep in mind the difference between mutating a value in place, and rebinding a name. augment_twice worked because it mutated the value passed in, so that mutation was available after the function returned. augment_twice_bad used an assignment to rebind a local name, so the changes weren’t visible outside the function.</p>
</blockquote>
<h1 id="其他的-facts-myths都知道了，上面的需要注意一下就可以了。过"><a href="#其他的-facts-myths都知道了，上面的需要注意一下就可以了。过" class="headerlink" title="其他的 facts, myths都知道了，上面的需要注意一下就可以了。过"></a>其他的 facts, myths都知道了，上面的需要注意一下就可以了。过</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读 &lt;a href=&quot;https://nedbatchelder.com/text/names.html&quot;&gt;Facts and myths about Python names and values&lt;/a&gt; 做的摘记&lt;br&gt;内容不是很深，只是这里面提到了一些需要注意的点。最主要还是&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;value&lt;/code&gt;的区别&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>用R来找最大连通子图</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/25/r-maximal-connected-subgraph/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/25/r-maximal-connected-subgraph/</id>
    <published>2017-03-25T00:35:37.000Z</published>
    <updated>2017-05-15T10:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>求上图的最大连通子图，其实就是图的遍历，图的遍历有深度优先和广度优先<br>图有很多种对应的存储结构，在R里面最简单的就是邻接矩阵了。</p>
<p>-update-</p>
<ul>
<li>用深度优先搜索做</li>
<li>在深度优先里面涉及到的R中的全局，局部变量<a id="more"></a>
</li>
</ul>
<h1 id="构造邻接矩阵"><a href="#构造邻接矩阵" class="headerlink" title="构造邻接矩阵"></a>构造邻接矩阵</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">m &lt;- matrix(<span class="number">0</span>,<span class="number">5</span>,<span class="number">5</span>)</div><div class="line">m[<span class="number">1</span>,<span class="number">2</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">1</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">2</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">4</span>,<span class="number">5</span>] &lt;- <span class="number">1</span></div><div class="line"></div><div class="line">m &lt;- m + t(m)</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; m</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">0</span>    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span></div><div class="line">[<span class="number">3</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></div><div class="line">[<span class="number">4</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span></div><div class="line">[<span class="number">5</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span></div></pre></td></tr></table></figure>
<p>主要也就是<code>m&lt;-m+t(m)</code>这一步，因为是无向图，是对称矩阵，可以先构造一半然后与转置相加。<strong>这是对称矩阵的性质的应用！！</strong></p>
<blockquote>
<p>在线性代数中，实对称矩阵是一个方形矩阵，其元素都为实数，且转置矩阵和自身相等<br><a href="https://zh.wikipedia.org/wiki/%E5%AE%9E%E5%AF%B9%E7%A7%B0%E7%9F%A9%E9%98%B5" target="_blank" rel="external">实对称矩阵</a></p>
</blockquote>
<h1 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h1><p>主要思想就是它分两个部分，一个部分保存已经访问过的，一个部分是未访问的，未访问部分是用一个队列来存储，每次从队头出一个元素i，然后将这个元素的能够够到的节点依次加到队尾去。这一步其实就是邻接表中的第i行中为1的元素加进来</p>
<p>先考虑简单的情况，从第1个节点出发，寻找包含1的最大联通子图，其实就是1能够直接或间接够到的所有节点，在图中我们可以直观的看到是1，2，3，三个节点。</p>
<h2 id="错误的代码"><a href="#错误的代码" class="headerlink" title="错误的代码"></a>错误的代码</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">visited &lt;- c(<span class="number">1</span>)</div><div class="line">unvisited &lt;- m[<span class="number">1</span>,]</div><div class="line"></div><div class="line"><span class="keyword">while</span>(length(unvisited)&gt;<span class="number">0</span>)&#123;</div><div class="line">	now &lt;- unvisited[<span class="number">1</span>]</div><div class="line">	unvisited &lt;- unvisited[-<span class="number">1</span>]</div><div class="line">	candidate &lt;- m[now,]</div><div class="line">	candidate &lt;- setdiff(candidate,visited)</div><div class="line">	unvisited &lt;- union(candidate,unvisited)</div><div class="line">	visited &lt;- c(visited,now)</div><div class="line">&#125;</div><div class="line"></div><div class="line">print(visited)</div></pre></td></tr></table></figure>
<p>这里我犯了一个错误，<code>unvisited &lt;- m[1,]</code>,这是<code>unvisited</code>里面保存的是什么？？<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; unvisited</div><div class="line">[<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>那我想要的是什么？应该是<code>visisted</code>中一开始是<code>1</code>,<code>unvisisted</code>中将<code>1</code>的邻接节点加进来是<code>2,3</code>,然后后面每次循环体内做的是队头元素出队列。但是加进来的元素应该是代表这个节点的符号,反应在矩阵中的应该是下标。矩阵里面存的其实是边信息，<code>1</code>代表有边,<code>0</code>代表无边，<strong>其实要的是<code>0 1 1 0 0</code>对应的下标！！！需要的是节点信息</strong>，这其实是两个概念</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>我欠缺的也就是我知道我想要的是什么，但是不熟悉R语法，或者说不知道怎么用R语言来实现，虽然我熟悉python语法，但我也不能保证我能写出很优雅的代码，因为跟别人差就差在，他们不仅精通语法，还知道他们的性能，能有很多组合。</p>
<p>这里我需要的是读进来第1行矩阵元素有<code>1</code>的下标，取下标怎么取</p>
<p>有关下标的函数,目前只注意到下面的三个</p>
<ul>
<li><code>which</code>:Give the TRUE indices of a logical object, allowing for array indices.</li>
<li><code>which.min</code>:最小值的下标</li>
<li><code>which.max</code>:最大值的下标</li>
</ul>
<p>按照条条大路通罗马的理论，只要这个函数跟目标有点沾边的肯定能实现，只是看你的想象力，是否能突破天际<br>因为<code>which</code>是需要一组逻辑向量，在R中逻辑值只有<code>TRUE</code>和<code>FALSE</code>,然后它会返回<code>TRUE</code>的下标<br>只要把<code>0 1 1 0 0</code>转换为逻辑值就行了。查了一下<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; as.logical(c(-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>))</div><div class="line">[<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></div></pre></td></tr></table></figure></p>
<p>可以看到<code>as.logical</code>认为只有<code>0</code>是<code>FALSE</code>，其它为<code>TRUE</code>,这样路就通了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">visited &lt;- c(<span class="number">1</span>)</div><div class="line">unvisited &lt;- which(as.logical(m[<span class="number">1</span>,]))</div></pre></td></tr></table></figure></p>
<p>因为只要得到逻辑向量就可以了，那逻辑操作还可以用<code>m[1,] == 1</code>来得到逻辑向量值。这也可以<br>还有没有其他方案？</p>
<p>因为我注意到这里要么是<code>0</code>,要么是<code>1</code>,可以用向量<code>1 2 3 4 5</code>去乘，就得到了<code>0 2 3 0 0</code>,然后只要大于0的就行了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">index &lt;- c(<span class="number">1</span>:<span class="number">5</span>)</div><div class="line">edge2node &lt;- index*m[<span class="number">1</span>,]</div><div class="line">unvisited &lt;- edge2node[edge2node &gt; <span class="number">0</span>]</div></pre></td></tr></table></figure></p>
<p><code>edge2node[edge2node &gt; 0]</code> 中的<code>edge2node&gt;0</code>计算完之后是逻辑值，然后用<code>[]</code>下标操作取逻辑值只为<code>TRUE</code>的元素</p>
<p>上面两种得到的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; unvisited</div><div class="line">[<span class="number">1</span>] <span class="number">2</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>就是我想要的</p>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>上面一开始写的错误的代码中也就是和上面一样的问题。只要改了这一部分就行了。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(length(unvisited)&gt;<span class="number">0</span>)&#123;</div><div class="line">	now &lt;- unvisited[<span class="number">1</span>]</div><div class="line">	unvisited &lt;- unvisited[-<span class="number">1</span>] <span class="comment"># 队头元素出队列</span></div><div class="line">	<span class="comment">#candidate &lt;- m[now,]</span></div><div class="line">	candidate &lt;- which(as.logical(m[now,]))</div><div class="line">	candidate &lt;- setdiff(candidate,visited)</div><div class="line">	unvisited &lt;- union(candidate,unvisited) <span class="comment"># 将队头元素的邻接节点加入队列</span></div><div class="line">	visited &lt;- c(visited,now)  <span class="comment"># 将队头元素加入已访问的</span></div><div class="line">&#125;</div><div class="line">print(visited)</div></pre></td></tr></table></figure></p>
<p>这里<code>setdiff</code>和<code>union</code>是集合运算，因为可以在图上直观的看到，<code>1</code>这个节点可以找到<code>2</code>,<code>3</code>。到<code>2</code>这个节点，可以找到<code>1</code>,<code>3</code>,但此时，<code>1</code>这个节点是已经访问了的，如果不处理，还是加进队列里面的话，那就不断在循环了！！！</p>
<p><code>setdiff</code>是取差值，注意参数的位置，<strong>是将<code>visited</code>里面有的元素从<code>candidate</code>中消掉</strong><br><code>union</code>是取并集，没什么好说的了<br>还有一个<code>intersect(x, y)</code>就是取交集</p>
<p>最后的结果<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; print(visited)</div><div class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<h2 id="全图对每个节点进行同样的操作"><a href="#全图对每个节点进行同样的操作" class="headerlink" title="全图对每个节点进行同样的操作"></a>全图对每个节点进行同样的操作</h2><p>图的最大连通子图，那就对每个节点都进行上面的操作，然后图包含节点最多的就是这个图的最大联通子图了</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">max_node_num &lt;- <span class="number">0</span></div><div class="line">maximal_connected_subgraph &lt;- <span class="literal">NULL</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">5</span>)&#123;</div><div class="line">  visited &lt;- c(i)</div><div class="line">  unvisited &lt;- which(as.logical(m[i,]))</div><div class="line">  <span class="keyword">while</span>(length(unvisited)&gt;<span class="number">0</span>)&#123;</div><div class="line">    now &lt;- unvisited[<span class="number">1</span>]</div><div class="line">    unvisited &lt;- unvisited[-<span class="number">1</span>]</div><div class="line">    candidate &lt;- which(as.logical(m[now,]))</div><div class="line">    candidate &lt;- setdiff(candidate,visited)</div><div class="line">    unvisited &lt;- union(candidate,unvisited)</div><div class="line">    visited &lt;- c(visited,now)</div><div class="line">  &#125;</div><div class="line">  current_node_num &lt;- length(visited)</div><div class="line">  <span class="keyword">if</span>(current_node_num &gt; max_node_num)&#123;</div><div class="line">    max_node_num &lt;- current_node_num</div><div class="line">    maximal_connected_subgraph &lt;- visited</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sort(maximal_connected_subgraph)</div><div class="line">print(m[maximal_connected_subgraph,maximal_connected_subgraph])</div></pre></td></tr></table></figure>
<p>result:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; print(m[maximal_connected_subgraph,maximal_connected_subgraph])</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">0</span>    <span class="number">1</span>    <span class="number">1</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span></div><div class="line">[<span class="number">3</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span></div></pre></td></tr></table></figure></p>
<h1 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h1><p>深度优先就是一条道走到底，无路可走的时候，及时浪子回头，然后又不听教诲又去浪到底，直到玩累了，回家的过程。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>涉及到一个回朔。这样就需要一个<code>parent_node</code>来保存父节点的信息。这里我想到，是不是要回去的时候要重新计算父节点的邻接节点，因为这样才能知道其他节点啊。</p>
<p>同样还需要一个<code>visited</code>来保存已经访问过的节点。然后在访问完一个节点，要将这个节点加入<code>visited</code>中，在要遍历下一个节点的时候，需要取一个节点。那这个时候需要看这个节点是不是已经访问了。<br>这里我想到了两个方案：</p>
<ol>
<li>一个一个取。意思是下标操作，取一个对比一下是不是在<code>visited</code>中，可以用<code>any(visited == current_node)</code>如果是<code>FALSE</code>就是还未访问过。<code>visisted == current_node</code>返回的是一个逻辑向量，然后用<code>any</code>函数如果有一个是<code>TRUE</code>那返回值是<code>TRUE</code>，返回<code>FALSE</code>说明没有一个是相等的。</li>
<li>一下子全取出来。然后用集合运算，做差，然后再取出一个。</li>
</ol>
<p>然后我用笔在纸上模拟的时候，发现这应该是个递归的过程。那<code>visisted</code>需要全局来维护，那这样函数体内就用循环可以了，遍历一个节点的所有邻接节点，然后对每一个节点再进入这个函数。这样就不需要<code>parent_node</code>来维护了，但是需要一个边界条件来终止递归。那就是一个节点的所有邻接节点都被访问过了。</p>
<h2 id="发现的问题，visited全局变量"><a href="#发现的问题，visited全局变量" class="headerlink" title="发现的问题，visited全局变量"></a>发现的问题，<code>visited</code>全局变量</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">m &lt;- matrix(<span class="number">0</span>,<span class="number">5</span>,<span class="number">5</span>)</div><div class="line">m[<span class="number">1</span>,<span class="number">2</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">1</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">2</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">4</span>,<span class="number">5</span>] &lt;- <span class="number">1</span></div><div class="line"></div><div class="line">m &lt;- m + t(m)</div><div class="line"></div><div class="line">visited &lt;- c(<span class="number">1</span>)</div><div class="line"></div><div class="line">dfs &lt;- <span class="keyword">function</span>(current_node)&#123;</div><div class="line">  <span class="comment">#browser()  # 调试用的</span></div><div class="line">  </div><div class="line">  candidate_node &lt;- which(as.logical(m[current_node,]))</div><div class="line">  candidate_node &lt;- setdiff(candidate_node,visited)</div><div class="line">  <span class="comment">#print(candidate_node)</span></div><div class="line">  <span class="keyword">if</span>(length(candidate_node) == <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">return</span>(<span class="number">0</span>) <span class="comment">#这个0返回的没有意义的，随便都可以，只是单纯的结束</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> candidate_node)&#123;</div><div class="line">    visited &lt;- c(visited,i) <span class="comment">#访问i节点</span></div><div class="line">    dfs(i) <span class="comment">#递归</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">dfs(<span class="number">1</span>)</div><div class="line">print(visited)</div></pre></td></tr></table></figure>
<p>上面的结果出错了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error: evaluation nested too deeply: infinite recursion / options(expressions=)?</div><div class="line">Error during wrapup: evaluation nested too deeply: infinite recursion / options(expressions=)?</div></pre></td></tr></table></figure></p>
<p>那就是递归没返回<br>调试了一下，发现问题出现在<code>visited</code>上，<code>dfs(i)</code>进去的时候，理想中<code>visited</code>应该是全局变量，在循环中我将<code>i</code>节点加入已访问的节点中，但是发现递归进去的时候，<code>candidate_node &lt;- setdiff(candidate_node,visited)</code>这时候的<code>visited</code>值是<code>1</code>,就是初始值。可是为什么呢？？？</p>
<blockquote>
<p>内部函数在它的环境中查找visited的值（查找的顺序为：首先函数体的局部变量，参数；然后是外部函数中的局域变量，参数；最后是全局变量） </p>
</blockquote>
<p>所以当在函数内做赋值的时候，相当于就建立了一个局部变量，那在第一层的时候<code>visited &lt;- c(visited,i)</code>这个语句还没执行到的时候，此时的<code>visited</code>在函数体内还没有定义！那找到的就是外部的变量，所以调试的时候看到的是<code>1</code>，那其实相当于因为在递归的时候可以看作都是进入自己的函数，所以每一层的<code>visited</code>都是独立的。</p>
<h2 id="方案-1-return-visited"><a href="#方案-1-return-visited" class="headerlink" title="方案 1 : return(visited)"></a>方案 1 : return(visited)</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">dfs2 &lt;- <span class="keyword">function</span>(current_node,vis=<span class="literal">NULL</span>)&#123;</div><div class="line">	candidate_node &lt;- which(as.logical(m[current_node,]))</div><div class="line">	candidate_node &lt;- setdiff(candidate_node,visited)</div><div class="line">	    </div><div class="line">	<span class="keyword">if</span>(length(candidate_node) == <span class="number">0</span>)&#123;</div><div class="line">		<span class="keyword">return</span>(<span class="literal">NULL</span>) </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(i <span class="keyword">in</span> candidate_node)&#123;</div><div class="line">		<span class="keyword">if</span>(!any(visited == i))&#123;</div><div class="line">			visited &lt;- c(visited,dfs2(i))</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span>(visited)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这么写有两个问题！！！<br>第一个是有闭环的时候，因为我在前面的代码计算<code>candidate_node</code>的时候是依赖<code>visited</code>的，在每一层的函数进去后，因为前面说了，每一层的<code>visited</code>是独立的，所以在没有赋值之前，也就是没有在下一层<code>return</code>之前，用的都是外部的<code>visited &lt;- c(1)</code>这个值，所以这时候计算的<code>candidate_node</code>肯定是不正确的，不是我们想要的，因为不能正确判断是否邻接节点已经访问过。这是根源，所以导致了在下面<code>for</code>循环的时候，在闭环的情况下，因为没有正确的将已经访问的排除掉，而无限的递归。</p>
<p>第二个是分叉，就最简单的情况，<code>1</code>连接<code>2</code>,<code>3</code>,但后两个不连接，因为到<code>2</code>中，<code>visited</code>是外部的<code>1</code>，所以这里是恰好，凑巧，刚刚好<code>candidate_node</code>计算为空，返回，但是！！！返回的是空！这样<code>visited &lt;- c(visited,dfs2(i))</code>这个语句就没有起作用，追其根源那就是<code>return</code>写的不正确。一方面是这里连<code>return(visited)</code>都没执行到，相当于在<code>2</code>层这里直接返回<code>NULL</code>，但是并没有把<code>2</code>这个节点加入<code>visited</code>中。<br>而且，即使不管上面的情况，在<code>2</code>饭后会，后面直接<code>return(visited)</code>了，函数直接退出了。<code>3</code>根本就没做。</p>
<p>试错：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">m &lt;- matrix(<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>)</div><div class="line">m[<span class="number">1</span>,<span class="number">2</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">1</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m + t(m) -&gt; m</div><div class="line"></div><div class="line">visited &lt;- c(<span class="number">1</span>)</div><div class="line"></div><div class="line">print(dfs2(<span class="number">1</span>))</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; print(dfs2(<span class="number">1</span>))</div><div class="line">[<span class="number">1</span>] <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>[todo] 使用return 写递归应该是可以的，那就是我整体的递归应该不是按照原来的思路了。但目前还没有想到怎么写</p>
<h2 id="方案-2-这个visited当作一个参数传递就行了"><a href="#方案-2-这个visited当作一个参数传递就行了" class="headerlink" title="方案 2 : 这个visited当作一个参数传递就行了"></a>方案 2 : 这个<code>visited</code>当作一个参数传递就行了</h2><p>但是发现，这个只是值传递参数，不是引用传递，也就是参数变了，最后<code>visited</code>自己没有改变没有用啊，<code>print(visited)</code>就没用，最后结果就只是<code>1</code></p>
<h2 id="lt-lt-解决"><a href="#lt-lt-解决" class="headerlink" title="&lt;&lt;-解决"></a><code>&lt;&lt;-</code>解决</h2><p>然后我<a href="https://zhangjg.github.io/blog/2015/12/25/The-Closure-in-R.html" target="_blank" rel="external">查到</a>里面提到了<code>&lt;&lt;-</code>，可能这个操作符才是将变量复制到全局变量中去，不然<code>&lt;-</code>就在函数体内生成了一个同名的局部变量<br>然后我就将上面的<code>visited &lt;- c(visited,i)</code>改为<code>visited &lt;&lt;- c(visited,i)</code><br>得到的结果是<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; print(visited)</div><div class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>多了一个<code>3</code>，这个是因为在第一层的时候也就是<code>current_node</code>为<code>1</code>的时候，邻接节点是<code>2</code>,<code>3</code>,在<code>for</code>循环中，先进入<code>2</code>节点，此时可以遍历的只有<code>3</code>,然后进入<code>3</code>,访问完，回朔，此时应该是在这个图下<code>1</code>,<code>2</code>,<code>3</code>都是遍历完了的，但是回朔到<code>1</code>节点的时候，<code>for</code>循环还有一个<code>3</code>没执行，所以在<code>for</code>循环里面还要再加一个条件，看是否已经遍历过。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> candidate_node)&#123;</div><div class="line">	<span class="keyword">if</span>(!any(visited == i))&#123;</div><div class="line">		visited &lt;&lt;- c(visited,i) <span class="comment">#访问i节点</span></div><div class="line">	&#125;</div><div class="line">	dfs(i) <span class="comment">#递归</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; print(visited)</div><div class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<h2 id="寻找最大连通子图"><a href="#寻找最大连通子图" class="headerlink" title="寻找最大连通子图"></a>寻找最大连通子图</h2><p>那就是再用一个<code>for</code>循环封装一下，和上面<code>BFS</code>一样。</p>
<p>完整代码<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">m &lt;- matrix(<span class="number">0</span>,<span class="number">5</span>,<span class="number">5</span>)</div><div class="line">m[<span class="number">1</span>,<span class="number">2</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">1</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">2</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">4</span>,<span class="number">5</span>] &lt;- <span class="number">1</span></div><div class="line"></div><div class="line">m &lt;- m + t(m)</div><div class="line"></div><div class="line">max_length &lt;- <span class="number">0</span></div><div class="line">maximal_connected_subgraph &lt;- <span class="literal">NULL</span></div><div class="line">node_num &lt;- length(m[,<span class="number">1</span>])</div><div class="line"></div><div class="line">dfs &lt;- <span class="keyword">function</span>(current_node,vis=<span class="literal">NULL</span>)&#123;</div><div class="line">  candidate_node &lt;- which(as.logical(m[current_node,]))</div><div class="line">  candidate_node &lt;- setdiff(candidate_node,visited)</div><div class="line">  <span class="keyword">if</span>(length(candidate_node) == <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">return</span>(<span class="literal">NULL</span>) <span class="comment">#这个0返回的没有意义的，随便都可以，只是单纯的结束</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> candidate_node)&#123;</div><div class="line">    <span class="keyword">if</span>(!any(visited == i))&#123;</div><div class="line">      visited &lt;&lt;- c(visited,i) <span class="comment">#访问i节点</span></div><div class="line">    &#125;</div><div class="line">    dfs(i) <span class="comment">#递归</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:node_num)&#123;</div><div class="line">  visited &lt;- c(i)</div><div class="line">  dfs(i)</div><div class="line">  print(visited)</div><div class="line">  current_length &lt;- length(visited)</div><div class="line">  <span class="keyword">if</span>(current_length &gt; max_length)&#123;</div><div class="line">    max_length &lt;- current_length</div><div class="line">    maximal_connected_subgraph &lt;- visited</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">sort(maximal_connected_subgraph)</div><div class="line">print(m[maximal_connected_subgraph,maximal_connected_subgraph])</div></pre></td></tr></table></figure></p>
<h2 id="测试复杂的用例"><a href="#测试复杂的用例" class="headerlink" title="测试复杂的用例"></a>测试复杂的用例</h2><p>构造一个新的图<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-11%20at%208.00.24%20PM.png" alt="new-test"><br>这么构造是因为多了一个闭环，以及让<code>1</code>,和<code>2</code>节点多了一个选择，测试回朔的过程<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; sort(maximal_connected_subgraph)</div><div class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>结果正确，就是打印的时候有点歧义，因为打印出来的矩阵如果没指定名字，又是1,2,3..顺序来的，会误以为是那几个节点，改一下名字就可以了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mresult &lt;- m[maximal_connected_subgraph,maximal_connected_subgraph]</div><div class="line">colnames(mresult) &lt;- maximal_connected_subgraph</div><div class="line">rownames(mresult) &lt;- maximal_connected_subgraph</div><div class="line">print(mresult)</div></pre></td></tr></table></figure></p>
<p>结果是：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; print(mresult)</div><div class="line">   <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">9</span> <span class="number">7</span> <span class="number">8</span> <span class="number">10</span></div><div class="line"><span class="number">1</span>  <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>  <span class="number">1</span></div><div class="line"><span class="number">2</span>  <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">0</span></div><div class="line"><span class="number">3</span>  <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">0</span></div><div class="line"><span class="number">6</span>  <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">0</span></div><div class="line"><span class="number">9</span>  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>  <span class="number">0</span></div><div class="line"><span class="number">7</span>  <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span>  <span class="number">0</span></div><div class="line"><span class="number">8</span>  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>  <span class="number">0</span></div><div class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">0</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;求上图的最大连通子图，其实就是图的遍历，图的遍历有深度优先和广度优先&lt;br&gt;图有很多种对应的存储结构，在R里面最简单的就是邻接矩阵了。&lt;/p&gt;
&lt;p&gt;-update-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用深度优先搜索做&lt;/li&gt;
&lt;li&gt;在深度优先里面涉及到的R中的全局，局部变量
    
    </summary>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/categories/R/"/>
    
    
      <category term="R-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/R-piece/"/>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/tags/R/"/>
    
      <category term="BFS" scheme="http://www.mmmmmcclxxvii.cn/tags/BFS/"/>
    
      <category term="DFS" scheme="http://www.mmmmmcclxxvii.cn/tags/DFS/"/>
    
      <category term="algorithm" scheme="http://www.mmmmmcclxxvii.cn/tags/algorithm/"/>
    
  </entry>
  
</feed>
