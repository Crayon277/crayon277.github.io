<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MMMMMCCLXXVII</title>
  <icon>https://www.gravatar.com/avatar/6ef1a20bc4bfa013bc01a298b5d10f16</icon>
  <subtitle>美丽的火花在恋人的周围环绕</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mmmmmcclxxvii.cn/"/>
  <updated>2018-03-02T04:59:18.944Z</updated>
  <id>http://www.mmmmmcclxxvii.cn/</id>
  
  <author>
    <name>Crayon Chaney</name>
    <email>mmmmmcclxxvii@yeah.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>比特币-自问自答（一）</title>
    <link href="http://www.mmmmmcclxxvii.cn/2018/02/25/bitcoin-troubleshoot/"/>
    <id>http://www.mmmmmcclxxvii.cn/2018/02/25/bitcoin-troubleshoot/</id>
    <published>2018-02-25T14:41:36.000Z</published>
    <updated>2018-03-02T04:59:18.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发给一个不合法的地址会怎么样？"><a href="#发给一个不合法的地址会怎么样？" class="headerlink" title="发给一个不合法的地址会怎么样？"></a>发给一个不合法的地址会怎么样？</h2><p>我第一反应想到的是能发出去吗？之所以想到这个问题是，因为我们现实生活中转账的时候，如果对方账号不存在是转不过去的。而且在比特币系统中没有存在银行这么一个中心机构给我们干这个事情，在《精通比特币2》第四章中的Introduction部分说到</p><blockquote><p>“The digital keys in a user’s wallet are completely independent of the bitcoin protocol and can be generated and managed by the user’s wallet software without reference to the blockchain or access to the internet. </p></blockquote><p>存储在用户钱包中的数字密钥是完全独立余比特币协议，可由用户钱包软件生成并管理，无需参照区块链或访问网络，<strong>这其实就说明一件事，我转账的时候，并不需要对方账户存在，因为本身地址生成的时候，网络事先也是不知道的。</strong> 那如果可以发送的话，是给了谁？<br>为了搞懂这个问题，必须要先知道地址到底是什么和整个交易是怎么样的这两个关键的问题。</p><p>我很久之前看过有关比特币的资料，印象中是把公钥当作地址</p><hr><p><em>展开 – 公钥私钥</em></p><p>公钥是密码学里面非对称加密里面的概念，一个密钥对包含一个私钥和一个公钥。有非对称就有对称，这个就有点类似门锁，有些门锁是不会自动上锁，撞上门还可以开进去，锁门是需要钥匙锁的。然后像球性锁，或者酒店里面的锁，一旦撞上门，那就只能通过钥匙打开，没有钥匙是打不开的。在《趣味数学》这本书里面举了一个例子，你想一个3位数，比如123，然后乘以91，告诉我结果（11193）末尾三位，193在我只知道193的情况下，我能知道你原来想的是什么，只要193<em>11=2123，取末三位，123。原理是91</em>11=1001，任何一个三位数乘以1001末尾三位不变。这里91就是公钥，11就是私钥。我把公钥告诉大伙，但私钥保密，这样在被人传送消息给我的时候就能保证只有我能够阅读到原来的信息。当然真实加密中不会用这么简单的算法。但原理类似。那同样，我怎么知道发送给我的信息的就来自与那个人，而没有被调包。比如A-&gt;B,A可以先用B的公钥加密，在用自己的私钥加密。那么B就收到的就是SKA(PKB(msg)),然后用A的公钥解密，就可以确定是A发过来的，然后在用自己的私钥解密就得到了信息。</p><p><em>关闭 – 公钥私钥</em></p><hr><p>但比特币系统中不能完全把公钥和地址对等起来。当产生了一个钥匙对之后，公钥经过两次哈希运算,分别是<code>SHA256</code>和<code>RIPEMD160</code>,得到公钥哈希，pubKeyHash,然后再用<code>base58</code>格式编码得到了我们常见的比特币地址。这里<code>base58</code>只是编码而已，不是加密，更不是非对称加密。所以是可以还原到公钥哈希的。</p><p>来自《精通比特币2》上的图</p><p><img src="http://onexs3cnv.bkt.clouddn.com/1785959-6fc43eee55666ff2.png" alt="address"></p><p>为什么还要经过两次哈希运算呢？我的理解是进一步的保证了不可逆计算。那为什么要用<code>base58</code>编码呢，其实是为了简便的表示和压缩字节数据。</p><p>搞懂了地址是什么，再来看交易，一笔交易的本质是什么，<code>**我的理解是交易就是自己拿一把钥匙打开一把对应的门，拿出里面的钱从另一个有上述酒店锁的门缝里塞进去，然后只有这个拥有这个门的钥匙的人才能进去打开。**</code>这里暂时不考虑coinbase交易，也就是挖矿奖励。当然会涉及到找零机制，酒店工作人员会把多余的钱塞到另一间房，而转账者有这间房的钥匙。那么这个酒店的房间总共有(那其实</p><blockquote><p>“The size of bitcoin’s private key space, (2^256) is an unfathomably large number. It is approximately 10^77 in decimal. For comparison, the visible universe is estimated to contain 10^80 atoms.”</p></blockquote><p>可以当作无限个了，也就是你随便想一个地址字符串，转钱到这里，相当于你随便塞了一笔钱到一个陌生的房间，那么如果这个世界上恰好有人拥有这个房间的钥匙，那么就相当于送了他一笔钱，或者等以后有人恰好钱包给他生成了这个地址（地址冲突的概率是存在的），那么他会发现，他刚买了一个新钱包，而这个钱包里面有一笔钱。如果是不合法的地址呢，因为现在很多钱包软件出来，所以我是钱包软件制作者的话，我会在前段检查地址的合法性，不然这笔钱就永远遗失了，因为谁也没有钥匙，相当于就被放进了一个黑洞。</p><p>来自《精通比特币2》上的图</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202018-03-02%20at%208.59.44%20AM.png" alt="address type"></p><p>常见的比特币地址是由1开头的。</p><hr><p><em>展开 – 交易解锁脚本</em></p><p>转账，无非就是从一个地址到另一个地址，为了搞懂这个流程首先要明确这个和银行账户的区别，那这里这个地址的概念和银行里的账户的概念其实本质上是不一样的。银行里的账户，资产的变动，会显示<code>+10,000</code> <code>-9,000</code> 等等，然后个人所拥有的资产就是加加减减得到的。比特币系统中，一个人所拥有的资产就看最新的状态就行了，不用加加减减了，这是得益于比特币所使用的UTXO账户模型， 意思是我转账，要把所有的钱都花掉，这不是意味着我有20个btc，要转1个btc给小明，就得转20个给小明，它是有找零机制的，也就是剩下的19个（暂时先不讨论手续费的问题）会返回到一个新的地址（为了匿名性的考虑，当然也可以返回到原来的地址），但总的来说，一笔交易的输入，他不是说像银行里，我有200，要转150给其他人，然后我的账户减掉150，剩下50，其他人账户上加150，不是这样的，因为没有一个中心机构做这件事，在比特币系统中，是200都得参与交易，<strong>那这笔交易的输出就是<code>UTXO</code></strong>,中文叫未花费过的交易输出，对比银行基于账户模型，一个重过程，一个重结果。这就很直白了，那是谁控制这这些<code>UTXO</code>呢，就是掌握其地址相对应的私钥的人，可以花费这笔币。<strong>总的来说，我要转1个btc给A，那么这个输入一定是之前某个交易的输出，或者好几笔输出的组合（总之输入值要大于交易额），而且我拥有这些之前交易输出的地址的所有权。</strong></p><p><strong>那之前别人转给我的地址，是怎么让我拥有这个地址的所有权的呢？或者我转给其他人，是怎么保证只能这个人能用这笔钱的呢？</strong><br>这就涉及到另一个概念了，比特币脚本。其实我感觉比特币系统中做的最多的操作就是证明，证明我拥有转账地址所对应唯一的私钥，证明签名是正确的，(最主要的原因是加密算法都是单向的，所以只能做验证结果是不是一样的，而不是做验证起点是不是一样的操作)我就可以花别人转给我这个地址上的币了。一个比特币交易的数据结构是这样婶儿的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"version"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"locktime"</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">"vin"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"txid"</span>:<span class="string">"7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18"</span>,</div><div class="line">      <span class="attr">"vout"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"scriptSig"</span>: <span class="string">"3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf"</span>,</div><div class="line">      <span class="attr">"sequence"</span>: <span class="number">4294967295</span></div><div class="line">    &#125;</div><div class="line"> ],</div><div class="line">  <span class="attr">"vout"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"value"</span>: <span class="number">0.01500000</span>,</div><div class="line">      <span class="attr">"scriptPubKey"</span>: <span class="string">"OP_DUP OP_HASH160 ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"value"</span>: <span class="number">0.08450000</span>,</div><div class="line">      <span class="attr">"scriptPubKey"</span>: <span class="string">"OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG"</span>,</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>一笔交易能够用多少，就是通过输出的<code>value</code>值体现的。</p><p>**辣个<code>scriptPubKey</code>就是比特币的堆栈脚本，上面把输出比作一把锁，那么要用这把锁锁住的币的人要用钥匙，验证的方式就是他要提供签名和公钥，最终要执行的脚本是这样的</p><p><img src="http://onexs3cnv.bkt.clouddn.com/1785959-e4060555d14bcd28.png" alt="script"><br>图片来自《精通比特币2》</p><p>前面部分叫解锁脚本，由要解锁的人提供，后面是锁定脚本，是要引用那笔交易的输出（UTXO），然后依次脚本执行堆栈。</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202018-03-02%20at%2010.25.21%20AM.png" alt="excute1"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202018-03-02%20at%2010.25.39%20AM.png" alt="excute2"></p><p>（上面图解释的很清楚了）</p><p><strong> 在上面说地址是由公钥哈希经过<code>base58</code>编码而成的，那么其实这个过程是可逆的，编码不是加密，虽然我们转账是给到地址，但是我们是可以由比特币地址得到公钥哈希，所以锁定脚本里<code>&lt;PubKHash&gt;</code>就是这么来的</strong></p><p>那么怎么才算拥有这个地址，就是我有钥匙，有<strong>独一无二</strong>的钥匙，怎么才算是一个独一无二的钥匙，首先地址是怎么来的，</p><p>私钥-&gt;公钥-&gt;地址，这里每一步都是单向的。所以在脚本中<code>EQUALVERIFY</code>其实做的就是是否你拥有正确能生成这个地址的公钥，其实这部分是将公钥给隐藏起来了的。<code>CHECKSIG</code>做的是验证签名是不是有效的。</p><hr><p><em>展开 – 椭圆曲线加密</em></p><p>在比特币系统中，用的非对称加密算法是椭圆曲线加密算法，ECC指的是椭圆曲线密码学，公钥是通过椭圆曲线乘法从私钥计算得到的，而ECDSA是椭圆曲线数字签名，是在这个密码体系下的签名算法，</p><p><img src="http://onexs3cnv.bkt.clouddn.com/8490153-e6cb048ad310aeb5.png" alt="ecdsa"></p><p>这里的<code>dA</code>就是私钥,公钥则是用来验证私钥的签名的正确性</p><p><img src="http://onexs3cnv.bkt.clouddn.com/8490153-7f2dd00d3eb43ec0.png" alt="verify"></p><p>这里的<code>Qa</code>就是公钥，具体的可以看《精通比特币2》的第六章</p><p><em>关闭 – 椭圆曲线加密</em></p><hr><p>因为私钥，公钥，地址，三者关系是密不可分的，<code>EQUALVERIFY</code>的意义其实就是验证我这把钥匙是对着这把锁的，公钥和地址的联系通过验证体现出来的，<code>CHECKSIG</code>的意义是这把锁同时还有声控，必须主人同意才能开锁,私钥和公钥的联系通过签名体现出来的，同时也意味着是我同意了这笔交易，出现问题了就是呈堂证物。签名也另一方面杜绝了，万一公钥被伪造风险或者恰好有另一个公钥经过hash160运算后得到相同的公钥哈希（这是存在的，但如果要同时也对应着私钥，那基本上是不可能的），第一步验证成功，但还需要破解私钥，才能验证签名成功，这样就增加了攻击者的难度</p><blockquote><p>公钥是由私钥生成的，通过椭圆曲线(ECPoint)生成，一个私钥经过椭圆曲线变换之后会生成一个65个byte的数组，一般我们会看到这样的一个公钥：04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235，公钥一般是把byte数组是经过hex(16进制)的处理之后显示出来的，不同于私钥的Base58,公钥是用来解开私钥签名的数据，使用私钥签名交易之后，会把自己的公钥一起发送，私钥签名的数据可以使用公钥解密，发送公钥之后旷工才能验证私钥的签名的正确性(能不能解开)，私钥和公钥是成对出现的，一个私钥签名的数据，只有对应的公钥才能解开，而地址也是从公钥生成的，这样就可以验证花费的交易是不是属于这个地址的。</p></blockquote><p><em>关闭 – 交易解锁脚本</em></p><hr><p>之所以底层叫区块链，链就体现在我要交易，手上就要有东西，东西来源就当作输入吧，把输入看作一个环扣，输入就是要扣在之前交易的输出上，每个人扣属于自己的，不能乱扣。扣这个动作就是解锁脚本的过程，也就是将解锁脚本和锁定脚本连在一起执行验证的过程，在这个过程中，转账者要用私钥进行签名交易，同时也会将自己的公钥一起发送，这样矿工就能验证私钥签名的有效性，同时这个公钥也必须对应着UTXO的地址（公钥哈希）。</p>]]></content>
    
    <summary type="html">
    
      发给一个不合法的地址会发生什么？关键词：地址，私钥，公钥，椭圆曲线，签名，交易，UTXO
    
    </summary>
    
      <category term="blockchain" scheme="http://www.mmmmmcclxxvii.cn/categories/blockchain/"/>
    
    
      <category term="bitcoin" scheme="http://www.mmmmmcclxxvii.cn/tags/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>P2P 网络</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/10/12/p2p/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/10/12/p2p/</id>
    <published>2017-10-12T03:49:05.000Z</published>
    <updated>2017-10-12T14:25:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>P2P or Peer-to-Peer is a very hard type of program to create, mostly because of its very structure. Most internet applications are Client-Server this is because a lot of headaches are solved just by having a fixed server you know you can connect to. At the end of the day, that’s more or less all Napster did, it just indexed files and said who is currently hosting them.</p><p>The other problem with creating P2P software, is that developing it on your own, you will have very few peers to test with, even if you do create a bunch of virtual computers. You will find it hard to test it scaled to 00’s of users.</p><p>First steps though, you will need to learn to program in a suitable language, something like C++ or C# maybe just make it as a console application to learn the technology.</p><p>Next, learn how to work with files. Not much use if you can’t save stuff is it.</p><p>Networking next. Start with a client-server set up just to get to grips with transferring files. Make a server app that gives the files and a client app that downloads it. Then start to scale it to one server giving files to lots of clients.</p><p>Final step is to merge the client and server so that as the peer downloads more of the file, it can start to be a server and let other clients download from it.</p><p>If you want, now you can think about a GUI.</p></blockquote><p>资源：</p><ul><li><a href="https://en.wikibooks.org/w/index.php?title=The_World_of_Peer-to-Peer_%28P2P%29/Building_a_P2P_System" target="_blank" rel="external">Building P2p network</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;P2P or Peer-to-Peer is a very hard type of program to create, mostly because of its very structure. Most internet applicatio
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python里面yield和send</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/10/12/python-yield-send/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/10/12/python-yield-send/</id>
    <published>2017-10-11T16:20:08.000Z</published>
    <updated>2017-10-12T03:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>前序资料链接：</p><ul><li><a href="http://codingpy.com/article/python-generator-notes-by-kissg/" target="_blank" rel="external">python生成器详解</a></li><li><a href="http://www.cnblogs.com/coder2012/p/4990834.html" target="_blank" rel="external">python yield实现</a></li><li><a href="http://www.bogotobogo.com/python/python_generators.php" target="_blank" rel="external">python generator</a></li></ul><p>下面是自己的理解和补充<br>&lt;! –more –&gt;</p><p>一个函数里面有申明<code>yield</code>关键字的时候，这个函数就是生成器generator. 比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">value = (<span class="keyword">yield</span> <span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'continue'</span></div><div class="line">value = (<span class="keyword">yield</span> value)</div></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = g()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.next()</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.send(<span class="number">2</span>)</div><div class="line"><span class="keyword">continue</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure><p><code>yield</code>其实类似做了一个中断跳到其他地方的操作。<code>send</code>方法就是返回中断处继续执行</p><p><code>value = (yield 1)</code>要分开来看,<code>yield 1</code>和<code>value = yield</code>前面是<code>yield</code>出去，后面是<code>send</code>进来的值赋给了<code>value</code></p><p><strong><code>send</code>方法其实是有返回值的！！！</strong> 返回值就是生成器从下一个<code>yield</code>值。但是<code>send</code>其实也是“中断”跳到原来<code>yield</code>的生成器，直到生成一个返回到它这里，它才继续操作。这里说的是两个函数分别包括<code>send</code>和<code>yield</code>，就是两个函数跳来跳去。</p><p>这个特性来解决生产者消费者问题，就是<a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868328689835ecd883d910145dfa8227b539725e5ed000" target="_blank" rel="external">协程</a>的概念</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># File Name: test_yield.py</span></div><div class="line"><span class="comment"># Created Time: Wed Oct 11 22:24:20 2017</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Crayon Chaney &lt;mmmmmcclxxvii@gmail.com&gt;'</span></div><div class="line"></div><div class="line"><span class="comment"># value = 0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></div><div class="line">    value = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        value = (<span class="keyword">yield</span> value)</div><div class="line">        <span class="keyword">if</span> value:</div><div class="line">            <span class="keyword">print</span> <span class="string">"consuming "</span>,value</div><div class="line">            value = <span class="string">'return here'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(c)</span>:</span></div><div class="line">    now = c.next()</div><div class="line">    <span class="keyword">while</span> now &lt; <span class="number">5</span>:</div><div class="line">        now = now + <span class="number">1</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"processing "</span>,now</div><div class="line">        msg = c.send(now)</div><div class="line">        <span class="keyword">print</span> msg</div><div class="line">    c.close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    c = consumer()</div><div class="line">    process(c)</div></pre></td></tr></table></figure><p>呈现的结果就是生产一个，消费一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">processing  1</div><div class="line">consuming  1</div><div class="line">return here</div><div class="line">processing  2</div><div class="line">consuming  2</div><div class="line">return here</div><div class="line">processing  3</div><div class="line">consuming  3</div><div class="line">return here</div><div class="line">processing  4</div><div class="line">consuming  4</div><div class="line">return here</div><div class="line">processing  5</div><div class="line">consuming  5</div><div class="line">return here</div></pre></td></tr></table></figure></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-10-12%20at%2011.03.30%20AM.png" alt="状态机"></p><p>状态机图没有体现send返回值的，再完善一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前序资料链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codingpy.com/article/python-generator-notes-by-kissg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;python生成器详解&lt;/a
      
    
    </summary>
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
      <category term="python-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/python-piece/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序-snake案例解析</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/07/12/miniprogram/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/07/12/miniprogram/</id>
    <published>2017-07-12T14:06:45.000Z</published>
    <updated>2017-07-29T14:10:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="snake-wxml"><a href="#snake-wxml" class="headerlink" title="snake.wxml"></a>snake.wxml</h1><h2 id="wx-for"><a href="#wx-for" class="headerlink" title="wx:for"></a>wx:for</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"ground"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;ground&#125;&#125;"</span>  <span class="attr">class</span>=<span class="string">"rows"</span> <span class="attr">wx:for-item</span>=<span class="string">"cols"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;cols&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"block block_&#123;&#123;item&#125;&#125;"</span> &gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><p>最外层的<code>view</code>想成一个大容器，这个容器的大小是由相对应的<code>ground</code>的wxss规定的，然后内层第一个<code>view</code>是放在这个大容器的一个抽屉，然后最里层是放在这个抽屉里面的东西，</p><p>想象建立一个操场，先是规划好操场的大小，划好地块，然后在每一排的植被土壤弄好，然后再一块一块的假草放上去。</p><p>注意的就是，<strong>默认数组的当前项的下标变量名默认为<code>index</code>，数组当前项的变量名默认为<code>item</code></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span></div><div class="line">  &#123;&#123;index&#125;&#125;: &#123;&#123;item&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><p>这个<code>index</code>就是下标索引，从零开始，而<code>item</code>是数组里面具体的东西<br>比如这个<code>array</code>在js里赋值<code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]</code><br>那么打印出来的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0:&apos;a&apos;</div><div class="line">1:&apos;b&apos;</div><div class="line">3:&apos;c&apos;</div><div class="line">4:&apos;d&apos;</div></pre></td></tr></table></figure></p><p>如果是<code>[[1,2],[2,3],[3,4]]</code><br>那么打印出来是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0:[1,2]</div><div class="line">1:[2,3]</div><div class="line">2:[3,4]</div></pre></td></tr></table></figure></p><p>所以<code>item</code>表示的就是第<code>index</code>下标对应的值<br><code>wx:for-index=&quot;idx&quot;</code>,<code>wx:for-item=&quot;itm&quot;</code>只是名字不叫<code>item</code>,<code>index</code>而已，自己命名罢了。</p><p>参考：</p><ul><li><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/list.html" target="_blank" rel="external">列表渲染</a></li></ul><h2 id="modal弹出框组件"><a href="#modal弹出框组件" class="headerlink" title="modal弹出框组件"></a>modal弹出框组件</h2><p>参考：</p><ul><li><a href="http://www.cnblogs.com/simba-lkj/p/6509927.html" target="_blank" rel="external">微信小程序之弹框modal</a></li><li><a href="http://blog.csdn.net/u014360817/article/details/52671211" target="_blank" rel="external">微信小程序把玩（二十三）modal组件</a></li></ul><h1 id="snake-wxss-中"><a href="#snake-wxss-中" class="headerlink" title="snake.wxss 中"></a>snake.wxss 中</h1><h2 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h2><p>首先看标签结构<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"score"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>snake<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"scoredetail"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"scoredesc"</span>&gt;</span>得分<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"scorenumber"</span>&gt;</span>&#123;&#123;score&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"scoredetail"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"scoredesc"</span>&gt;</span>历史最高<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"scorenumber"</span>&gt;</span>&#123;&#123;maxscore&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure></p><p>上面的布局用图示就是<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-12%20at%2010.17.00%20PM.png" alt="layout"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.score</span> &#123;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.scoretitle</span>&#123;</div><div class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</div><div class="line">...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.scoredetail</span>&#123;</div><div class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果用了flex就是这样的展现形式<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-12%20at%2010.21.04%20PM.png" alt="flex"></p><p>如果<code>.score</code>中设置的<code>display</code>设置为<code>block</code>,效果为<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-12%20at%2010.22.58%20PM.png" alt="block"><br>而且其他<code>inline</code>,<code>grid</code>等都是上面这个效果。</p><p>其实<code>flex</code>还隐藏了一个设置，就是<code>flex-flow</code>应该默认是<code>row</code>，所以在一列上展开。flex是flexiable的缩写，注意在<code>scoretitle</code>和<code>scoredetail</code>中都有设置<code>flex</code>值，这个值表示的意义就是比重，我是这么理解的。比如，如果将<code>scoretitle</code>中的<code>flex</code>值改为<code>4</code></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-12%20at%2010.28.25%20PM.png" alt="4flex"><br>可以看到<code>title</code>的视图占的地盘越来越大，而因为另外两个视图都是由同样的<code>scoredetail</code>控制，<code>flex</code>都为1，所以占比相同。</p><p><strong>而且因为是<code>flex</code>，所以只要是关于距离的属性值，都会影响到它</strong>，比如<code>scoretitle</code>中的<code>margin</code>值的左侧改为<code>200rpx</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.title</span>&#123;</div><div class="line">...</div><div class="line">    <span class="selector-tag">margin</span>: 40<span class="selector-tag">rpx</span> 20<span class="selector-tag">rpx</span> 40<span class="selector-tag">rpx</span> 200<span class="selector-tag">rpx</span>;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-12%20at%2010.35.06%20PM.png" alt="margin200"></p><p>可以看到因为title这个视图被要求离左侧200rpx，<strong>导致另外两个视图被等比例的压缩了。</strong></p><p>参考:</p><ul><li><a href="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-12%20at%2010.35.06%20PM.png" target="_blank" rel="external">display:flex多栏多列布局</a></li></ul><h2 id="操场宽度-rpx"><a href="#操场宽度-rpx" class="headerlink" title="操场宽度 rpx"></a>操场宽度 rpx</h2><p>参考：<br>-<a href="http://www.51xuediannao.com/javascript/xiaochengxu_rpx.html" target="_blank" rel="external">微信小程序尺寸单位rpx以及样式相关介绍</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.ground&#123;</div><div class="line">    width: 660rpx;</div><div class="line">    height:840rpx;</div><div class="line">    margin-left: 40rpx;</div><div class="line">    background-color: #eee4da;</div><div class="line">&#125;</div><div class="line">.block&#123;</div><div class="line">    width:30rpx;</div><div class="line">    height:30rpx;</div><div class="line">    float: left;</div><div class="line">    background: #ccc;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>rpx单位是微信小程序中css的尺寸单位，rpx可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</p></blockquote><p>因为一个块设定30rpx,然后每一行有22个（22列），所以操场宽度是22<em>30=660rpx, 有28行，高度就是28</em>30=840rpx。</p><h1 id="snake-js"><a href="#snake-js" class="headerlink" title="snake.js"></a>snake.js</h1><p>逻辑层！！</p><h2 id="setData"><a href="#setData" class="headerlink" title="setData"></a>setData</h2><p>参考：</p><ul><li><a href="https://segmentfault.com/q/1010000007078232/a-1020000007103717" target="_blank" rel="external">关于微信小程序里面this.setData到底怎样或运行的？</a></li></ul><blockquote><p>setData 函数用于将数据从逻辑层发送到视图层，同时改变对应的 this.data 的值。<br>注意<br>1.直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致<br>2.单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。</p><p>1.页面最终绑定的是data对象上的属性（键）<br>2.setData(obj)方法中要求对象作为参数，他做了两件事<br>   1)他会将obj参数上的属性浅拷贝到data对象上，该功能建议你参考Object.assign()方法的功效<br>   2)obj参数上的属性浅拷贝到data对象的同时，会对页面绑定该属性的地方重新渲染，起到了脏值检查的作用</p></blockquote><h3 id="为什么在initGround和initSnake方法中没有用this-setData，而是直接设置data中的值"><a href="#为什么在initGround和initSnake方法中没有用this-setData，而是直接设置data中的值" class="headerlink" title="为什么在initGround和initSnake方法中没有用this.setData，而是直接设置data中的值"></a>为什么在<code>initGround</code>和<code>initSnake</code>方法中没有用<code>this.setData</code>，而是直接设置<code>data</code>中的值</h3><p>先直接给结论，那是因为在<code>createFood</code>方法中<code>setData</code>了<code>ground</code>等值，不然在屏幕上显示不出操场。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> maxscore = wx.getStorageSync(<span class="string">'maxscore'</span>);</div><div class="line">  <span class="keyword">if</span>(!maxscore) maxscore=<span class="number">0</span></div><div class="line">  <span class="keyword">this</span>.setData(&#123;</div><div class="line">    maxscore:maxscore</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">this</span>.initGround(<span class="keyword">this</span>.data.rows,<span class="keyword">this</span>.data.cols);</div><div class="line">  <span class="comment">//操场渲染</span></div><div class="line">  <span class="comment">//this.initSnake(3);</span></div><div class="line">  <span class="comment">//贪吃蛇渲染</span></div><div class="line">  <span class="keyword">this</span>.createFood();</div><div class="line">  <span class="comment">//this.move();</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">initGround:<span class="function"><span class="keyword">function</span>(<span class="params">rows,cols</span>)</span>&#123;</div><div class="line">    <span class="comment">//初始化操场</span></div><div class="line">    <span class="comment">//console.log([rows,cols]);</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</div><div class="line">      <span class="keyword">var</span> arr = [];</div><div class="line">      <span class="keyword">this</span>.data.ground.push(arr);</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</div><div class="line">        <span class="keyword">this</span>.data.ground[i].push(<span class="number">0</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">   <span class="comment">// console.log(this.data.ground);</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  initSnake:<span class="function"><span class="keyword">function</span>(<span class="params">len</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">      <span class="keyword">this</span>.data.ground[<span class="number">0</span>][i] = <span class="number">1</span>;</div><div class="line">      <span class="keyword">this</span>.data.snake.push([<span class="number">0</span>,i]);</div><div class="line">      <span class="comment">//???Todo</span></div><div class="line">      <span class="comment">//这里没有用this.setData方法来设置snake可以吗？</span></div><div class="line">      <span class="comment">//还是用对象方法是可以的？</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">createFood:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> x=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="keyword">this</span>.data.rows);</div><div class="line">    <span class="keyword">var</span> y=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="keyword">this</span>.data.cols);</div><div class="line">    <span class="keyword">var</span> ground = <span class="keyword">this</span>.data.ground;</div><div class="line">    ground[x][y] = <span class="number">2</span>;</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      ground:ground,</div><div class="line">      food:[x,y]</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><p><code>initGround</code>和<code>initSnake</code>里面是对<code>data</code>数据中的<code>ground</code>和<code>snake</code>进行改变，如果把<code>onLoad</code>中的<code>createFood</code>注释掉，可以看到渲染的效果是<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-15%20at%2010.53.43%20PM.png" alt="comment createFood"></p><p><strong>注意</strong>这里的棕色底是<code>ground</code>的css属性，是容纳操场的“大抽屉”<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ground</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">660</span>rpx;</div><div class="line">    <span class="attribute">height</span>:<span class="number">840</span>rpx;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">40</span>rpx;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#eee4da</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而贪吃蛇的活动场地是由<code>block</code>属性控制的，背景应该为灰色。可以在视图层打印出每个操场的数组值（操场由数组控制，值是0的为灰色，值是1的是蛇体部分，值是2的是食物）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"ground"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;ground&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"rows"</span> <span class="attr">wx:for-item</span>=<span class="string">"cols"</span> &gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;cols&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"block block_&#123;&#123;item&#125;&#125;"</span>&gt;</span></div><div class="line">      &#123;&#123;cols&#125;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure></p><p>因为有<code></code>理应在操场这个视图中打印出数字，但是没有，还是和上面一样。</p><p><strong>然后再把<code>createFood</code>注释删掉</strong>，看到效果</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-15%20at%2011.00.41%20PM.png" alt="uncomment createFood"></p><p><strong>由此得知，并不是<code>initGround</code>和<code>initSnake</code>不用<code>this.setData</code>来设置<code>ground</code>值，而是统一在<code>createFood</code>中做了，并可以验证，<code>this.setData</code>是逻辑层和视图层的实时交互的途径，要想在视图层中显示由逻辑层控制的一些参数，必须通过<code>this.setData</code>，不然没有效果。因为蛇体其实就是<code>ground</code>的某几个值为1，而<code>snake</code>不是用来渲染视图层的，是用来后面的判断生死以及移动的，可以想成是后台的数据，所以可以不用<code>this.setData</code>来设置，而<code>ground</code>是要显示在前端的，所以必须用<code>this.setData</code>来设置</strong></p><h3 id="触壁后蛇头位移？"><a href="#触壁后蛇头位移？" class="headerlink" title="触壁后蛇头位移？"></a>触壁后蛇头位移？</h3><p>详细见下面的debug部分。</p><p>原因是因为在<code>checkGame</code>中的<code>this.setData</code>函数设置后，没有即使反应在视图层，<strong>我想的是，这个函数是及时生效</strong></p><p>调用流程是：</p><p><code>Move</code> –&gt; <code>changeDirection</code> –&gt; <code>changeRight</code> –&gt; <code>checkGame</code> </p><p>在<code>checkGame</code>中<code>this.setData</code>做完后不是马上视图层生效，而是回到<code>changeRight</code>继续做剩下的，而剩下的因为没经过逻辑判断，这里可能会后bug，因为触壁后，已经到头了，理应弹出结束框，但是因为视图层没有马上生效，所以导致<code>changeRight</code>中在<code>checkGame</code>后的<code>ground[x][y]=1</code>继续执行，这个则是超出了边界。</p><p>可以做一个实验</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;newfield.text&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"addnewfield"</span>&gt;</span> add new field<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">addnewfield:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.outersetData();</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      <span class="string">"newfield.text"</span>:<span class="string">"here is after outersetData"</span></div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">  outersetData:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      <span class="string">"newfield.text"</span>:<span class="string">"can this message display???"</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>最后结果：<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-20%20at%209.17.42%20AM.png" alt="result"></p><p><code>outersetData</code>中设置的，在单步调试中也没有显示过，<strong>说明，在函数调用过程中，应该是要所有调用结束后才会触发<code>setData</code>的作用，然后视图层重新渲染</strong></p><h2 id="初始化操场"><a href="#初始化操场" class="headerlink" title="初始化操场"></a>初始化操场</h2><p>我写的是:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">initGround:<span class="function"><span class="keyword">function</span>(<span class="params">rows,cols</span>)</span>&#123;</div><div class="line">    <span class="comment">//console.log([rows,cols]);</span></div><div class="line">    <span class="keyword">var</span> arr=[];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</div><div class="line">      <span class="keyword">this</span>.data.ground.push(arr);</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</div><div class="line">        <span class="keyword">this</span>.data.ground[i].push(<span class="number">0</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.data.ground);</div><div class="line">  &#125;,</div><div class="line">...</div></pre></td></tr></table></figure></p><p>注意<code>var arr = []</code>写在<code>for</code>循环外面，然后在调试中看到<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-13%20at%2012.12.32%20AM.png" alt="initground"></p><p>这是一个异常的情况，不可能有那么多数据。</p><p>然后测试了一下<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-13%20at%2012.22.45%20AM.png" alt="test"><br>从上面的测试可以看出，虽然<code>g.push(arr)</code>是导入了4个<code>[]</code>，但当<code>g[0].push(1)</code>，做这个的时候，实际上，这4个<code>[]</code>都是引用同一个arr,也就是<code>arr</code>是“全局的”，它变，全都变。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>参考：<br>-<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html" target="_blank" rel="external">event</a></p><p>视图层的代码<br><code>&lt;view class=&quot;control&quot; bindtouchstart=&quot;tapStart&quot; bindtouchmove=&quot;tapMove&quot; bindtouchend=&quot;tapEnd&quot;&gt;</code><br>当在这个视图里面发生触屏事件，这个视图的大小可能是<code>control</code>控制的，然后在里面的每一次点击滑动，都会触发相应的<code>tapStart</code>,<code>tapMove</code>,<code>tapEnd</code>函数。</p><p>与视图层的逻辑层，以<code>tapStart</code>为例，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tapStart:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.setData(&#123;</div><div class="line">    startx:event.touches[<span class="number">0</span>].pageX,</div><div class="line">    starty:event.touches[<span class="number">0</span>].pageY</div><div class="line">  &#125;)</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><p>我一开始怀疑为什么要event,以为是关键字，看到文档中写</p><blockquote><p>在相应的Page定义中写上相应的事件处理函数，参数是event。</p></blockquote><p>它是参数，并不是关键字。然后试了一些，把上面的<code>event</code>改为其他的名字也可以，其实就是一个命名参数<code>function(event=**)</code>这种。<br>这个<code>event</code>是个对象。</p><blockquote><p>如无特殊说明，当组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象。</p></blockquote><p>然后是<code>event.touches[0]</code>，好奇[1]是什么，这个<code>touches</code>是什么东西。</p><blockquote><p>touches 是一个数组，每个元素为一个 Touch 对象（canvas 触摸事件中携带的 touches 是 CanvasTouch 数组）。 表示当前停留在屏幕上的触摸点。</p></blockquote><p>然后打印出来，<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-13%20at%202.35.49%20PM.png" alt="touches"><br><code>touches</code>数组就一个元素，长度就为1，没有<code>touches[1]</code>。</p><h3 id="tapEnd"><a href="#tapEnd" class="headerlink" title="tapEnd"></a>tapEnd</h3><h2 id="that和this"><a href="#that和this" class="headerlink" title="that和this"></a>that和this</h2><p>参考：</p><ul><li><a href="http://blog.csdn.net/u010289760/article/details/49968387" target="_blank" rel="external"> js中this和that</a></li><li><a href="http://94rn.com/hudong/201701/14123.html" target="_blank" rel="external">微信小程序开发日记：重要的var that=this</a></li><li><a href="http://www.cnblogs.com/rainman/archive/2009/05/03/1448392.html" target="_blank" rel="external">深入理解JavaScript中的this关键字</a></li></ul><h2 id="onLoad"><a href="#onLoad" class="headerlink" title="onLoad"></a>onLoad</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> changeLeft:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   ...</div><div class="line">      <span class="keyword">this</span>.checkGame(snakeTAIL);</div><div class="line">...</div><div class="line"><span class="keyword">this</span>.setData(&#123;</div><div class="line">              ground:ground,</div><div class="line">          snake:arr</div><div class="line">      &#125;);</div><div class="line">...</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">checkGame:<span class="function"><span class="keyword">function</span>(<span class="params">snakeTAIL</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr=<span class="keyword">this</span>.data.snake;</div><div class="line">    <span class="keyword">var</span> len=<span class="keyword">this</span>.data.snake.length;</div><div class="line">    <span class="keyword">var</span> snakeHEAD=arr[len<span class="number">-1</span>];</div><div class="line">    <span class="keyword">if</span>(snakeHEAD[<span class="number">0</span>]&lt;<span class="number">0</span>||snakeHEAD[<span class="number">0</span>]&gt;=<span class="keyword">this</span>.data.rows||snakeHEAD[<span class="number">1</span>]&gt;=<span class="keyword">this</span>.data.cols||snakeHEAD[<span class="number">1</span>]&lt;<span class="number">0</span>)&#123;</div><div class="line">            clearInterval(<span class="keyword">this</span>.data.timer);</div><div class="line">                <span class="keyword">this</span>.setData(&#123;</div><div class="line">                modalHidden: <span class="literal">false</span>,</div><div class="line">                    &#125;)  </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(arr[i][<span class="number">0</span>]==snakeHEAD[<span class="number">0</span>]&amp;&amp;arr[i][<span class="number">1</span>]==snakeHEAD[<span class="number">1</span>])&#123;</div><div class="line">            clearInterval(<span class="keyword">this</span>.data.timer);</div><div class="line">                <span class="keyword">this</span>.setData(&#123;</div><div class="line">                    modalHidden: <span class="literal">false</span>,</div><div class="line">                &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(snakeHEAD[<span class="number">0</span>]==<span class="keyword">this</span>.data.food[<span class="number">0</span>]&amp;&amp;snakeHEAD[<span class="number">1</span>]==<span class="keyword">this</span>.data.food[<span class="number">1</span>])&#123;</div><div class="line">        arr.unshift(snakeTAIL);</div><div class="line">        <span class="keyword">this</span>.setData(&#123;</div><div class="line">            score:<span class="keyword">this</span>.data.score+<span class="number">10</span></div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">this</span>.storeScore();</div><div class="line">        <span class="keyword">this</span>.creatFood();</div><div class="line">    &#125;  </div><div class="line">&#125;,</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">modalChange:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">            score: <span class="number">0</span>,</div><div class="line">        ground:[],</div><div class="line">        snake:[],</div><div class="line">            food:[],</div><div class="line">            modalHidden: <span class="literal">true</span>,</div><div class="line">            direction:<span class="string">''</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">this</span>.onLoad();</div><div class="line">    &#125;,</div></pre></td></tr></table></figure><p>我发现一个问题，就是在<code>changeLeft</code>中（或者其他change direction），会<code>checkGame</code>，如果贪吃蛇触壁或者碰到自己的身体，那就会设置<code>modalHidden</code>值为<code>false</code>然后，因为每个<code>this.setData</code>发送都会重新渲染视图层，然后将会触发弹出框，这个弹出框的确认也会触发一个事件，<code>modalchange</code>重置。这里就有一个问题了，这一些列都是从<code>changeleft</code>的<code>checkGame</code>步骤分叉出来的，那如果重置了之后，<code>changeleft</code>中的<code>this.setData</code>还执不执行了，因为重置这一步也会执行<code>this.setData</code>，那到底是设置了哪个数据？</p><p>从结果来看，如果贪吃蛇死了，触发重置，那么<code>changeleft</code>里面的<code>this.setData</code>就不会执行了，不然，<code>ground</code>和<code>snake</code>就不是初始值了。</p><p>然后我看到了<code>modalchange</code>中有<code>this.onLoad()</code>，猜测原因应该在这里，就是重新开始服务线程。这时候一切都被销毁，重新开始，自然<code>changeleft</code>中的<code>this.setData</code>也不会再执行了。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li>期间调试一个<code>changebottom</code>的bug，发现怎么也没有进去这个函数，结果发现在这个定义的下面还定义了同名的函数，那个里面什么还没写，估计是之前放在哪里搭的框架。<strong>结论：如果有同名函数，则默认是选择最新的那个，也就是最下面的那个</strong>。</li></ol><h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><p>##移动轨迹渲染</p><ul><li><code>changeleft</code>中<br>发现贪吃蛇在往左移动的时候，把移动轨迹都当作身体渲染出来了。</li></ul><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-16%20at%201.01.23%20AM.png" alt="errorbodymove"></p><p>原因：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</div><div class="line">  arr[i] = arr[i+<span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>for</code>循环里面把<code>i</code>从1开始了，应该从0开始。从1开始导致arr[0]没有被覆盖</p><h2 id="死了的时候，蛇头“位移”"><a href="#死了的时候，蛇头“位移”" class="headerlink" title="死了的时候，蛇头“位移”"></a>死了的时候，蛇头“位移”</h2><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-17%20at%201.16.27%20PM.png" alt="errorplace"></p><p>可以看到背后蛇头触到最右边的时候应该死了，但是蛇头却在下一行的最左边显示了一块，然后第1列整体往下挪了。最后一行由独立的一块。</p><p><a href="http://blog.csdn.net/bright789/article/details/54709594" target="_blank" rel="external">单步调试</a>后发现，在<code>changeleft</code>等这些函数中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"> <span class="keyword">var</span> x = snakeHead[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> y = snakeHead[<span class="number">1</span>]+<span class="number">1</span>;</div><div class="line">    arr[len<span class="number">-1</span>] = [x,y];</div><div class="line">    <span class="comment">//var check = this.checkGame(arr);</span></div><div class="line"><span class="keyword">this</span>.checkGame(arr);</div><div class="line">    <span class="comment">//if(check)&#123;</span></div><div class="line">    ground[x][y] = <span class="number">1</span>;</div><div class="line">    <span class="comment">//&#125;</span></div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      snake:arr,</div><div class="line">      ground:ground</div><div class="line">    &#125;)</div><div class="line">...</div></pre></td></tr></table></figure><p>当<code>this.checkGame(arr)</code>做了之后，在<code>checkGame</code>函数中，当贪吃蛇死了之后，只是把<code>modalHidden</code>设为<code>false</code>了，但是这个<code>this.setData</code>没有让视图层重新渲染，不知道为什么？？？应该这里就弹出游戏结束的框了，但是没有，而是返回到<code>change*</code>函数内，继续做<code>ground[x][y]=1</code>，然后往下继续，因为已经触到最右边，此时<code>y=22</code>，是22，不是21，21是这一行的最后一块，还没出界，22出界。但是因为在<code>checkGame</code>中没有弹出结束框，所以<code>ground</code>中有第22列了，然后在<code>snake.wxml</code>中，是根据<code></code>，然后两个嵌套循环来打印出这个操场，然后这个操场的每一个块又是由<code>snake.wxss</code>来控制，因为规定了每行就是22个，这是因为660/30 = 22，决定的，也是cols=22，定义的，然后上面的<code>y=22</code>，其实是第23块，从0开始。那这时候,一行放不下，就放到下一行去了，那本来第二行还换不换行？</p><p>做了一个实验，数据量小一点。</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-07-17%20at%202.55.49%20PM.png" alt="test"></p><p>可以看到没有换行</p><h1 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h1>]]></content>
    
    <summary type="html">
    
      以微信贪吃蛇小程序为例，入门小程序
    
    </summary>
    
      <category term="wechat" scheme="http://www.mmmmmcclxxvii.cn/categories/wechat/"/>
    
    
      <category term="javascript" scheme="http://www.mmmmmcclxxvii.cn/tags/javascript/"/>
    
      <category term="html" scheme="http://www.mmmmmcclxxvii.cn/tags/html/"/>
    
      <category term="css" scheme="http://www.mmmmmcclxxvii.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Javascript detail record</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/07/09/js-piece/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/07/09/js-piece/</id>
    <published>2017-07-09T02:22:44.000Z</published>
    <updated>2017-07-11T07:57:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>#Web的集成开发环境:</p><ol><li><a href="https://jsfiddle.net/" target="_blank" rel="external">jsfiddle</a></li><li><a href="https://thimble.webmaker.org/" target="_blank" rel="external">Thimble</a></li><li><a href="http://jsbin.com/" target="_blank" rel="external">jsbin</a></li></ol><hr><h1 id="BugFix"><a href="#BugFix" class="headerlink" title="BugFix"></a>BugFix</h1><ol><li><code>&lt;script&gt;</code>元素要放所有的标签的后面，也就是最后。<br>今天的一个bug问题就出现在这里<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var myButton = document.querySelector(&apos;button&apos;);</div><div class="line">var myHeading = document.querySelector(&apos;h1&apos;);</div><div class="line"></div><div class="line">function setUserName() &#123;</div><div class="line">    var myName = prompt(&apos;Please enter your name.&apos;);</div><div class="line">    localStorage.setItem(&apos;name&apos;, myName);</div><div class="line">    myHeading.innerHTML = &apos;Mozilla is cool, &apos; + myName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if(!localStorage.getItem(&apos;name&apos;)) &#123;</div><div class="line">    setUserName();</div><div class="line">&#125; else &#123;</div><div class="line">    var storedName = localStorage.getItem(&apos;name&apos;);</div><div class="line">    myHeading.innerHTML = &apos;Mozilla is cool, &apos; + storedName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">myButton.onclick = function() &#123;</div><div class="line">    setUserName();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>html里面是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">   &lt;script src=&quot;scripts/main.js&quot;&gt;&lt;/script&gt;</div><div class="line">   &lt;button&gt;Change user&lt;/button&gt;</div><div class="line">...</div></pre></td></tr></table></figure></p><p>在页面中点击change user的按钮一直没有反应，打开console看到报错原因是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Uncaught TypeError: Cannot set property &apos;onclick&apos; of null</div><div class="line">    at main.js:45</div></pre></td></tr></table></figure></p><p><code>null</code>说明<code>myButton</code>是空的，没有读取到，然后在html中将<code>&lt;button&gt;``&lt;scirpt&gt;</code>标签调换一下就可以了。</p><blockquote><p><code>&lt;script&gt;</code>元素放在 HTML 文件底部的原因是，浏览器解析 HTML 似乎按照代码出现的顺序来的。如果 JavaScript被首先读取，它也应该影响下面的 HTML，但有时会出现问题，因为 JavaScript 会在 HTML 之前被加载，如果 JavaScript 代码出现问题则 HTML 不会被加载。所以将 JavaScript 代码放在底部是最好的选择。</p></blockquote>]]></content>
    
    <summary type="html">
    
      记录javascript的注意点。
    
    </summary>
    
      <category term="javascript" scheme="http://www.mmmmmcclxxvii.cn/categories/javascript/"/>
    
    
      <category term="javascript-piece，html" scheme="http://www.mmmmmcclxxvii.cn/tags/javascript-piece%EF%BC%8Chtml/"/>
    
  </entry>
  
  <entry>
    <title>比特币- 资料整理（2）</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/21/inside-money-2/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/21/inside-money-2/</id>
    <published>2017-06-21T09:12:11.000Z</published>
    <updated>2017-07-29T14:16:01.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://www.wanbizu.com/xinbi/201409012089.html" target="_blank" rel="external">BITUSD（BTU）是如何取代美元的？</a></li></ul><p>-[] 由于美元占据全球交易规模的一半以上，美元的弱势资本开始流向新兴市场导致了新兴市场经济的繁荣，新兴市场的繁荣意味着贸易顺差，贸易顺差意味着赚取更多美元。?</p><blockquote><p>贸易顺差是指在特定年度一国出口贸易总额大于进口贸易总额，又称“ 出超 ”。贸易顺差就是在一定的单位时间里(通常按年度计算)，贸易的双方互相买卖各种货物，互相进口与出口，甲方的出口金额大过乙方的出口金额，或甲方的进口金额少于乙方的进口金额，其中的差额，对甲方来说，就叫作贸易顺差，反之，对乙方来说，就叫作贸易逆差。贸易顺差越多并不一定好，过高的贸易顺差是一件危险的事情，意味着经济的增长对外依存度过高。</p><p>经常项目贸易顺差主要源于净出口的增加，是中国对外贸易、特别是出口迅速增加的结果，净出口增加使得国内总需求扩张，国内总需求扩张促进了国民经济增长。</p></blockquote><p>-[] 从77年牙买加货币体系创立起，80年拉美金融危机，94年墨西哥金融危机，97亚洲金融危机，08年全球金融危机，都伴随着美元的升值。金融危机和美元的升值有什么关系</p><p>什么是BTU呢，BTU是一个概念，其内涵是1美元等于多少BTS。</p><p>　　BTS /USD BTU/ BTS</p><p>　　10 0.1 (0.1BTS等于1美元)</p><p>　　假如1BTS在市场上涨到10美元 ，这时候BTU的标价就是0.1BTS.有人也许会问如下这种情况</p><p>　　BTS/USD BTU/BTS</p><p>　　10 0.2</p><p>　　当然在初期这种偏离是存在的，但随着市场深度的加深这种偏离就被纠正了。否则市场深度也不可能上升。假设BTS价格持续上涨到100美元，BTU的价格就跌到0.01BTS, 我作为多头在0.1买进，结果跌到了0.01，损失了99%这不是要跳楼吗?不用担心，0.01BTS 还是等于1美元啊，</p><p>　　BTS /USD BTU/ BTS</p><p>　　100 0.01 (0.01BTS还是等于1美元)</p><p>　　作为多头的我放弃BTS的汇率变化而持有BTU, 不管BTU的价格如何变化，我如果把他当做美元来交换的话是没有变化的。</p><p>　　损失了BTS的收益，获得了BTU的稳定性。从而开展正常的贸易。作为空头的小马虽然把BTS质押出去了，但随着BTS的飙升，BTU的暴跌，他可以换回更多的BTS, 因此小马可以看做一名投机客而非贸易商。这时候还会出现一种线下的交易BTU和美元之间的兑换业务。基于BITUSD模式我们还可以展开更多遐想，例如BITUSD彻底取代USD的可能性，莫非第三次货币体系变革就要开始了吗?</p><ul><li><a href="http://www.wanbizu.com/xinbi/201408312064.html" target="_blank" rel="external">浅显易懂看锚定的充要条件与承兑商风险</a><br>-</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wanbizu.com/xinbi/201409012089.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BITUSD（BTU）是如何取代美元的？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-[] 
      
    
    </summary>
    
      <category term="blockchain" scheme="http://www.mmmmmcclxxvii.cn/categories/blockchain/"/>
    
    
      <category term="bitcoin" scheme="http://www.mmmmmcclxxvii.cn/tags/bitcoin/"/>
    
      <category term="money" scheme="http://www.mmmmmcclxxvii.cn/tags/money/"/>
    
  </entry>
  
  <entry>
    <title>PBFT算法理解</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/18/pbft/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/18/pbft/</id>
    <published>2017-06-18T13:09:59.000Z</published>
    <updated>2017-06-20T11:59:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：</p><ul><li><a href="http://bitkan.com/news/topic/21120" target="_blank" rel="external">超级账本PBFT（拜占庭容错）算法详解</a></li></ul><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-18%20at%209.11.30%20PM.png" alt="rough workflow"></p><p>Q: 为什么是f+1<br>A：一方面，一个极端，因为拜占庭错误节点最多f个，当我有f+1个一致的结果，这f+1个没有一个是错误的节点，那么不管总数多少，即使我还有f个错误的，因为最多f个，但我已经有f+1个一致的结果了，f+1&gt;f，所以作恶失败。另一个极端，f+1中有f个错误的节点。<strong>因为结果都一样！！</strong>，而最多是有f个replicas出现问题，所以至少有一个replicas是正确的，就是这个+1,而结果一致，说明这些结果都是正确的。f+1就是能保证了收到的结果是正确的。</p><hr><blockquote><p>紧接着prepare阶段，当一个replica节点发现有一个quorum同意编号分配时，它就会广播一条COMMIT信息给其它所有节点告诉他们它有一个prepared certificate了。与此同时它也会陆续收到来自其它节点的COMMIT信息，如果它收到了2f+1条COMMIT（包括自身的一条，这些来自不同节点的COMMIT携带相同的编号n和view v）</p></blockquote><p>Q: 这里为什么是2f+1条commit<br>A: 最多容错n-1/3个(令等于f)，n=3f+1,然后减掉f个错误的，2f+1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bitkan.com/news/topic/21120&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;超级账本PBFT（拜占庭容错）算法详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img
      
    
    </summary>
    
      <category term="blockchain" scheme="http://www.mmmmmcclxxvii.cn/categories/blockchain/"/>
    
    
      <category term="algorithm" scheme="http://www.mmmmmcclxxvii.cn/tags/algorithm/"/>
    
      <category term="blockchain" scheme="http://www.mmmmmcclxxvii.cn/tags/blockchain/"/>
    
      <category term="fabric" scheme="http://www.mmmmmcclxxvii.cn/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>hadoop 相关数据的规约mapreduce程序 in python</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/09/mtjoin/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/09/mtjoin/</id>
    <published>2017-06-09T05:07:57.000Z</published>
    <updated>2017-06-09T06:02:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">chans   = [<span class="string">'ABC'</span>,<span class="string">'DEF'</span>,<span class="string">'CNO'</span>,<span class="string">'NOX'</span>,<span class="string">'YES'</span>,<span class="string">'CAB'</span>,<span class="string">'BAT'</span>,<span class="string">'MAN'</span>,<span class="string">'ZOO'</span>,<span class="string">'XYZ'</span>,<span class="string">'BOB'</span>]</div><div class="line">sh1 =[<span class="string">'Hot'</span>,<span class="string">'Almost'</span>,<span class="string">'Hourly'</span>,<span class="string">'PostModern'</span>,<span class="string">'Baked'</span>,<span class="string">'Dumb'</span>,<span class="string">'Cold'</span>,<span class="string">'Surreal'</span>,<span class="string">'Loud'</span>]</div><div class="line">sh2 =[<span class="string">'News'</span>,<span class="string">'Show'</span>,<span class="string">'Cooking'</span>,<span class="string">'Sports'</span>,<span class="string">'Games'</span>,<span class="string">'Talking'</span>,<span class="string">'Talking'</span>]</div><div class="line">vwr =range(<span class="number">17</span>,<span class="number">1053</span>)</div><div class="line"></div><div class="line">chvnm=sys.argv[<span class="number">1</span>]  <span class="comment">#get number argument, if its n, do numbers not channels,</span></div><div class="line"></div><div class="line">lch=len(chans)</div><div class="line">lsh1=len(sh1)</div><div class="line">lsh2=len(sh2)</div><div class="line">lvwr=len(vwr)</div><div class="line">ci=<span class="number">1</span></div><div class="line">s1=<span class="number">2</span></div><div class="line">s2=<span class="number">3</span></div><div class="line">vwi=<span class="number">4</span></div><div class="line">ri=int(sys.argv[<span class="number">3</span>])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,int(sys.argv[<span class="number">2</span>])):  <span class="comment">#arg 2 is the number of lines to output</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> chvnm==<span class="string">'n'</span>:  <span class="comment">#no numuber</span></div><div class="line">        print(<span class="string">'&#123;0&#125;_&#123;1&#125;,&#123;2&#125;'</span>.format(sh1[s1],sh2[s2],chans[ci]))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'&#123;0&#125;_&#123;1&#125;,&#123;2&#125;'</span>.format(sh1[s1],sh2[s2],vwr[vwi]))</div><div class="line">    ci=(<span class="number">5</span>*ci+ri) % lch</div><div class="line">    s1=(<span class="number">4</span>*s1+ri) % lsh1</div><div class="line">    s2=(<span class="number">3</span>*s1+ri+i) % lsh2</div><div class="line">    vwi=(<span class="number">2</span>*vwi+ri+i) % lvwr</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (vwi==<span class="number">4</span>): vwi=<span class="number">5</span></div></pre></td></tr></table></figure><p>然后执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">python make_join2data.py y 1000 13 &gt; num1.txt</div><div class="line">python make_join2data.py y 2000 17 &gt; num2.txt</div><div class="line">python make_join2data.py y 3000 19 &gt; num3.txt</div><div class="line">python make_join2data.py n 100  23 &gt; chan1.txt</div><div class="line">python make_join2data.py n 200  19 &gt; chan2.txt</div><div class="line">python make_join2data.py n 300  37 &gt; chan3.txt</div></pre></td></tr></table></figure></p><p>可以查看数据：<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%201.14.03%20PM.png" alt="dat"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>然后在上面比如<code>Hourly_Talking,922</code>这些表明是有922个观众在观看<code>Hourly_Takling</code>这个节目。<code>Almost_Show,ABC</code>表明是<code>ABC</code>电视台下有<code>Almost_Show</code>这个节目，然后现在要计算<code>ABC</code>电视台的收视情况</p><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>这里主要就是要筛选出<code>ABC</code>电视台</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">pat = re.compile(<span class="string">r'\d+'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    <span class="keyword">if</span> <span class="string">'ABC'</span> <span class="keyword">in</span> line <span class="keyword">or</span> len(pat.findall(line)):</div><div class="line">        <span class="keyword">print</span> <span class="string">'&#123;&#125;\t&#123;&#125;'</span>.format(*(line.strip().split(<span class="string">','</span>)))</div></pre></td></tr></table></figure><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%201.35.54%20PM.png" alt="resu"></p><p>因为观众数的那些还不知道和那些电视台相关，所以这些数据要保留</p><h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">line_count     = <span class="number">0</span>      </div><div class="line">old_key        = <span class="keyword">None</span> </div><div class="line">viewer_count   = <span class="number">0</span>       </div><div class="line">abc_found      = <span class="keyword">False</span>   </div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    line       = line.strip()       </div><div class="line">    key_value  = line.split(<span class="string">'\t'</span>)   </div><div class="line">    key        = key_value[<span class="number">0</span>]       </div><div class="line">    value      = key_value[<span class="number">1</span>]       </div><div class="line"></div><div class="line">    line_count = line_count + <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> key == old_key <span class="keyword">or</span> line_count == <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> value == <span class="string">"ABC"</span>:</div><div class="line">            abc_found = <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            viewer_count = viewer_count + int(value)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> key != old_key <span class="keyword">and</span> line_count: <span class="comment">#这是进入下一组了</span></div><div class="line">        <span class="keyword">if</span> abc_found == <span class="keyword">True</span>: <span class="comment">#只有在是ABC的才打印出来</span></div><div class="line">            print( <span class="string">'%s %s'</span> % (old_key, viewer_count) )</div><div class="line">        old_key      = key  <span class="comment">#下一个</span></div><div class="line">        <span class="keyword">if</span> value.isdigit():</div><div class="line">            viewer_count = int(value)</div><div class="line">        abc_found    = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'%s %s'</span> % (key, viewer_count)</div></pre></td></tr></table></figure><p>在reduce阶段的时候，shuffle已sort了，<code>&lt;key,value&gt;</code>的value要么是’ABC’，要么是数字，如果是数字的话累加，而且，因为是sort过的，然后一定是这样的形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d,12</div><div class="line">d,23</div><div class="line">d,abc</div></pre></td></tr></table></figure></p><p><strong>所以相关的点就在<code>key</code>都是<code>d</code>的value累加完后，势必会读到<code>d</code>的value是哪个电视台的，如果是’ABC’的话，就可以输出了。</strong></p><h1 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%201.54.54%20PM.png" alt="local test"></p><h1 id="hadoop-集群测试"><a href="#hadoop-集群测试" class="headerlink" title="hadoop 集群测试"></a>hadoop 集群测试</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%202.00.15%20PM.png" alt="1"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%202.00.30%20PM.png" alt="2"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%202.01.47%20PM.png" alt="3"></p><p>与本地测试的结果一样</p>]]></content>
    
    <summary type="html">
    
      一个电视台有多个节目，一个节目有收看的观众，那电视台的有多少观众？
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.mmmmmcclxxvii.cn/tags/mapreduce/"/>
    
  </entry>
  
  <entry>
    <title>hadoop mapreduce -- 数据去重(python)</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/09/dedup/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/09/dedup/</id>
    <published>2017-06-09T00:05:32.000Z</published>
    <updated>2017-06-09T05:07:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>就用mapreduce的思想来将重复的数据剔除</p><h1 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h1><p>自己随便弄<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.18.29%20AM.png" alt="testfile1"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.18.37%20AM.png" alt="testfile2"></p><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    line = line.strip()</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"&#123;0&#125;\t&#123;1&#125;"</span>.format(line,<span class="number">1</span>)</div></pre></td></tr></table></figure><p>这个比wordcount程序简单多了。其实在这个例子中，<code>&lt;key,value&gt;</code>的value没有什么用，最后不用输出。</p><h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">last_key = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    this_key = line.split(<span class="string">'\t'</span>)[<span class="number">0</span>].strip()</div><div class="line">    <span class="keyword">if</span> this_key == last_key:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> last_key:</div><div class="line">            <span class="comment">#print this_key #错误！！！</span></div><div class="line">            <span class="keyword">print</span> last_key <span class="comment">#this_key每一轮都更新，当不一样了的时候，要将上一轮的key输出</span></div><div class="line">        last_key = this_key</div><div class="line"><span class="keyword">print</span> this_key</div></pre></td></tr></table></figure><p>在<code>this_key == last_key</code>条件满足的时候，跟wordcount不一样的是，这里什么都不用做，比较wordcount程序这里是要累加的。但其实reduce这一步只要将相同的输出一个就行了。</p><h1 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h1><p>命令: <code>python mapper.py &lt; testfile* | sort | python reducer.py</code><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.51.38%20AM.png" alt="localtest"></p><h1 id="hadoop测试"><a href="#hadoop测试" class="headerlink" title="hadoop测试"></a>hadoop测试</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.58.26%20AM.png" alt="ha"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.58.40%20AM.png" alt="doop"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%208.58.17%20AM.png" alt="result"></p><p>看到结果也是一样的。</p><h1 id="combine"><a href="#combine" class="headerlink" title="combine"></a>combine</h1><p>上面结果中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Combine input records=0</div><div class="line">Combine output records=0</div></pre></td></tr></table></figure></p><p>了解了一下combine的过程，我一开始疑惑combine到底在哪个阶段，他的输入是什么（输入的是sort前还是sort后），是在哪个节点运行的。</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/35195101/which-runs-first-combiner-or-partitioner-in-a-mapreduce-job" target="_blank" rel="external">Which runs first, Combiner or Partitioner in a MapReduce Job</a></li></ul><p>-[] combine阶段在shuffle阶段之前，因为shuffle阶段做的是copy和sort，那么表示的就是combine阶段的时候是没有sort过的数据输入。这很重要。如果是sort过的话的，那么combine的程序就跟reducer的程序一样。只是在单个节点上，可以看作预处理的reduce。那在旧的mapreduce架构shuflle在jobtracker上运行，combine在tasktracker上执行。那在YARN架构下，combine应该在nodemanager，shuffle在resourcemanager。[Todo] 不确定</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%209.29.39%20AM.png" alt="combine"></p><p><strong>combine只是处理一个节点中的输出，而不能享受像reduce一样的输入（经过了shuffle阶段的数据）,这个非常关键</strong></p><h2 id="实验combine带来的优化能力"><a href="#实验combine带来的优化能力" class="headerlink" title="实验combine带来的优化能力"></a>实验combine带来的优化能力</h2><p>先用wordcount测试，词频统计是一个可以展示combine用处的例子。词频统计程序为每一个它看到的词生成了一个（word，1）键值对。所以如果在同一个文档内“cat”出现了3次，（”cat”，1）键值对会被生成3次，这些键值对会被送到Reducer那里。通过使用Combiner，这些键值对可以被压缩为一个送往Reducer的键值对（”cat”，3）。现在每一个节点针对每一个词只会发送一个值到reducer，大大减少了shuffle过程所需要的带宽并加速了作业的执行。</p><h3 id="测试数据-1"><a href="#测试数据-1" class="headerlink" title="测试数据"></a>测试数据</h3><p>网上下载了两个英文小说<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%209.54.51%20AM.png" alt="entxt"></p><p>一个是165k，另一个是446k</p><hr><p><strong>不使用 combine ：</strong></p><p>命令: <code>hadoop jar ../../hadoop-2.8.0/share/hadoop/tools/lib/hadoop-streaming-2.8.0.jar -input file:///Users/Crayon_277/Develop/Project/hadoop/mapreduce-program/wordcount/f*.txt -output file:///Users/Crayon_277/Develop/Project/hadoop/mapreduce-program/wordcount/output -mapper mapper.py -reducer reducer.py</code></p><p>结果：<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%209.54.20%20AM.png" alt="result"></p><p>可以看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GC time elapsed (ms)=4</div><div class="line">Total committed heap usage (bytes)=1160773632</div></pre></td></tr></table></figure></p><hr><p><strong>使用了combine: </strong></p><p>命令：<code>hadoop jar ../../hadoop-2.8.0/share/hadoop/tools/lib/hadoop-streaming-2.8.0.jar -input file:///Users/Crayon_277/Develop/Project/hadoop/mapreduce-program/wordcount/f*.txt -output file:///Users/Crayon_277/Develop/Project/hadoop/mapreduce-program/wordcount/output -mapper mapper.py -reducer reducer.py -combiner reducer.py</code></p><p>combine的程序用回reducer.py的程序</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%2010.06.01%20AM.png" alt="usecombine"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GC time elapsed (ms)=3</div><div class="line">Total committed heap usage (bytes)=1159200768</div></pre></td></tr></table></figure><hr><p>可以对比出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GC time elapsed (ms)=4</div><div class="line">Total committed heap usage (bytes)=1160773632</div><div class="line"></div><div class="line">GC time elapsed (ms)=3</div><div class="line">Total committed heap usage (bytes)=1159200768</div></pre></td></tr></table></figure></p><p>是有优化的。时间上效率也有提升。</p><h2 id="combine不是所有的情景都适合"><a href="#combine不是所有的情景都适合" class="headerlink" title="combine不是所有的情景都适合"></a>combine不是所有的情景都适合</h2><p>combiner操作是有风险的，使用它的原则是combiner的输入不会影响到reduce计算的最终输入，例如：如果计算只是求总数，最大值，最小值可以使用combiner，但是做平均值计算使用combiner的话，最终的reduce计算结果就会出错。</p><h1 id="数据去重的例子中使用combine"><a href="#数据去重的例子中使用combine" class="headerlink" title="数据去重的例子中使用combine"></a>数据去重的例子中使用combine</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">s = set() <span class="comment">#集合</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    s.add(line.strip().split(<span class="string">'\t'</span>)[<span class="number">0</span>]) <span class="comment">#取&lt;key,value&gt;中的value</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:</div><div class="line">    <span class="keyword">print</span> <span class="string">"&#123;0&#125;\t&#123;1&#125;"</span>.format(item,<span class="number">0</span>) <span class="comment"># 0其实没有什么意义</span></div></pre></td></tr></table></figure><p>我预想的是这个在每个节点上将map输出的东西，先筛选一遍，就是用集合的方法，然后再输出，但是！！</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-09%20at%2010.55.19%20AM.png" alt="wrong"></p><p>结果有点问题，用的时间也多了</p><p>[Todo]不知道为啥？combine的输出格式也和map阶段的一样，但错误。</p><p>从结果上看，还有重复的数据，反推，说明有数据没有被sort到一起，因为从打印结果看到，相同的中间隔着一些，但是在reduce的程序，可以看出，如果是收集在一起的数据是只会打印一个的，说明shuffle没有起作用？？</p>]]></content>
    
    <summary type="html">
    
      打个比方，桌上有10个苹果，之前的编程思想是从上往下看，mapreduce的编程思想是贴着桌面，平行透视的看。combiner阶段也是可以用于这个场景的。而且combiner是在每个运行map任务的节点上运行。是一个迷你的reduce过程
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.mmmmmcclxxvii.cn/tags/mapreduce/"/>
    
  </entry>
  
  <entry>
    <title>hadoop wordcount in python</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/08/wordcount/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/08/wordcount/</id>
    <published>2017-06-08T14:28:34.000Z</published>
    <updated>2017-06-08T22:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为不会java，暂时用自己熟悉的python来写mapreduce程序放在hadoop上跑。mapreduce只是一个编程思想，不局限于语言。</p><hr><h1 id="hadoop-streaming"><a href="#hadoop-streaming" class="headerlink" title="hadoop streaming"></a>hadoop streaming</h1><blockquote><p>both the mapper and the reducer are executables that read the input from stdin (line by line) and emit the output to stdout. The utility will create a Map/Reduce job, submit the job to an appropriate cluster, and monitor the progress of the job until it completes.</p></blockquote><p>官网的解释，也就是说，这个可执行文件或脚本里面，只要从stdin标准输入读入数据，然后进行内部的分词处理，输出到stdout，就行了，streaming会创建mapreduce的作业，发送给各个tasktracker，同时监控整个作业的执行过程。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hadoop jar hadoop-streaming-2.8.0.jar \</div><div class="line">  -input myInputDirs \</div><div class="line">  -output myOutputDir \</div><div class="line">  -mapper /bin/cat \</div><div class="line">  -reducer /usr/bin/wc</div></pre></td></tr></table></figure><p>官网给出的，但在机子上首先需要找到hadoop-streaming的jar文件，路径跟官网的不一样。</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2011.09.41%20PM.png" alt="streaming"><br>我的路径是：<code>./share/hadoop/tools/lib/hadoop-streaming-2.8.0.jar</code></p><h1 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2010.47.18%20PM.png" alt="data"></p><h1 id="map阶段："><a href="#map阶段：" class="headerlink" title="map阶段："></a>map阶段：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">    line = line.strip()</div><div class="line">    keys = line.split()</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys:</div><div class="line">        value = <span class="number">1</span></div><div class="line">        print(<span class="string">'&#123;0&#125;\t&#123;1&#125;'</span>.format(key,value))</div></pre></td></tr></table></figure><p>python从stdin标准输入中读取每行数据, 然后将词切分，然后输入格式为<code>&lt;key,value&gt;</code>的形式，因为在map阶段，value都是1</p><p>本地测试结果：</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2010.52.19%20PM.png" alt="test-map"></p><h1 id="reduce阶段："><a href="#reduce阶段：" class="headerlink" title="reduce阶段："></a>reduce阶段：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">last_key = <span class="keyword">None</span></div><div class="line">running_total = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> input_line <span class="keyword">in</span> sys.stdin:</div><div class="line">    input_line = input_line.strip()</div><div class="line"></div><div class="line">    this_key, value = input_line.split(<span class="string">"\t"</span>,<span class="number">1</span>)</div><div class="line">    value = int(value)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> last_key == this_key:</div><div class="line">        running_total += value</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> last_key: <span class="comment">#进入新的一组会进入这条语句，last_key初始是None，一开始不会打印</span></div><div class="line">            print(<span class="string">"&#123;0&#125;\t&#123;1&#125;"</span>.format(last_key,running_total))</div><div class="line"></div><div class="line">        running_total = value</div><div class="line">        last_key = this_key</div><div class="line"></div><div class="line"><span class="keyword">if</span> last_key == this_key: <span class="comment">#最后一组输出</span></div><div class="line">    print(<span class="string">"&#123;0&#125;\t&#123;1&#125;"</span>.format(last_key,running_total))</div></pre></td></tr></table></figure><p>本地测试：<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2010.56.42%20PM.png" alt="test-reduce"></p><p>有问题！怎么没有把相同的归在一起，其实这个程序如果按照map的输出当作输入执行结果就是这样的。因为<code>last_key</code>和<code>this_key</code>不停在变，因为map的输出哪怕没有两行是相同的key。那其实这里就涉及mapreduce的机制了，map阶段完成由输入数据到单词切分的工作，还有<strong><code>shuffle</code></strong>阶段，这个阶段完成相同的单词的聚集和分发工作，<strong>这个过程是mapreduce的默认过程，不用具体配置</strong>,也就是map和reduce的中间环节会把相同的给收集起来再进行reduce，如果在本地测试应该是这样的：</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2011.03.25%20PM.png" alt="test_reduce2"></p><p>用<code>sort</code>命令将相同的放在了一起，就模拟了把相同单词的聚集工作。</p><ul><li>[] ？有个疑问就是：相同的单词聚集在一起是分发给一个节点么，也就是不同节点计算着不同的单词，可能有节点计算好几个不同的单词，但问题是，是不是一个相同的所有单词都是在一个节点上reduce，如果不是，因为相同的单词被分了几份reduce了，那岂不是还要再reduce，总归要合并的，那这步在哪个节点上，由谁控制？</li></ul><h1 id="hadoop-上测试"><a href="#hadoop-上测试" class="headerlink" title="hadoop 上测试"></a>hadoop 上测试</h1><p>用<code>file:///</code>放在本地看</p><p><code>hadoop jar ../hadoop-2.8.0/share/hadoop/tools/lib/hadoop-streaming-2.8.0.jar -input file:///Users/Crayon_277/Develop/Project/hadoop/wordcount/testfile* -output file:///Users/Crayon_277/Develop/Project/hadoop/wordcount/output2 -mapper mapper.py -reducer reducer.py</code></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2011.19.07%20PM.png" alt="1"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2011.21.23%20PM.png" alt="2"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-08%20at%2011.21.37%20PM.png" alt="3"></p><p>注：以上在伪分布集群下测试的。</p><h2 id="mapreduce-framework"><a href="#mapreduce-framework" class="headerlink" title="mapreduce framework"></a>mapreduce framework</h2><p>运行hadoop程序给出的INFO，可以看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Map-Reduce Framework</div><div class="line">Map input records=2</div><div class="line">Map output records=16</div><div class="line">Map output bytes=109</div><div class="line">Map output materialized bytes=153</div><div class="line">Input split bytes=234</div><div class="line">Combine input records=0</div><div class="line">Combine output records=0</div><div class="line">Reduce input groups=12</div><div class="line">Reduce shuffle bytes=153</div><div class="line">Reduce input records=16</div><div class="line">Reduce output records=12</div><div class="line">Spilled Records=32</div><div class="line">Shuffled Maps =2</div><div class="line">Failed Shuffles=0</div><div class="line">Merged Map outputs=2</div><div class="line">GC time elapsed (ms)=0</div><div class="line">Total committed heap usage (bytes)=1160773632</div></pre></td></tr></table></figure></p><p><code>Map input records=2</code> 这是说明有两个文件输入<br><code>Map output records=16</code>数了一下<code>mapper.py</code>程序的输出，就是16个<br>然后可以看到<code>Reduce input groups=12</code>应该就是说明了<code>shuffle</code>的工作收集相同的单词，但<code>Reduce input records=16</code>这个16应该指的的总的还是16个，不是按<strong>单词组</strong>来看。<br><code>Shuffled Maps=2</code> 我本来觉得是代表了有2种单词是有相同的，收集在一起了。但不是，因为其实在这个案例上是有4种是单词是有重复的。[Todo]</p><p>贴个流程图：</p><p><img src="https://i.stack.imgur.com/ToZS9.png" alt="mapreduceprogram"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实应该有5个阶段：</p><ul><li><p>map phase</p><blockquote><p>The map phase is done by mappers. Mappers run on unsorted input key/values pairs. Each mapper emits zero, one, or multiple output key/value pairs for each input key/value pairs.</p></blockquote></li><li><p>combine phase</p><blockquote><p>The combine phase is done by combiners. The combiner should combine key/value pairs with the same key. Each combiner may run zero, once, or multiple times.</p></blockquote></li><li><p>shuffle and sort phase</p><blockquote><p>The shuffle and sort phase is done by the framework. Data from all mappers are grouped by the key, split among reducers and sorted by the key. Each reducer obtains all values associated with the same key. The programmer may supply custom compare functions for sorting and a partitioner for data split.</p></blockquote></li><li><p>partitioner</p><blockquote><p>The partitioner decides which reducer will get a particular key value pair.</p></blockquote></li><li><p>reducer</p><blockquote><p>The reducer obtains sorted key/[values list] pairs, sorted by the key. The value list contains all values with the same key produced by mappers. Each reducer emits zero, one or multiple output key/value pairs for each input key/value pair.<br>参考：<br><a href="https://stackoverflow.com/questions/22141631/what-is-the-purpose-of-shuffling-and-sorting-phase-in-the-reducer-in-map-reduce" target="_blank" rel="external">What is the purpose of shuffling and sorting phase in the reducer in Map Reduce Programming?</a></p></blockquote></li></ul><p>因为combiner操作是有风险的，使用它的原则是combiner的输入不会影响到reduce计算的最终输入，例如：如果计算只是求总数，最大值，最小值可以使用combiner，但是做平均值计算使用combiner的话，最终的reduce计算结果就会出错。这个例子统计词频，同样也不能combine，因为会遗失数据了。</p>]]></content>
    
    <summary type="html">
    
      Hadoop Streaming是Hadoop提供的一个编程工具，它允许用户使用任何可执行文件或者脚本文件作为Mapper和Reducer
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.mmmmmcclxxvii.cn/tags/mapreduce/"/>
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>shell （一）</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/05/shell/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/05/shell/</id>
    <published>2017-06-05T07:00:53.000Z</published>
    <updated>2017-06-05T07:53:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><p><a href="http://blog.csdn.net/solomon1558/article/details/51763751" target="_blank" rel="external">Linux的环境变量.bash_profile .bashrc profile文件</a></p></li><li><p><a href="https://stackoverflow.com/questions/415403/whats-the-difference-between-bashrc-bash-profile-and-environment" target="_blank" rel="external">What’s the difference between .bashrc, .bash_profile, and .environment?’</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      /etc/profile, ~/.bash_profile, ~/.bashrc, ~/.profile 都是什么,区别是什么
    
    </summary>
    
      <category term="linux" scheme="http://www.mmmmmcclxxvii.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.mmmmmcclxxvii.cn/tags/linux/"/>
    
      <category term="shell" scheme="http://www.mmmmmcclxxvii.cn/tags/shell/"/>
    
      <category term="bash" scheme="http://www.mmmmmcclxxvii.cn/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>重新编译hadoop过程终于到的问题</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/06/02/recompile-hadoop/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/06/02/recompile-hadoop/</id>
    <published>2017-06-02T09:03:42.000Z</published>
    <updated>2017-06-03T08:10:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>在macOS上直接执行命令<code>brew install hadoop</code></p><p>然后执行hadoop命令的时候会出现<br><code>WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</code><br>的警报。这是因为apcche hadoop 官网上下载的源文件是在32为的机器上编译的。所以当64位的机子在加载.so文件的时候会出错。基本上不影响使用hadoop(如果使用mahout做一些机器学习的任务时有可能会遇到麻烦，加载不成功，任务直接退出，所以还是有必要解决掉这个warn的)。</p><a id="more"></a><p>从网上下载的源文件中的<code>BUILDING.txt</code>看到如下的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Requirements:</div><div class="line"></div><div class="line">* Unix System</div><div class="line">* * JDK 1.7+</div><div class="line">* * Maven 3.0 or later</div><div class="line">* * Findbugs 1.3.9 (if running findbugs)</div><div class="line">* * ProtocolBuffer 2.5.0</div><div class="line">* * CMake 2.6 or newer (if compiling native code), must be 3.0 or newer on Mac</div><div class="line">* * Zlib devel (if compiling native code)</div><div class="line">* * openssl devel (if compiling native hadoop-pipes and to get the best HDFS encryption performance)</div><div class="line">* * Linux FUSE (Filesystem in Userspace) version 2.6 or above (if compiling fuse_dfs)</div><div class="line">* * Internet connection for first build (to fetch all Maven and Hadoop dependencies)</div></pre></td></tr></table></figure><hr><h2 id="java-路径问题"><a href="#java-路径问题" class="headerlink" title="java 路径问题"></a>java 路径问题</h2><p>mac 下安装的路径见 <a href="http://blog.csdn.net/azhou_hui/article/details/46636769" target="_blank" rel="external">Mac下jdk的安装路径</a></p><h2 id="protobuf的问题"><a href="#protobuf的问题" class="headerlink" title="protobuf的问题"></a>protobuf的问题</h2><p>因为用<code>brew insatll protobuf</code>命令来安装<code>protobuf</code>版本是最新的，而这里是要求<code>2.5.0</code>，所以要自己手动下载<a href="https://github.com/google/protobuf/releases?after=v3.0.0-alpha-1" target="_blank" rel="external">protobuf2.5</a></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar xfvj tar xfvj protobuf-2.5.0.tar.bz2</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>进入目录后</p><p><code>./configure CC=clang CXX=clang++ CXXFLAGS=&#39;-std=c++11 -stdlib=libc++ -O3 -g&#39; LDFLAGS=&#39;-stdlib=libc++&#39; LIBS=&quot;-lc++ -lc++abi&quot;</code></p><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p><code>make -j 4</code><br><code>sudo make install</code></p><p>完成！</p><h2 id="关于zlib的"><a href="#关于zlib的" class="headerlink" title="关于zlib的"></a>关于zlib的</h2><p>在Linux机子上的话就用各自的包管理工具安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y install svn ncurses-devel gcc*</div><div class="line">yum -y install lzo-devel zlib-devel autoconf automake libtool cmake openssl-devel</div></pre></td></tr></table></figure><p>mac下执行<br><code>xcode-select --install</code>就行了</p><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p>修改安装目录下<code>conf/settings.xml</code>（因为maven使用的国外的reposity，国内有时无法访问，修改为国内镜像即可）<br>修改如下：<br>在<mirrors></mirrors>里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;mirror&gt;</div><div class="line">    &lt;id&gt;nexus-osc&lt;/id&gt;</div><div class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</div><div class="line">&lt;name&gt;Nexusosc&lt;/name&gt;</div><div class="line">&lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class="line">&lt;/mirror&gt;</div></pre></td></tr></table></figure></p><p>上面最终是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;mirrors&gt;</div><div class="line"> &lt;mirror&gt;</div><div class="line">  ...</div><div class="line"> &lt;/mirror&gt;</div><div class="line">&lt;/mirrors&gt;</div></pre></td></tr></table></figure></p><p>同样在<profiles></profiles>内新添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;profile&gt;</div><div class="line">       &lt;id&gt;jdk-1.8&lt;/id&gt;</div><div class="line">       &lt;activation&gt;</div><div class="line">         &lt;jdk&gt;1.8&lt;/jdk&gt;</div><div class="line">       &lt;/activation&gt;</div><div class="line">       &lt;repositories&gt;</div><div class="line">         &lt;repository&gt;</div><div class="line">           &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">           &lt;name&gt;local private nexus&lt;/name&gt;</div><div class="line">           &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class="line">           &lt;releases&gt;</div><div class="line">             &lt;enabled&gt;true&lt;/enabled&gt;</div><div class="line">           &lt;/releases&gt;</div><div class="line">           &lt;snapshots&gt;</div><div class="line">             &lt;enabled&gt;false&lt;/enabled&gt;</div><div class="line">           &lt;/snapshots&gt;</div><div class="line">         &lt;/repository&gt;</div><div class="line">       &lt;/repositories&gt;</div><div class="line">       &lt;pluginRepositories&gt;</div><div class="line">         &lt;pluginRepository&gt;</div><div class="line">           &lt;id&gt;nexus&lt;/id&gt;</div><div class="line">          &lt;name&gt;local private nexus&lt;/name&gt;</div><div class="line">           &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class="line">           &lt;releases&gt;</div><div class="line">             &lt;enabled&gt;true&lt;/enabled&gt;</div><div class="line">           &lt;/releases&gt;</div><div class="line">           &lt;snapshots&gt;</div><div class="line">             &lt;enabled&gt;false&lt;/enabled&gt;</div><div class="line">           &lt;/snapshots&gt;</div><div class="line">         &lt;/pluginRepository&gt;</div><div class="line">       &lt;/pluginRepositories&gt;</div><div class="line">     &lt;/profile&gt;</div></pre></td></tr></table></figure><p>But！！！在我的机子上有问题，还是保持原样就行了。因为后面出现了一个问题，所以以为这里是一个症状，排除法么。但如果有谁是因为镜像下载问题的话，估计是这个的问题。还有这里的国内镜像，<code>maven.oschian.net</code>，【todo】再去找找其他镜像的地址。<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-02%20at%207.16.06%20PM.png" alt="maven"></p><h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">....</div><div class="line">[INFO] Apache Hadoop Auth ................................. SUCCESS [  3.375 s]</div><div class="line">[INFO] Apache Hadoop Auth Examples ........................ SUCCESS [  2.518 s]</div><div class="line">[INFO] Apache Hadoop Common ............................... FAILURE [  4.272 s]</div><div class="line">[INFO] Apache Hadoop NFS .................................. SKIPPED</div><div class="line">[INFO] Apache Hadoop KMS .................................. SKIPPED</div><div class="line">....</div></pre></td></tr></table></figure><p>可以看到 hadoop common 编译失败</p><p>报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[INFO] BUILD FAILURE</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: 21.337 s</div><div class="line">[INFO] Finished at: 2017-06-03T11:20:12+08:00</div><div class="line">[INFO] Final Memory: 73M/725M</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.7:run (make) on project hadoop-common: An Ant BuildException has occured: <span class="built_in">exec</span> returned: 2</div><div class="line">[ERROR] around Ant part ...&lt;<span class="built_in">exec</span> failonerror=<span class="string">"true"</span> dir=<span class="string">"/Users/Crayon_277/Develop/Project/hadoop/hadoop-2.8.0-src/hadoop-common-project/hadoop-common/target/native"</span> executable=<span class="string">"make"</span>&gt;... @ 7:160 <span class="keyword">in</span> /Users/Crayon_277/Develop/Project/hadoop/hadoop-2.8.0-src/hadoop-common-project/hadoop-common/target/antrun/build-main.xml</div><div class="line">[ERROR] -&gt; [Help 1]</div><div class="line">[ERROR]</div><div class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</div><div class="line">[ERROR] Re-run Maven using the -X switch to <span class="built_in">enable</span> full debug logging.</div><div class="line">[ERROR]</div><div class="line">[ERROR] For more information about the errors and possible solutions, please <span class="built_in">read</span> the following articles:</div><div class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</div><div class="line">[ERROR]</div><div class="line">[ERROR] After correcting the problems, you can resume the build with the <span class="built_in">command</span></div><div class="line">[ERROR]   mvn &lt;goals&gt; -rf :hadoop-common</div></pre></td></tr></table></figure><p>链接文章：</p><ul><li><a href="https://stackoverflow.com/questions/19943766/hadoop-unable-to-load-native-hadoop-library-for-your-platform-warning" target="_blank" rel="external">Hadoop “Unable to load native-hadoop library for your platform” warning</a></li><li><a href="http://www.ercoppa.org/posts/how-to-compile-apache-hadoop-on-ubuntu-linux.html" target="_blank" rel="external">Compile Apache Hadoop on Linux (fix warning: Unable to load native-hadoop library)</a><br>-</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在macOS上直接执行命令&lt;code&gt;brew install hadoop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后执行hadoop命令的时候会出现&lt;br&gt;&lt;code&gt;WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable&lt;/code&gt;&lt;br&gt;的警报。这是因为apcche hadoop 官网上下载的源文件是在32为的机器上编译的。所以当64位的机子在加载.so文件的时候会出错。基本上不影响使用hadoop(如果使用mahout做一些机器学习的任务时有可能会遇到麻烦，加载不成功，任务直接退出，所以还是有必要解决掉这个warn的)。&lt;/p&gt;
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>stackoverflow-bitcoin-1</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/05/29/stackoverflow-bitcoin-1/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/05/29/stackoverflow-bitcoin-1/</id>
    <published>2017-05-29T10:31:21.000Z</published>
    <updated>2017-05-29T12:35:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工作量证明机制和权益证明机制有什么区别What’s-the-difference-between-PoW-and-PoS-’"><a href="#工作量证明机制和权益证明机制有什么区别What’s-the-difference-between-PoW-and-PoS-’" class="headerlink" title="工作量证明机制和权益证明机制有什么区别What’s the difference between PoW and PoS?’"></a>工作量证明机制和权益证明机制有什么区别<a href="https://bitcoin.stackexchange.com/questions/43467/whats-the-difference-between-pow-and-pos" target="_blank" rel="external">What’s the difference between PoW and PoS?’</a></h1><p>我正在寻找能够说明工作量证明机制算法和权益证明机制算法的解释，还有他们是如何和比特币还有区块链有联系的。</p><p>也希望有一个非常简单明了没有包含过多技术的回答。可以有一点技术方面的东东，但我不是开发者，我并不知道怎么去编程。</p><p>（）（）</p><hr><p>下面几点简要的概括：</p><ul><li>一个加密货币有它自己的区块链来储存所有出现的交易</li><li>工作量证明机制和权益证明机制是两种不同的算法来获取 哪个区块将会链接到区块链后面 的共识。</li><li><a href="https://en.bitcoin.it/wiki/Proof_of_work" target="_blank" rel="external">工作量证明（PoW）</a>需要某种类型的工作发生的证明。就比特币矿工来说，他们需要在区块被其他接受之前做这个工作。</li><li><a href="https://en.bitcoin.it/wiki/Proof_of_Stake" target="_blank" rel="external">权益证明(PoS)</a> 要求用户拥有相当量的货币（比如拥有许多coins）来决定下一个区块。这有某一方垄断货币的高风险。但是有几种方法可以阻止（通过随机分配利益相关者来共识新区块，其他）</li></ul><p>最主要的区别可以归结于，工作量证明机制需要额外的资源（挖矿设备）但权益证明不需要。如果比特币家里减少，越来越少的人被激励去挖矿，因此会导致整个系统的安全性减少，工作量机制会被苛责（criticized) 。而权益证明机制，因为它是免费来增加新区块到区块链后面的，你可以用它来同事做几个相似的币的权益证明（详见PoS链接中的“nothing at stake”问题）</p><p>例子：</p><ul><li>比特币，莱特币还有其他许多币种使用PoW方法。</li><li>NXT，BitShares还有其他使用PoS方法。</li><li>以太坊使用PoW但是它计划要转到PoS.</li><li>PeerCoin使用PoW和PoS的结合机制。</li></ul>]]></content>
    
    <summary type="html">
    
      学习stackexchange bitcoin板块的别人的惑。
    
    </summary>
    
      <category term="stackoverflow" scheme="http://www.mmmmmcclxxvii.cn/categories/stackoverflow/"/>
    
    
      <category term="bitcoin" scheme="http://www.mmmmmcclxxvii.cn/tags/bitcoin/"/>
    
      <category term="blockchain" scheme="http://www.mmmmmcclxxvii.cn/tags/blockchain/"/>
    
      <category term="stackoverflow" scheme="http://www.mmmmmcclxxvii.cn/tags/stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title>project of stackoverflow - C Piece (一)</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/05/27/stackoverflow-c-piece-1/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/05/27/stackoverflow-c-piece-1/</id>
    <published>2017-05-27T10:55:09.000Z</published>
    <updated>2017-06-03T09:13:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C中的操作符优先级-precedence-of-operator-in-c"><a href="#C中的操作符优先级-precedence-of-operator-in-c" class="headerlink" title="C中的操作符优先级 precedence of operator in c"></a>C中的操作符优先级 <a href="https://stackoverflow.com/questions/25057097/precedence-of-operator-in-c" target="_blank" rel="external">precedence of operator in c</a></h1><p>我是一个变成新手，现在我正在学有关C操作符优先级的部分。我尝试着想要分析下面给出的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">   <span class="keyword">int</span> x, y, z;</div><div class="line">   x = y = z= <span class="number">-1</span>;</div><div class="line">  z = ++x&amp;&amp;++y&amp;&amp;++z;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"x = %d y = %d z = %d"</span>, x, y ,z);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在学了操作符的优先级后，我知道一元操作符(unary operator)有更高的优先级，所以在上面的代码中：<br><code>z = ++0&amp;&amp;++0&amp;&amp;++0;</code><br>所以<code>x</code>,<code>y</code>,<code>z</code>的值是0，对吧？但是编译执行后，结果是<code>x = 0 y = -1 z = 0</code><br>有人能帮我解决这个问题么？</p><hr><p>得票2:</p><p>这个表达式：<br><code>z = ++x&amp;&amp;++y&amp;&amp;++z;</code></p><p>其实和下面这个表达式是等价的：</p><p><code>z = ( ++x &amp;&amp; ++y ) &amp;&amp; ++z;</code></p><p>根据标准C：</p><blockquote><ol><li>和二进制位操作&amp;不一样，&amp;&amp;操作是从左向右结合计算。如果第二个操作数北极算了，那就说明在第一个操作数和第二个操作数之间存在一个<strong>sequence point</strong>。如果第一个操作数比较等于0，那么第二个操作数不会被计算。</li></ol></blockquote><p>所以首先<code>++x</code>被计算。它等于0。所以<code>++y</code>不会被计算。表达式：<br><code>(++x &amp;&amp; ++y)</code><br>结果是0。因为它等于0，所以表达式<code>(++x &amp;&amp; ++y) &amp;&amp; ++z</code>中的子表达式<code>++z</code>不会被计算。<br>所以<code>z</code>会被赋值整个表达式的值，那就是0。</p><p>这里至少没有任何未定义的行为(undefined behaviour) 因为表达式<code>++z</code>不会被计算。</p><p>所以你会得到 x == 0, y == -1, 和 z == 0 （这是因为赋值语句）</p><hr><h1 id="Undefined-behavior-and-sequence-points"><a href="#Undefined-behavior-and-sequence-points" class="headerlink" title="Undefined behavior and sequence points"></a><a href="https://stackoverflow.com/questions/4176328/undefined-behavior-and-sequence-points" target="_blank" rel="external">Undefined behavior and sequence points</a></h1><p>tag: c++ , undefined-behavior, c++.fag, sequence-points</p><p>什么是“序列点”(sequence points)? (不知道这么翻译对不对)<br>未定义行为和序列点的关系是什么？</p><p>我经常使用像<code>a[++i] = i</code>这种有趣却复杂的表达式，我也感觉不错，为什么要停止使用这些呢？</p><p>如果你已经阅读到这里了，确保访问下面的问题<a href="https://stackoverflow.com/questions/4638364" target="_blank" rel="external">Undefined behavior and sequence points reloaded.</a></p><hr><p>556票的回答：</p><p>C++98 和 C++03</p><p>这个回答是准备给C++旧标准的。C++11和C++14标准版本没有正式的包含”[sequence points]”这个说法；运算反而是(sequence before) 或 (unsequenced) 或 (indeterminately sequenced) 。网络效应（net effect)？基本上一致，但是术语不一样而已。</p><hr><p>不承诺： 好吧，这个回答有点长，所以在阅读的时候需要一点耐心，如果你已经知道这些东西了，再次阅读不会让你疯狂的。</p><p>前提： 需要<a href="">C++ standard</a>的一点基础知识</p><hr><p>什么是sequence points?</p><p>标准中说到：</p><blockquote><p>At certain specified points in the execution sequence called sequence points, all side effects of previous evaluations shall be complete and no side effects of subsequent evaluations shall have taken place. (§1.9/7)</p></blockquote><p>[TODO]</p>]]></content>
    
    <summary type="html">
    
      搬运stackoverflow有关C的知识，即练英语，又可以从他人的困惑中学到新东西。
    
    </summary>
    
      <category term="stackoverflow" scheme="http://www.mmmmmcclxxvii.cn/categories/stackoverflow/"/>
    
    
      <category term="stackoverflow" scheme="http://www.mmmmmcclxxvii.cn/tags/stackoverflow/"/>
    
      <category term="c" scheme="http://www.mmmmmcclxxvii.cn/tags/c/"/>
    
      <category term="c-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/c-piece/"/>
    
  </entry>
  
  <entry>
    <title>愚见比特币（一）--货币的本质</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/05/18/inside-money/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/05/18/inside-money/</id>
    <published>2017-05-18T02:42:39.000Z</published>
    <updated>2017-06-21T09:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>对货币的研究不是很深入，但毕竟是每天都用的东西，然后结合了一些看的资料，下面给出我的理解，不对的地方非常欢迎指点。</p><hr><p>要想了解比特币，还得从猴子变人开始说起…</p><p>古时候，人们交易，实际上就是交换，比如我有鸡蛋，你有牛奶，我刚好需要牛奶，然后你刚好需要鸡蛋，然后商量着，我用30个鸡蛋换你一桶牛奶。</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-05-18%20at%2010.48.12%20AM.png" alt="exchange"></p><p>但是社会体系越来越庞大后，需求也越来越多后，可能我要牛奶，但牛奶拥有者不要鸡蛋，所以我还得先换到他想要的那样东西，这让我想起了我小时候听的磁带里面的一则故事，故事名字还有里面具体的那个物品名字我给忘了，大概意思就是小兔他妈妈让小兔子拿着自家缝的一块布去换家里需要的白菜（我指的具体的物品是指这些，但这不是终点，忽略这些细节），然后小兔子找到白菜主人，他不要布，他要地瓜，然后找到地瓜主人，问要不要交换，然后也不要，他要香蕉，然后又去找香蕉的主人，反反复复，找到最终能交换到需要布的，然后再一步步回朔换到白菜。就是一个递归的过程。这样换，就很麻烦</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-05-23%20at%203.02.26%20PM.png" alt="exchange_multi"></p><p>（图片中的尖头表示拥有者手中持有物的更替）</p><p>然后慢慢大家达成某种共识，就是抽取出一种特殊商品，所有其他东西都可以由它等价交换（一般等价物）。现在我鸡蛋换牛奶是，先用30个鸡蛋换100个海贝，这里海贝就是这种“中介商品”，然后100个海贝再去换1桶牛奶</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-05-18%20at%2011.02.56%20AM.png" alt="exchange-agency"></p><p>这个海贝其实就是货币的雏形，然后慢慢的发展到金属货币，经历银本位，复本位，金本位，blabla的，这里我也不是很了解，但不影响。比如我国古代的铜币，银子，金子。但是金属有个弊端就是太重了，后来就有钱庄，发行银票，但银票本质还是以金子做货币基础的，银票只是起到了符号的作用。我国南宋的交子是最早政府发行的纸币（银票），而且这些交子（银票）都是由商人自由发行的。</p><p>到了二战结束后，全球形成了以美元为中心的布雷顿森林体系，取代了站前的金本位制度，后来美国取消兑换黄金后，全球真正进入了信贷程序发行货币的时代。</p><p>以前是用黄金作为中介，这些都是实物，看得见摸得着的。现在的纸币本位，其实是由国家信用作为“抵押”的</p><blockquote><p>基础货币相当于政府向全国国民的借债，但至于借债是否能被偿还，乃至政府资产是否价值，只取决于人们对政府的信心和政府自身的信用</p></blockquote><p>我是这么理解的。如果A欠B十块钱，B欠C十块钱，是不是通过商量协定后A欠C十块钱一样的。那现在其实就是把人民币看作一种权利义务的关系，我们是债权人，国家是债务人，我们有100元，先把这个单元去掉，相当于就是（我们有对国家的100债券），然后我们交易，我给你10元，就是我把对国家的10个债权转让给你。现在是把这个关系抽象出来放在原来黄金的位置上。</p><p>其实上面的这个债券债务关系比喻还是有点不太恰当，毕竟国家发行货币就是不断印钞，印多了通货膨胀。之前商业银行还可以发行自己的货币，但后来中央将这个权利回收，只有中央可以发行货币。</p><p>总结来说，很久以前的海贝变成了现在的纸币。货币用来买卖的，为什么我接受这个货币，其实就是大家都认可么，就像海贝，从商品中分离出来固定充当一般等价物，因为海贝是实物，摸得着看得见，后面是大自然“撑腰”。现在只是后面是国家的信用“撑腰”</p><p>那我们的财富是什么，是我们手上的100元吗？不是，财富是我们<strong>资产负债表</strong>的加加减减。可以说货币就是记账方式，钱只是账本上面的一串数字，那每个人其实有一本账本（在银行里）。</p><p>那比特币本质其实就是一个所有人的账本，所有人交易放在一个账本上，所有人都可以看，所有人都可以维护。<br>它是去中心化的，没有中央银行。记载在我们现在生活中的账本的那些数字，我们给它一个单位叫元，叫美元，日元等等。然后在比特币这个系统，我们给它一个单位叫比特币。这个系统中发行货币的方式就是“矿工挖矿“（我不太喜欢这个称号，久而久之就不知道本质是啥了，其实就是全网的记账人），给记账人记账的奖励就是产生新的比特币，以及交易产生的手续费。</p><p>那我们现实生活中的货币是基于国家信用的，而比特币是基于密码学，基于数学原理。<strong>只要大家都认可</strong>（共识机制），就可以交易了。</p><p>那国家货币还有一些防伪手段等来解决现实生活中出现的问题。下面会说明比特币是怎么利用数学来解决这个问题的。</p><hr><p>我的理解不是很深，欢迎指正。也请阅读的过的人留下邮箱，万一有错，不想误人子弟，等错误更正会通过邮箱来提醒你。</p>]]></content>
    
    <summary type="html">
    
      看了一些资料，表达能力不好，但还是尽量把我的看法尽可能的表达出来
    
    </summary>
    
      <category term="blockchain" scheme="http://www.mmmmmcclxxvii.cn/categories/blockchain/"/>
    
    
      <category term="bitcoin" scheme="http://www.mmmmmcclxxvii.cn/tags/bitcoin/"/>
    
      <category term="monetary" scheme="http://www.mmmmmcclxxvii.cn/tags/monetary/"/>
    
      <category term="currency" scheme="http://www.mmmmmcclxxvii.cn/tags/currency/"/>
    
  </entry>
  
  <entry>
    <title>平静和沉淀</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/05/17/calm-down/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/05/17/calm-down/</id>
    <published>2017-05-17T15:44:57.000Z</published>
    <updated>2017-05-17T16:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>焦虑。</p><p>其实我觉得我有毅力做一件事，但是太急功近利了，没有耐心。而且，懒。这个是人的天性啊，但是为了要达到你想追求的目标，就必须要和天性斗争。不能老是拿顺其自然的话语来安慰自己，目前在自己身上这两者是竞品。</p><p>在这个追求快速制胜的时代，连NBA联盟都流行小球，快准狠的风格了，做一只马刺队一样的清流还是很难的啊。</p><p>毕竟人家波波老爷子用了20年打造的文化基奠。</p><p>浮躁。</p><p>受大环境影响，往往迷失了自己。我感觉现在虚活着，什么都想干，但不知道干嘛。</p><p>静。</p>]]></content>
    
    <summary type="html">
    
      Just slow down, step by step
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>install hadoop</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/14/install-hadoop/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/14/install-hadoop/</id>
    <published>2017-04-14T06:47:18.000Z</published>
    <updated>2017-06-06T02:02:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为hadoop版本的问题，有些命令可能不一样。网上搜到的一些资料都会过时或与我现在安装的版本不兼容。<br>所以直接看<a href="http://hadoop.apache.org/docs/" target="_blank" rel="external">官方文档</a></p><p>那安装其实涉及的就是单机和集群。特地在知乎上逛了一圈，得到的答案是，看目的吧，如果主要想学习mapreduce编程的，不要搭集群，不要搭集群，不要搭集群！！！因为目的是修炼内功，就没必要磨练工具了吧。但至少我觉得安装个工具如果都搞不定的话，那就不用混了。还是把重心放在mapreduce编程上吧</p><p>这里记录一个安装<code>single-node</code> hadoop的历程。</p><p>我mac上用的是<code>homebrew</code>包管理工具，所以我就直接<code>brew install hadoop</code>。好了，安装完成。</p><p>接下来的<a href="http://hadoop.apache.org/docs/r2.8.0/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="external">文档</a>里面都有。</p><p>主要记录一下几个点：</p><ol><li>java的路径</li></ol><p>因为是从官网下载的dmg直接安装的。java home的路径是<code>/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home</code><br>如果是其他途径，比如<code>brew cask install java</code>的话，那应该会在<code>/usr/local/Cellar/java</code>中吧（我猜的），还有其他的肯定会有提示的。</p><ol><li>官网文档中的etc/hadoop？？在哪？</li></ol><p>因为是通过<code>brew</code>安装的<code>hadoop</code>，所以<code>hadoop</code>都在<code>/usr/local/Cellar/hadoop</code>里面。文档直接说是<code>etc/hadop</code>，对应我机子上完整的路径是<code>/usr/local/Cellar/hadoop/2.8.0/libexec/etc</code></p><p>同理<code>bin/hadoop</code></p><p>中间什么配置<code>core-site.xml</code>等文件看文档就好了。<strong>因为不同版本可能配置会不一样！！！所以还是看官方文档</strong></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-03%20at%2012.29.03%20AM.png" alt="hadoop-localhost"></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-05%20at%207.22.24%20PM.png" alt="yarn"></p><p>出来这个页面就可以了</p><ol><li>hadoop fs -ls</li></ol><p>在官网文档里面的命令是<code>hdfs dfs</code>，但其实是一样的<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-03%20at%2012.54.22%20AM.png" alt="hadoop"></p><p>但执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</div><div class="line">ls: `.<span class="string">': No such file or directory</span></div></pre></td></tr></table></figure></p><p>上面那个是因为编译的问题。hadoop官方是32位编译的好像。然后我机子是64位的。这个暂时不管。<br>下面这个报错其实是正常的。</p><p><code>hadoop fs -ls</code>命令的语法完整其实是<code>hadoop fs -ls [path]</code><br>而默认情况下，不用详细指定<code>[path]</code>,hadoop会认为是在hdfs中的<code>/home/[username]</code>，这个<code>[username]</code>就是用bash shell当前的用户替换。</p><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-06-03%20at%205.17.35%20AM.png" alt="shell"></p><p>比如在我机子上，hadoop回去找<code>/home/MMMMMCCLXXVII</code>，但这个路径不存在hdfs中。那这样，其实就是指定一个路径就可以了。</p><p><code>hadoop fs -ls /</code> 它会自动获取计算出hdfs的根目录，然后显示</p><p>其实根据<code>core-site.xml</code>的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">&lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure><p>预想<code>hadoop fs -ls hdfs://localhost:9000/</code> 应该可以的。但是好像有问题。[TOdo]</p><p>然后用hadoop命令显示本地的文件。<code>hadoop fs -ls file:///</code></p><p>借鉴的文档：</p><hr><p><a href="http://blog.csdn.net/joe_007/article/details/8298814" target="_blank" rel="external">【hadoop】ssh localhost 免密码登陆（图解）</a><br>主要就是先要有sudo权限，如果没有用root账户的时候。<br><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-centos-quickstart" target="_blank" rel="external">How To Create a Sudo User on CentOS </a><br>这个<code>usermod</code>命令后，要重启终端。</p><blockquote><p>Have you logged in again after the usermod? IIRC, groups are only looked up when you log in (e.g. opened a new terminal window).</p></blockquote><p>然后就是那两个命令，创建isa-pub.<br>主要就是要有权限。</p><hr><p>关闭SElinux</p><p><a href="http://www.centoscn.com/CentOS/config/2015/0618/5681.html" target="_blank" rel="external">CentOS7中关闭selinux</a><br>这个设置后重启没用，还是开着的</p>]]></content>
    
    <summary type="html">
    
      记录安装hadoop 2.8.0
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>vim的字符编码</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/10/vim-encoding/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/10/vim-encoding/</id>
    <published>2017-04-10T04:43:00.000Z</published>
    <updated>2017-04-10T05:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim中的编码"><a href="#vim中的编码" class="headerlink" title="vim中的编码"></a>vim中的编码</h1><p>vim 有四个跟字符编码方式有关的选项，encoding、fileencoding、fileencodings、termencoding (这些选项可能的取值请参考 Vim 在线帮助 :help encoding-names)</p><ul><li>encoding: Vim 内部使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、消息文本等。默认是根据你的locale选择.用户手册上建议只在 .vimrc 中改变它的值，事实上似乎也只有在.vimrc 中改变它的值才有意义。你可以用另外一种编码来编辑和保存文件，如你的vim的encoding为utf-8,所编辑的文件采用cp936编码,vim会自动将读入的文件转成utf-8(vim的能读懂的方式），而当你写入文件时,又会自动转回成cp936（文件的保存编码). </li><li>fileencoding: Vim 中当前编辑的文件的字符编码方式，Vim 保存文件时也会将文件保存为这种字符编码方式 (不管是否新文件都如此)。 </li><li>fileencodings: Vim自动探测fileencoding的顺序列表， 启动时会按照它所列出的字符编码方式逐一探测即将打开的文件的字符编码方式，并且将 fileencoding 设置为最终探测到的字符编码方式。因此最好将Unicode 编码方式放到这个列表的最前面，将拉丁语系编码方式 latin1 放到最后面。 </li><li>termencoding: Vim 所工作的终端 (或者 Windows 的 Console 窗口) 的字符编码方式。如果vim所在的term与vim编码相同，则无需设置。如其不然，你可以用vim的termencoding选项将自动转换成term的编码.这个选项在 Windows 下对我们常用的 GUI 模式的 gVim 无效，而对 Console 模式的Vim 而言就是 Windows 控制台的代码页，并且通常我们不需要改变它。 </li></ul><p>最主要的就是关注一下<code>encoding</code>和<code>fileencoding</code>，总结就是前者是vim内部处理字符的用的。vim中可能会处理不一样的编码的字符，然后都化为统一的格式进行处理是最明智的。后者是文件的编码格式。</p><p>上面也说的很清楚了，文件读入时，若是<code>fileencoding</code>和<code>encoding</code>不一致，会先转化成<code>encoding</code>，统一处理，最后保存的时候再转化回<code>fileencoding</code>。转化的过程就是通过<code>unicode</code>这个第二层过渡。看<a href="http://www.mmmmmcclxxvii.cn/2016/10/04/encoding/">编码总结</a></p><h1 id="vim的多字符编码方式支持工作流程"><a href="#vim的多字符编码方式支持工作流程" class="headerlink" title="vim的多字符编码方式支持工作流程"></a>vim的多字符编码方式支持工作流程</h1><ol><li>Vim 启动，根据 <code>.vimrc</code> 中设置的<code>encoding</code> 的值来设置 buffer、菜单文本、消息文的字符编码方式。 </li><li>读取需要编辑的文件，根据<code>fileencodings</code> 中列出的字符编码方式逐一探测该文件编码方式。并设置<code>fileencoding</code>为探测到的，看起来是正确的 字符编码方式。 </li><li>对比<code>fileencoding</code>和<code>encoding</code>的值，若不同则调用<code>iconv</code>将文件内容转换为<code>encoding</code>所描述的字符编码方式，并且把转换后的内容放到为此文件开辟的<code>buffer</code>里，此时我们就可以开始编辑这个文件了。注意，完成这一步动作需要调用外部的<code>iconv.dll</code>，你需要保证这个文件存在于<code>$VIMRUNTIME</code>或者其他列在<code>PATH</code>环境变量中的目录里。 </li><li>编辑完成后保存文件时，再次对比<code>fileencoding</code>和<code>encoding</code>的值。若不同，再次调用<code>iconv</code>将即将保存的 buffer 中的文本转换为<code>fileencoding</code>所描述的字符编码方式，并保存到指定的文件中。同样，这需要调用<code>iconv.dll</code>由于<code>Unicode</code>能够包含几乎所有的语言的字符，而且<code>Unicode</code>的<code>UTF-8</code>编码方式又是非常具有性价比的编码方式 (空间消耗比<code>UCS-2</code>小)，因此建议<code>encoding</code>的值设置为<code>utf-8</code>。这么做的另一个理由是<code>encoding</code>设置为<code>utf-8</code>时，Vim 自动探测文件的编码方式会更准确 (或许这个理由才是主要的 ;)。我们在中文 Windows 里编辑的文件，为了兼顾与其他软件的兼容性，文件编码还是设置为<code>GB2312/GBK</code> 比较合适，因此<code>fileencoding</code>建议设置为 chinese (chinese 是个别名，在 Unix 里表示 gb2312，在 Windows 里表示cp936，也就是 GBK 的代码页)。 </li></ol>]]></content>
    
    <summary type="html">
    
      对vim中`encoding`,`filenecoding`,`fileencodings`,`termencoding`的区别做个认识
    
    </summary>
    
      <category term="砍树人" scheme="http://www.mmmmmcclxxvii.cn/categories/%E7%A0%8D%E6%A0%91%E4%BA%BA/"/>
    
    
      <category term="encode" scheme="http://www.mmmmmcclxxvii.cn/tags/encode/"/>
    
      <category term="utf-8" scheme="http://www.mmmmmcclxxvii.cn/tags/utf-8/"/>
    
  </entry>
  
  <entry>
    <title>用r做一个简单的统计词频的程序</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/08/r-text-mining-word-frequency/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/08/r-text-mining-word-frequency/</id>
    <published>2017-04-08T06:31:23.000Z</published>
    <updated>2017-04-10T10:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>要求：<br>假设<code>文件1</code>中有内容<code>a b c c</code>,<code>文件2</code>中有<code>a b d</code><br>现在要统计成如下的样子：</p><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>文件1</td><td>1</td><td>1</td><td>2</td><td>0</td></tr><tr><td>文件2</td><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>用到R中的table函数</p><a id="more"></a><h1 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h1><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><blockquote><p>table uses the cross-classifying factors to build a contingency table of the counts at each combination of factor levels.</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; f1</div><div class="line">[<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"c"</span></div><div class="line">&gt; table(f1)</div><div class="line">f1</div><div class="line">a b c </div><div class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure><p>文档中说了<code>table</code>使用<code>facter</code>中的<code>level</code>来生成统计项，然后记录各项出现的次数。</p><h2 id="factor"><a href="#factor" class="headerlink" title="factor"></a>factor</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set.seed(<span class="number">102</span>)                           <span class="comment"># This yields a good illustration.</span></div><div class="line">x &lt;- sample(<span class="number">1</span>:<span class="number">3</span>, <span class="number">15</span>, replace=<span class="literal">TRUE</span>)</div><div class="line">education &lt;- factor(x, labels=c(<span class="string">"None"</span>, <span class="string">"School"</span>, <span class="string">"College"</span>))</div></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; x</div><div class="line">[<span class="number">1</span>] <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span></div><div class="line">&gt;education</div><div class="line">[<span class="number">1</span>] School  School  College School  None    School  College None    College</div><div class="line">[<span class="number">10</span>] School  College College College School  School </div><div class="line">Levels: None School College</div></pre></td></tr></table></figure><p>上面可以看出labels就是实现一种转化么。默认是<code>lables = levels(x)</code></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>因为<code>文件1</code>中没有d，但统计的时候还是要有它的项，当然值是0。所以我们要有一个<code>level</code>是包含所有的项的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; table(factor(f1,levels=c(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>)))</div><div class="line"></div><div class="line">a b c d </div><div class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span></div></pre></td></tr></table></figure></p><p>这里有另一个话题就是读取文件还可以用<code>readLines</code>函数，不过<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; readLines(file.choose())</div><div class="line">[<span class="number">1</span>] <span class="string">"a b c c"</span></div></pre></td></tr></table></figure></p><p>可以看到，这是一个向量，<code>scan</code>读进来直接是分开的。<br>所以如果用readLines的话，还要用<code>strsplit</code>函数进行分割，就和python中的<code>split</code>函数一样<br>还有我这里用<code>file.choose()</code>来手动选择文件，因为在mac上不知道为什么绝对路径传进去都有问题。[Todo]</p><h2 id="简单情况"><a href="#简单情况" class="headerlink" title="简单情况"></a>简单情况</h2><p>现在将情况简单化一点，现在假设只有一个文件，现在统计的<code>文件1</code>等就是第1行，依次类推。</p><h3 id="先得到所有的词，每个词是一个元素，像scan那样"><a href="#先得到所有的词，每个词是一个元素，像scan那样" class="headerlink" title="先得到所有的词，每个词是一个元素，像scan那样"></a>先得到所有的词，每个词是一个元素，像<code>scan</code>那样</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dat &lt;- readLines(file.choose())</div><div class="line">rownum &lt;- length(dat)</div><div class="line">word &lt;- <span class="literal">NULL</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:rownum)&#123;</div><div class="line">di &lt;- dat[i]</div><div class="line">di &lt;- strsplit(di,split=<span class="string">' '</span>)[[<span class="number">1</span>]]</div><div class="line">word &lt;- c(word,di)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="得到所有的项"><a href="#得到所有的项" class="headerlink" title="得到所有的项"></a>得到所有的项</h3><p>其实也就是数学里面的集合么。估计<code>Levels</code>就是集合实现的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; factor(word)</div><div class="line">[<span class="number">1</span>] a b c c a b d</div><div class="line">Levels: a b c d</div></pre></td></tr></table></figure></p><p>这样就得到了所需要的所有项<code>a</code>,<code>b</code>,<code>c</code>,<code>d</code></p><p>那其实因子<code>a b c c a b d</code>它是按顺序来的，那其实对第一行的统计就可以<code>table(factor(word[1:len_row_1]))</code><br>那<code>len_row_1</code>怎么得来，就可以在原来的<code>for</code>循环中直接用<code>length</code>计算出<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dat &lt;- readLines(file.choose())</div><div class="line">rownum &lt;- length(dat)</div><div class="line">len &lt;- rep(<span class="number">0</span>,rownum) <span class="comment">#</span></div><div class="line">word &lt;- <span class="literal">NULL</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:rownum)&#123;</div><div class="line">di &lt;- dat[i]</div><div class="line">di &lt;- strsplit(di,split = <span class="string">' '</span>)[[<span class="number">1</span>]]</div><div class="line">word &lt;- c(word,di)</div><div class="line">len[i] &lt;- length(di) <span class="comment">#</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>多了有<code>#</code>号标记的这两行</p><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>事先先生成<code>rownum</code>行然后<code>length(levels(factor(word)))</code>列的矩阵，之后往里面塞就行了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f &lt;- factor(word)</div><div class="line">l &lt;- levels(f)</div><div class="line">m &lt;- matrix(<span class="number">0</span>,nrow = rownum,ncol = length(l))</div></pre></td></tr></table></figure></p><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; m</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></div></pre></td></tr></table></figure><p>因为我们现在有了<code>len</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; len</div><div class="line">[<span class="number">1</span>] <span class="number">4</span> <span class="number">3</span></div></pre></td></tr></table></figure></p><p><code>4</code>意思是文件第一行的元素个数，<code>3</code>就是第二行的<br>然后我们可以用数组的知识，也就是类似c语言中的两个指针来移动了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">start &lt;- <span class="number">1</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:rownum)&#123; <span class="comment"># 这里我一开始忘了写1:，只是rownum，导致一直bug</span></div><div class="line">end &lt;- start+len[i] - <span class="number">1</span></div><div class="line">m[i,]&lt;-table(factor(word[start:end],levels = l))</div><div class="line">start &lt;- end+<span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; m</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">0</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span></div></pre></td></tr></table></figure><p>弄的好看一点<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; colnames(m)&lt;-c(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>)</div><div class="line">&gt; m</div><div class="line">     a b c d</div><div class="line">[<span class="number">1</span>,] <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span></div><div class="line">[<span class="number">2</span>,] <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></div></pre></td></tr></table></figure></p><h2 id="复杂情况"><a href="#复杂情况" class="headerlink" title="复杂情况"></a>复杂情况</h2><p>就是要前面的步骤，要读取多个文件。其实后面步骤都是一样的。只是一个是将多文件的内容放在一个文件的每一行，同样我们需要知道所有的项，也就是levels。多出来的工作也就是我们要读多个文件，然后进行拼接而已。<br>没什么难度，只是代码的优雅程度不一样而已。</p><h3 id="R下的文件目录操作"><a href="#R下的文件目录操作" class="headerlink" title="R下的文件目录操作"></a>R下的文件目录操作</h3><ul><li><code>dir.create(&#39;newdir&#39;)</code>：创建文件夹</li><li><code>unlink(&#39;directory&#39;,recursive=TRUE)</code>:删除文件夹，若有文件一并删除</li><li><code>file.create(&#39;newfile&#39;)</code>: 创建一个新文件，若存在则会覆盖原文件</li><li><code>cat(&#39;hello world&#39;,file=&#39;newfile&#39;,append=TRUE)</code>: 文件加入一行内容</li><li><code>file.append(&#39;file1&#39;,&#39;file2&#39;)</code>: 将<code>file2</code>的内容添加到<code>file1</code>的后面</li><li><code>file.copy(&#39;source&#39;,&#39;des&#39;)</code>:拷贝文件<code>source</code>到文件<code>des</code></li><li><code>file.show(&#39;filename&#39;)</code>： 显示文件内容</li><li><code>file.remove(&#39;filea&#39;,&#39;fileb&#39;)</code>: 删除文件</li><li><code>list.files()</code>：显示当前工作目录下的文件列表</li></ul><p>这里可以借助<code>list.files()</code>来搭桥。知道了目录下的文件列表，我们就可以用循环了</p><h3 id="合并数据"><a href="#合并数据" class="headerlink" title="合并数据"></a>合并数据</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">f &lt;- <span class="keyword">function</span>(x)&#123;</div><div class="line">data &lt;- readLines(x)</div><div class="line"><span class="keyword">return</span>(strsplit(data,split=<span class="string">' '</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line">dir_path &lt;- <span class="string">'/Users/Crayon_277/Develop/Project/R/homework/3'</span></div><div class="line">files &lt;- list.files(dir_path,pattern = <span class="string">'[0-9]+.txt$'</span>,full.names = <span class="literal">T</span>)</div><div class="line"></div><div class="line">result &lt;- lapply(files,f)</div></pre></td></tr></table></figure><p><code>list.files</code>中的<code>full.names</code>参数为<code>false</code>的时候<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; files</div><div class="line">[<span class="number">1</span>] <span class="string">"1.txt"</span>      <span class="string">"2.txt"</span></div></pre></td></tr></table></figure></p><p>当为<code>T</code>的时候<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; files</div><div class="line">[<span class="number">1</span>] <span class="string">"/Users/Crayon_277/Develop/Project/R/homework/3/1.txt"</span></div><div class="line">[<span class="number">2</span>] <span class="string">"/Users/Crayon_277/Develop/Project/R/homework/3/2.txt"</span></div></pre></td></tr></table></figure></p><p>区别就一目了然了</p><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; result</div><div class="line">[[<span class="number">1</span>]]</div><div class="line">[[<span class="number">1</span>]][[<span class="number">1</span>]]</div><div class="line">[<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"c"</span></div><div class="line"></div><div class="line"></div><div class="line">[[<span class="number">2</span>]]</div><div class="line">[[<span class="number">2</span>]][[<span class="number">1</span>]]</div><div class="line">[<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"d"</span></div></pre></td></tr></table></figure><p>然后可以在用<code>for</code>语句拼接，或者一开始直接用<code>for</code>遍历</p><blockquote><p>lapply returns a list of the same length as X, each element of which is the result of applying FUN to the corresponding element of X.<br>lapply就类似python中的map</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要求：&lt;br&gt;假设&lt;code&gt;文件1&lt;/code&gt;中有内容&lt;code&gt;a b c c&lt;/code&gt;,&lt;code&gt;文件2&lt;/code&gt;中有&lt;code&gt;a b d&lt;/code&gt;&lt;br&gt;现在要统计成如下的样子：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;d&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用到R中的table函数&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/categories/R/"/>
    
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/tags/R/"/>
    
      <category term="R-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/R-piece/"/>
    
      <category term="text-mining" scheme="http://www.mmmmmcclxxvii.cn/tags/text-mining/"/>
    
  </entry>
  
  <entry>
    <title>用R画出下面这样子的形式的图</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/07/r-lines/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/07/r-lines/</id>
    <published>2017-04-07T05:35:06.000Z</published>
    <updated>2017-04-07T07:08:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>用到什么学什么</p><h1 id="plot的使用"><a href="#plot的使用" class="headerlink" title="plot的使用"></a>plot的使用</h1><p>官方的description</p><blockquote><p>Generic function for plotting of R objects. For more details about the graphical parameter arguments, see par.</p><p>For simple scatter plots, plot.default will be used. However, there are plot methods for many R objects, including functions, data.frames, density objects, etc. Use methods(plot) and the documentation for these.</p><p>plot(x, y, …)</p></blockquote><p>这里先用到plot的一个type参数</p><blockquote><p>what type of plot should be drawn. Possible types are</p><p>“p” for points,</p><p>“l” for lines,</p><p>“b” for both,</p><p>“c” for the lines part alone of “b”,</p><p>“o” for both ‘overplotted’,</p><p>“h” for ‘histogram’ like (or ‘high-density’) vertical lines,</p><p>“s” for stair steps,</p><p>“S” for other steps, see ‘Details’ below,</p><p>“n” for no plotting.</p></blockquote><p>这里有个<code>&quot;n&quot;</code>的参数值可以选择，也就是什么都不会打印，先看个例子<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x &lt;- seq(-pi,pi,length = <span class="number">100</span>)</div><div class="line">plot(x,sin(x),type=<span class="string">'p'</span>)</div><div class="line">plot(x,sin(x),type=<span class="string">'l'</span>)</div><div class="line">plot(x,sin(x),type=<span class="string">'n'</span>)</div></pre></td></tr></table></figure></p><p>分别是这样色儿的<br><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-sin.png" alt="points"><br><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-sin-line.png" alt="line"><br><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-sine-none.png" alt="none"><br>看最后一个，也就是什么都没画。什么都没有有什么用！？<br><strong>存在即合理</strong>，它可以用来弄一个画布，然后再在上面画其他图形</p><p>比如：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>))</div></pre></td></tr></table></figure></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-canvas-with-something.png" alt="with points"></p><p>这里<code>plot</code>的<code>x</code>,<code>y</code>参数是用向量指定的，<code>x</code>坐标的放一起，<code>y</code>坐标的放一起，其实坐标点是<code>(0,0)</code>,和<code>(10,10)</code>，在这两个坐标上，默认是画了两个小圆圈。但是如果我想要一个有坐标系的这样的一个画布，我就可以</p><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div></pre></td></tr></table></figure><p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-canvas-blank.png" alt="no points canvas"></p><p>而这里<code>x</code>,<code>y</code>的作用就是撑开画布坐标系的大小，我如果<code>plot(c(0,50),c(0,50),type=&#39;n&#39;)</code>，那坐标系就变大了。</p><h1 id="lines"><a href="#lines" class="headerlink" title="lines"></a>lines</h1><blockquote><p>A generic function taking coordinates given in various ways and joining the corresponding points with line segments.<br>lines(x, …)</p><h2 id="Default-S3-method"><a href="#Default-S3-method" class="headerlink" title="Default S3 method:"></a>Default S3 method:</h2><p>lines(x, y = NULL, type = “l”, …)</p></blockquote><p>就是根据像<code>plot</code>那样<code>x</code>,<code>y</code>解释的意思，将两点连起来，<del>同时用<code>type</code>指定的样式画出这点线</del><br>这个说法有点不正确，好像是说<code>type</code>指定的是线的样式，比如实线，虚线，不是的。<code>lty</code>这个参数才是指定“线样式的”</p><p>我这里看到了<code>lines(x,...)</code>说明可以不用指定<code>y</code>，那画出来是什么？？<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">&gt; lines(c(<span class="number">0</span>,<span class="number">1</span>))</div><div class="line">&gt; lines(c(<span class="number">5</span>,<span class="number">9</span>))</div><div class="line">&gt; lines(c(<span class="number">2</span>,<span class="number">4</span>))</div><div class="line">&gt; lines(c(<span class="number">10</span>,<span class="number">1</span>))</div><div class="line">&gt; lines(c(<span class="number">4</span>,<span class="number">7</span>))</div></pre></td></tr></table></figure></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-line%28x%29.png" alt="line(x)"><br>可以看出来给出的<code>c(a,b)</code>，a,b都是表示纵坐标，默认好像横坐标是1到2，那这样就是画<code>(1,a)</code>到<code>(2,b)</code>的线？<br>至少实验出来是这样的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; lines(c(<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>))</div></pre></td></tr></table></figure></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-line%28x%29-456.png" alt="line(x)456"><br>三个向量元素，那上面的猜测是对的，现在是画<code>(1,a)</code>,<code>(2,b)</code>,<code>(3,c)</code>的线段，估计向量元素增多，就是横坐标到4，5，6了吧</p><h2 id="lines-的type"><a href="#lines-的type" class="headerlink" title="lines 的type"></a>lines 的type</h2><blockquote><p>lines(x, y, type = “l”, …)<br>type<br>character indicating the type of plotting; actually any of the types as in plot.default.</p></blockquote><p>说是根据<code>plot</code>的<code>type</code>来，一开始我觉得这不跟<code>lty</code>参数重复了么，其实两个是不一样的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">&gt; lines(c(<span class="number">2</span>,<span class="number">4</span>),c(<span class="number">3</span>,<span class="number">8</span>),type = <span class="string">"s"</span>)</div><div class="line">&gt; lines(c(<span class="number">6</span>,<span class="number">7</span>),c(<span class="number">3</span>,<span class="number">8</span>),type = <span class="string">"s"</span>,lty=<span class="number">2</span>)</div><div class="line">&gt; lines(c(<span class="number">6</span>,<span class="number">7</span>),c(<span class="number">3</span>,<span class="number">8</span>),type = <span class="string">"l"</span>,lty=<span class="number">3</span>)</div></pre></td></tr></table></figure></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-type-lty.png" alt="type-lty"><br>当<code>type=&quot;s&quot;</code>是，画的是折线！！！，<code>s</code>解释为step，相当于画的是曼哈顿路径。<br><code>lty</code>才是线是什么样子的形式的。而<code>type</code>应该是画的什么什么形状吧，不知道怎么描述</p><h3 id="lty的实验"><a href="#lty的实验" class="headerlink" title="lty的实验"></a>lty的实验</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">1</span>,<span class="number">6</span>),c(<span class="number">1</span>,<span class="number">1</span>),type=<span class="string">'l'</span>,lty=<span class="number">1</span>,ylim=c(<span class="number">0</span>,<span class="number">8</span>))</div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">2</span>:<span class="number">6</span>)&#123;</div><div class="line">  lines(c(<span class="number">1</span>,<span class="number">6</span>),c(i,i),type = <span class="string">'l'</span>,lty=i)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-lty.png" alt="lty"></p><h1 id="text"><a href="#text" class="headerlink" title="text"></a>text</h1><p>在画布上写文本吧<br>直接看实验<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">&gt; text(c(<span class="number">5</span>,<span class="number">1</span>),c(<span class="number">3</span>,<span class="number">3</span>),<span class="number">1</span>)</div><div class="line">&gt; text(c(<span class="number">5</span>,<span class="number">8</span>),c(<span class="number">2</span>,<span class="number">3</span>),c(<span class="string">"A"</span>,<span class="string">"B"</span>))</div></pre></td></tr></table></figure></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-text.png" alt="text"></p><h1 id="points"><a href="#points" class="headerlink" title="points"></a>points</h1><p>画点。主要是<code>pch</code>,<code>cex</code>这两个参数有点意思</p><blockquote><p>pch<br>plotting ‘character’, i.e., symbol to use. This can either be a single character or an integer code for one of a set of graphics symbols. The full set of S symbols is available with pch = 0:18, see the examples below. (NB: R uses circles instead of the octagons used in S.)</p><p>Value pch = “.” (equivalently pch = 46) is handled specially. It is a rectangle of side 0.01 inch (scaled by cex). In addition, if cex = 1 (the default), each side is at least one pixel (1/72 inch on the pdf, postscript and xfig devices).</p><p>For other text symbols, cex = 1 corresponds to the default fontsize of the device, often specified by an argument pointsize. For pch in 0:25 the default size is about 75% of the character height (see par(“cin”)).</p><p>cex<br>character (or symbol) expansion: a numerical vector. This works as a multiple of par(“cex”).</p></blockquote><p>目前我的理解就是pch就是点的样式，cex就是指定大小</p><h2 id="pch-实验"><a href="#pch-实验" class="headerlink" title="pch 实验"></a>pch 实验</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">line.draw = <span class="number">9</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">25</span>)&#123;</div><div class="line"><span class="keyword">if</span>((i-<span class="number">1</span>) %% <span class="number">5</span>==<span class="number">0</span>)&#123;</div><div class="line">line.draw = line.draw - <span class="number">1</span></div><div class="line">&#125;</div><div class="line">points((i-<span class="number">1</span>)%%<span class="number">5</span>,line.draw,pch=i)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-points-pch.png" alt="pch"></p><h1 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h1><p>画这样的一个三角形。思路就是用<code>points</code>画大一点的圆圈，<code>text</code>来写<code>A</code>这中标签，然后<code>lines</code>来画线，没什么难度<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type = <span class="string">'n'</span>)</div><div class="line">lines(c(<span class="number">3</span>,<span class="number">5</span>),c(<span class="number">4</span>,<span class="number">9</span>),type = <span class="string">'l'</span>,lty=<span class="number">1</span>)</div><div class="line">lines(c(<span class="number">5</span>,<span class="number">7</span>),c(<span class="number">9</span>,<span class="number">4</span>),type = <span class="string">'l'</span>,lty=<span class="number">1</span>)</div><div class="line">lines(c(<span class="number">3</span>,<span class="number">7</span>),c(<span class="number">4</span>,<span class="number">4</span>),type = <span class="string">'l'</span>,lty=<span class="number">1</span>,xlim=c(<span class="number">2.5</span>,<span class="number">6.7</span>))</div><div class="line">points(<span class="number">5</span>,<span class="number">9</span>,pch=<span class="number">1</span>,cex = <span class="number">5</span>)</div><div class="line">text(<span class="number">5</span>,<span class="number">9</span>,<span class="string">'A'</span>)</div><div class="line">points(<span class="number">3</span>,<span class="number">4</span>,pch=<span class="number">1</span>,cex = <span class="number">5</span>)</div><div class="line">text(<span class="number">3</span>,<span class="number">4</span>,<span class="string">'B'</span>)</div><div class="line">points(<span class="number">7</span>,<span class="number">4</span>,pch=<span class="number">1</span>,cex = <span class="number">5</span>)</div><div class="line">text(<span class="number">7</span>,<span class="number">4</span>,<span class="string">'C'</span>)</div></pre></td></tr></table></figure></p><p>不过我这样，太啰嗦了啊</p><p>R中的最常用的对象就是向量，很多运算都支持向量操作。可以用向量<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type = <span class="string">'n'</span>)</div><div class="line">x &lt;- c(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</div><div class="line">y &lt;- c(<span class="number">4</span>,<span class="number">9</span>,<span class="number">4</span>)</div><div class="line">points(x,y,cex=<span class="number">5</span>)</div><div class="line">text(x,y,c(<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>))</div><div class="line">lines(x,y,type=<span class="string">'l'</span>)</div></pre></td></tr></table></figure></p><p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-plot-triangle-vector.png" alt="triangle-vector"></p><p><code>lines(x,y)</code> , 这个<code>x</code>，<code>y</code>的坐标，相当于这里，两个坐标的<code>x</code>都提取出来到<code>x</code>，两个坐标的<code>y</code>都提取出来到<code>y</code>，相当于起始点终点的<code>x</code>坐标放一起，起始点终点的<code>y</code>坐标放一起.感觉python中的<code>map(None,x,y)</code> 后就是<code>[(3,4),(5,9),(7,4)]</code> 其实就是各点的坐标</p><p>但是是不闭合的，为什么，其实两个组合确定一条线，可能<code>lines</code>中的向量，<code>x</code>先是<code>(3,5)</code>,在是<code>(5,7)</code>,<code>y</code>对应，但后面没有回去<code>(7，3)</code>。要手动添加<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lints(c(x,<span class="number">3</span>),c(y,<span class="number">4</span>),type=<span class="string">'l'</span>)</div></pre></td></tr></table></figure></p><p>这样就和开篇的fancybox的图片里面一样了。</p>]]></content>
    
    <summary type="html">
    
      主要是plot, lines, text , points 四个函数的使用
    
    </summary>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/categories/R/"/>
    
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/tags/R/"/>
    
      <category term="R-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/R-piece/"/>
    
      <category term="plot" scheme="http://www.mmmmmcclxxvii.cn/tags/plot/"/>
    
  </entry>
  
</feed>
