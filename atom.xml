<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MMMMMCCLXXVII</title>
  <subtitle>美丽的火花在恋人的周围环绕</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mmmmmcclxxvii.cn/"/>
  <updated>2017-05-17T16:00:09.000Z</updated>
  <id>http://www.mmmmmcclxxvii.cn/</id>
  
  <author>
    <name>Crayon Chaney</name>
    <email>mmmmmcclxxvii@yeah.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>平静和沉淀</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/05/17/calm-down/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/05/17/calm-down/</id>
    <published>2017-05-17T15:44:57.000Z</published>
    <updated>2017-05-17T16:00:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>焦虑。</p>
<p>其实我觉得我有毅力做一件事，但是太急功近利了，没有耐心。而且，懒。这个是人的天性啊，但是为了要达到你想追求的目标，就必须要和天性斗争。不能老是拿顺其自然的话语来安慰自己，目前在自己身上这两者是竞品。</p>
<p>在这个追求快速制胜的时代，连NBA联盟都流行小球，快准狠的风格了，做一只马刺队一样的清流还是很难的啊。</p>
<p>毕竟人家波波老爷子用了20年打造的文化基奠。</p>
<p>浮躁。</p>
<p>受大环境影响，往往迷失了自己。我感觉现在虚活着，什么都想干，但不知道干嘛。</p>
<p>静。</p>
]]></content>
    
    <summary type="html">
    
      Just slow down, step by step
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>install hadoop</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/14/install-hadoop/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/14/install-hadoop/</id>
    <published>2017-04-14T06:47:18.000Z</published>
    <updated>2017-05-15T10:54:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>借鉴的文档：</p>
<hr>
<p><a href="http://blog.csdn.net/joe_007/article/details/8298814" target="_blank" rel="external">【hadoop】ssh localhost 免密码登陆（图解）</a><br>主要就是先要有sudo权限，如果没有用root账户的时候。<br><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-centos-quickstart" target="_blank" rel="external">How To Create a Sudo User on CentOS </a><br>这个<code>usermod</code>命令后，要重启终端。</p>
<blockquote>
<p>Have you logged in again after the usermod? IIRC, groups are only looked up when you log in (e.g. opened a new terminal window).</p>
</blockquote>
<p>然后就是那两个命令，创建isa-pub.<br>主要就是要有权限。</p>
<hr>
<p>关闭SElinux</p>
<p><a href="http://www.centoscn.com/CentOS/config/2015/0618/5681.html" target="_blank" rel="external">CentOS7中关闭selinux</a><br>这个设置后重启没用，还是开着的</p>
]]></content>
    
    <summary type="html">
    
      记录安装hadoop
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>vim的字符编码</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/10/vim-encoding/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/10/vim-encoding/</id>
    <published>2017-04-10T04:43:00.000Z</published>
    <updated>2017-04-10T05:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim中的编码"><a href="#vim中的编码" class="headerlink" title="vim中的编码"></a>vim中的编码</h1><p>vim 有四个跟字符编码方式有关的选项，encoding、fileencoding、fileencodings、termencoding (这些选项可能的取值请参考 Vim 在线帮助 :help encoding-names)</p>
<ul>
<li>encoding: Vim 内部使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、消息文本等。默认是根据你的locale选择.用户手册上建议只在 .vimrc 中改变它的值，事实上似乎也只有在.vimrc 中改变它的值才有意义。你可以用另外一种编码来编辑和保存文件，如你的vim的encoding为utf-8,所编辑的文件采用cp936编码,vim会自动将读入的文件转成utf-8(vim的能读懂的方式），而当你写入文件时,又会自动转回成cp936（文件的保存编码). </li>
<li>fileencoding: Vim 中当前编辑的文件的字符编码方式，Vim 保存文件时也会将文件保存为这种字符编码方式 (不管是否新文件都如此)。 </li>
<li>fileencodings: Vim自动探测fileencoding的顺序列表， 启动时会按照它所列出的字符编码方式逐一探测即将打开的文件的字符编码方式，并且将 fileencoding 设置为最终探测到的字符编码方式。因此最好将Unicode 编码方式放到这个列表的最前面，将拉丁语系编码方式 latin1 放到最后面。 </li>
<li>termencoding: Vim 所工作的终端 (或者 Windows 的 Console 窗口) 的字符编码方式。如果vim所在的term与vim编码相同，则无需设置。如其不然，你可以用vim的termencoding选项将自动转换成term的编码.这个选项在 Windows 下对我们常用的 GUI 模式的 gVim 无效，而对 Console 模式的Vim 而言就是 Windows 控制台的代码页，并且通常我们不需要改变它。 </li>
</ul>
<p>最主要的就是关注一下<code>encoding</code>和<code>fileencoding</code>，总结就是前者是vim内部处理字符的用的。vim中可能会处理不一样的编码的字符，然后都化为统一的格式进行处理是最明智的。后者是文件的编码格式。</p>
<p>上面也说的很清楚了，文件读入时，若是<code>fileencoding</code>和<code>encoding</code>不一致，会先转化成<code>encoding</code>，统一处理，最后保存的时候再转化回<code>fileencoding</code>。转化的过程就是通过<code>unicode</code>这个第二层过渡。看<a href="http://www.mmmmmcclxxvii.cn/2016/10/04/encoding/">编码总结</a></p>
<h1 id="vim的多字符编码方式支持工作流程"><a href="#vim的多字符编码方式支持工作流程" class="headerlink" title="vim的多字符编码方式支持工作流程"></a>vim的多字符编码方式支持工作流程</h1><ol>
<li>Vim 启动，根据 <code>.vimrc</code> 中设置的<code>encoding</code> 的值来设置 buffer、菜单文本、消息文的字符编码方式。 </li>
<li>读取需要编辑的文件，根据<code>fileencodings</code> 中列出的字符编码方式逐一探测该文件编码方式。并设置<code>fileencoding</code>为探测到的，看起来是正确的 字符编码方式。 </li>
<li>对比<code>fileencoding</code>和<code>encoding</code>的值，若不同则调用<code>iconv</code>将文件内容转换为<code>encoding</code>所描述的字符编码方式，并且把转换后的内容放到为此文件开辟的<code>buffer</code>里，此时我们就可以开始编辑这个文件了。注意，完成这一步动作需要调用外部的<code>iconv.dll</code>，你需要保证这个文件存在于<code>$VIMRUNTIME</code>或者其他列在<code>PATH</code>环境变量中的目录里。 </li>
<li>编辑完成后保存文件时，再次对比<code>fileencoding</code>和<code>encoding</code>的值。若不同，再次调用<code>iconv</code>将即将保存的 buffer 中的文本转换为<code>fileencoding</code>所描述的字符编码方式，并保存到指定的文件中。同样，这需要调用<code>iconv.dll</code>由于<code>Unicode</code>能够包含几乎所有的语言的字符，而且<code>Unicode</code>的<code>UTF-8</code>编码方式又是非常具有性价比的编码方式 (空间消耗比<code>UCS-2</code>小)，因此建议<code>encoding</code>的值设置为<code>utf-8</code>。这么做的另一个理由是<code>encoding</code>设置为<code>utf-8</code>时，Vim 自动探测文件的编码方式会更准确 (或许这个理由才是主要的 ;)。我们在中文 Windows 里编辑的文件，为了兼顾与其他软件的兼容性，文件编码还是设置为<code>GB2312/GBK</code> 比较合适，因此<code>fileencoding</code>建议设置为 chinese (chinese 是个别名，在 Unix 里表示 gb2312，在 Windows 里表示cp936，也就是 GBK 的代码页)。 </li>
</ol>
]]></content>
    
    <summary type="html">
    
      对vim中`encoding`,`filenecoding`,`fileencodings`,`termencoding`的区别做个认识
    
    </summary>
    
      <category term="砍树人" scheme="http://www.mmmmmcclxxvii.cn/categories/%E7%A0%8D%E6%A0%91%E4%BA%BA/"/>
    
    
      <category term="encode" scheme="http://www.mmmmmcclxxvii.cn/tags/encode/"/>
    
      <category term="utf-8" scheme="http://www.mmmmmcclxxvii.cn/tags/utf-8/"/>
    
  </entry>
  
  <entry>
    <title>用r做一个简单的统计词频的程序</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/08/r-text-mining-word-frequency/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/08/r-text-mining-word-frequency/</id>
    <published>2017-04-08T06:31:23.000Z</published>
    <updated>2017-04-10T10:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>要求：<br>假设<code>文件1</code>中有内容<code>a b c c</code>,<code>文件2</code>中有<code>a b d</code><br>现在要统计成如下的样子：</p>
<table>
<thead>
<tr>
<th></th>
<th>a</th>
<th>b</th>
<th>c</th>
<th>d</th>
</tr>
</thead>
<tbody>
<tr>
<td>文件1</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>0</td>
</tr>
<tr>
<td>文件2</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>用到R中的table函数</p>
<a id="more"></a>
<h1 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h1><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><blockquote>
<p>table uses the cross-classifying factors to build a contingency table of the counts at each combination of factor levels.</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; f1</div><div class="line">[<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"c"</span></div><div class="line">&gt; table(f1)</div><div class="line">f1</div><div class="line">a b c </div><div class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure>
<p>文档中说了<code>table</code>使用<code>facter</code>中的<code>level</code>来生成统计项，然后记录各项出现的次数。</p>
<h2 id="factor"><a href="#factor" class="headerlink" title="factor"></a>factor</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set.seed(<span class="number">102</span>)                           <span class="comment"># This yields a good illustration.</span></div><div class="line">x &lt;- sample(<span class="number">1</span>:<span class="number">3</span>, <span class="number">15</span>, replace=<span class="literal">TRUE</span>)</div><div class="line">education &lt;- factor(x, labels=c(<span class="string">"None"</span>, <span class="string">"School"</span>, <span class="string">"College"</span>))</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; x</div><div class="line">[<span class="number">1</span>] <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span></div><div class="line">&gt;education</div><div class="line">[<span class="number">1</span>] School  School  College School  None    School  College None    College</div><div class="line">[<span class="number">10</span>] School  College College College School  School </div><div class="line">Levels: None School College</div></pre></td></tr></table></figure>
<p>上面可以看出labels就是实现一种转化么。默认是<code>lables = levels(x)</code></p>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>因为<code>文件1</code>中没有d，但统计的时候还是要有它的项，当然值是0。所以我们要有一个<code>level</code>是包含所有的项的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; table(factor(f1,levels=c(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>)))</div><div class="line"></div><div class="line">a b c d </div><div class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>这里有另一个话题就是读取文件还可以用<code>readLines</code>函数，不过<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; readLines(file.choose())</div><div class="line">[<span class="number">1</span>] <span class="string">"a b c c"</span></div></pre></td></tr></table></figure></p>
<p>可以看到，这是一个向量，<code>scan</code>读进来直接是分开的。<br>所以如果用readLines的话，还要用<code>strsplit</code>函数进行分割，就和python中的<code>split</code>函数一样<br>还有我这里用<code>file.choose()</code>来手动选择文件，因为在mac上不知道为什么绝对路径传进去都有问题。[Todo]</p>
<h2 id="简单情况"><a href="#简单情况" class="headerlink" title="简单情况"></a>简单情况</h2><p>现在将情况简单化一点，现在假设只有一个文件，现在统计的<code>文件1</code>等就是第1行，依次类推。</p>
<h3 id="先得到所有的词，每个词是一个元素，像scan那样"><a href="#先得到所有的词，每个词是一个元素，像scan那样" class="headerlink" title="先得到所有的词，每个词是一个元素，像scan那样"></a>先得到所有的词，每个词是一个元素，像<code>scan</code>那样</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dat &lt;- readLines(file.choose())</div><div class="line">rownum &lt;- length(dat)</div><div class="line">word &lt;- <span class="literal">NULL</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:rownum)&#123;</div><div class="line">	di &lt;- dat[i]</div><div class="line">	di &lt;- strsplit(di,split=<span class="string">' '</span>)[[<span class="number">1</span>]]</div><div class="line">	word &lt;- c(word,di)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="得到所有的项"><a href="#得到所有的项" class="headerlink" title="得到所有的项"></a>得到所有的项</h3><p>其实也就是数学里面的集合么。估计<code>Levels</code>就是集合实现的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; factor(word)</div><div class="line">[<span class="number">1</span>] a b c c a b d</div><div class="line">Levels: a b c d</div></pre></td></tr></table></figure></p>
<p>这样就得到了所需要的所有项<code>a</code>,<code>b</code>,<code>c</code>,<code>d</code></p>
<p>那其实因子<code>a b c c a b d</code>它是按顺序来的，那其实对第一行的统计就可以<code>table(factor(word[1:len_row_1]))</code><br>那<code>len_row_1</code>怎么得来，就可以在原来的<code>for</code>循环中直接用<code>length</code>计算出<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dat &lt;- readLines(file.choose())</div><div class="line">rownum &lt;- length(dat)</div><div class="line">len &lt;- rep(<span class="number">0</span>,rownum) <span class="comment">#</span></div><div class="line">word &lt;- <span class="literal">NULL</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:rownum)&#123;</div><div class="line">	di &lt;- dat[i]</div><div class="line">	di &lt;- strsplit(di,split = <span class="string">' '</span>)[[<span class="number">1</span>]]</div><div class="line">	word &lt;- c(word,di)</div><div class="line">	len[i] &lt;- length(di) <span class="comment">#</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多了有<code>#</code>号标记的这两行</p>
<h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>事先先生成<code>rownum</code>行然后<code>length(levels(factor(word)))</code>列的矩阵，之后往里面塞就行了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f &lt;- factor(word)</div><div class="line">l &lt;- levels(f)</div><div class="line">m &lt;- matrix(<span class="number">0</span>,nrow = rownum,ncol = length(l))</div></pre></td></tr></table></figure></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; m</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></div></pre></td></tr></table></figure>
<p>因为我们现在有了<code>len</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; len</div><div class="line">[<span class="number">1</span>] <span class="number">4</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p><code>4</code>意思是文件第一行的元素个数，<code>3</code>就是第二行的<br>然后我们可以用数组的知识，也就是类似c语言中的两个指针来移动了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">start &lt;- <span class="number">1</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:rownum)&#123; <span class="comment"># 这里我一开始忘了写1:，只是rownum，导致一直bug</span></div><div class="line">	end &lt;- start+len[i] - <span class="number">1</span></div><div class="line">	m[i,]&lt;-table(factor(word[start:end],levels = l))</div><div class="line">	start &lt;- end+<span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; m</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">0</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span></div></pre></td></tr></table></figure>
<p>弄的好看一点<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; colnames(m)&lt;-c(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>)</div><div class="line">&gt; m</div><div class="line">     a b c d</div><div class="line">[<span class="number">1</span>,] <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span></div><div class="line">[<span class="number">2</span>,] <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h2 id="复杂情况"><a href="#复杂情况" class="headerlink" title="复杂情况"></a>复杂情况</h2><p>就是要前面的步骤，要读取多个文件。其实后面步骤都是一样的。只是一个是将多文件的内容放在一个文件的每一行，同样我们需要知道所有的项，也就是levels。多出来的工作也就是我们要读多个文件，然后进行拼接而已。<br>没什么难度，只是代码的优雅程度不一样而已。</p>
<h3 id="R下的文件目录操作"><a href="#R下的文件目录操作" class="headerlink" title="R下的文件目录操作"></a>R下的文件目录操作</h3><ul>
<li><code>dir.create(&#39;newdir&#39;)</code>：创建文件夹</li>
<li><code>unlink(&#39;directory&#39;,recursive=TRUE)</code>:删除文件夹，若有文件一并删除</li>
<li><code>file.create(&#39;newfile&#39;)</code>: 创建一个新文件，若存在则会覆盖原文件</li>
<li><code>cat(&#39;hello world&#39;,file=&#39;newfile&#39;,append=TRUE)</code>: 文件加入一行内容</li>
<li><code>file.append(&#39;file1&#39;,&#39;file2&#39;)</code>: 将<code>file2</code>的内容添加到<code>file1</code>的后面</li>
<li><code>file.copy(&#39;source&#39;,&#39;des&#39;)</code>:拷贝文件<code>source</code>到文件<code>des</code></li>
<li><code>file.show(&#39;filename&#39;)</code>： 显示文件内容</li>
<li><code>file.remove(&#39;filea&#39;,&#39;fileb&#39;)</code>: 删除文件</li>
<li><code>list.files()</code>：显示当前工作目录下的文件列表</li>
</ul>
<p>这里可以借助<code>list.files()</code>来搭桥。知道了目录下的文件列表，我们就可以用循环了</p>
<h3 id="合并数据"><a href="#合并数据" class="headerlink" title="合并数据"></a>合并数据</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">f &lt;- <span class="keyword">function</span>(x)&#123;</div><div class="line">	data &lt;- readLines(x)</div><div class="line">	<span class="keyword">return</span>(strsplit(data,split=<span class="string">' '</span>))</div><div class="line">&#125;</div><div class="line">	</div><div class="line">dir_path &lt;- <span class="string">'/Users/Crayon_277/Develop/Project/R/homework/3'</span></div><div class="line">files &lt;- list.files(dir_path,pattern = <span class="string">'[0-9]+.txt$'</span>,full.names = <span class="literal">T</span>)</div><div class="line">	</div><div class="line">result &lt;- lapply(files,f)</div></pre></td></tr></table></figure>
<p><code>list.files</code>中的<code>full.names</code>参数为<code>false</code>的时候<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; files</div><div class="line">[<span class="number">1</span>] <span class="string">"1.txt"</span>      <span class="string">"2.txt"</span></div></pre></td></tr></table></figure></p>
<p>当为<code>T</code>的时候<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; files</div><div class="line">[<span class="number">1</span>] <span class="string">"/Users/Crayon_277/Develop/Project/R/homework/3/1.txt"</span></div><div class="line">[<span class="number">2</span>] <span class="string">"/Users/Crayon_277/Develop/Project/R/homework/3/2.txt"</span></div></pre></td></tr></table></figure></p>
<p>区别就一目了然了</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; result</div><div class="line">[[<span class="number">1</span>]]</div><div class="line">[[<span class="number">1</span>]][[<span class="number">1</span>]]</div><div class="line">[<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"c"</span></div><div class="line"></div><div class="line"></div><div class="line">[[<span class="number">2</span>]]</div><div class="line">[[<span class="number">2</span>]][[<span class="number">1</span>]]</div><div class="line">[<span class="number">1</span>] <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"d"</span></div></pre></td></tr></table></figure>
<p>然后可以在用<code>for</code>语句拼接，或者一开始直接用<code>for</code>遍历</p>
<blockquote>
<p>lapply returns a list of the same length as X, each element of which is the result of applying FUN to the corresponding element of X.<br>lapply就类似python中的map</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要求：&lt;br&gt;假设&lt;code&gt;文件1&lt;/code&gt;中有内容&lt;code&gt;a b c c&lt;/code&gt;,&lt;code&gt;文件2&lt;/code&gt;中有&lt;code&gt;a b d&lt;/code&gt;&lt;br&gt;现在要统计成如下的样子：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;th&gt;d&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用到R中的table函数&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/categories/R/"/>
    
    
      <category term="R-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/R-piece/"/>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/tags/R/"/>
    
      <category term="text-mining" scheme="http://www.mmmmmcclxxvii.cn/tags/text-mining/"/>
    
  </entry>
  
  <entry>
    <title>用R画出下面这样子的形式的图</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/07/r-lines/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/07/r-lines/</id>
    <published>2017-04-07T05:35:06.000Z</published>
    <updated>2017-04-07T07:08:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>用到什么学什么</p>
<h1 id="plot的使用"><a href="#plot的使用" class="headerlink" title="plot的使用"></a>plot的使用</h1><p>官方的description</p>
<blockquote>
<p>Generic function for plotting of R objects. For more details about the graphical parameter arguments, see par.</p>
<p>For simple scatter plots, plot.default will be used. However, there are plot methods for many R objects, including functions, data.frames, density objects, etc. Use methods(plot) and the documentation for these.</p>
<p>plot(x, y, …)</p>
</blockquote>
<p>这里先用到plot的一个type参数</p>
<blockquote>
<p>what type of plot should be drawn. Possible types are</p>
<p>“p” for points,</p>
<p>“l” for lines,</p>
<p>“b” for both,</p>
<p>“c” for the lines part alone of “b”,</p>
<p>“o” for both ‘overplotted’,</p>
<p>“h” for ‘histogram’ like (or ‘high-density’) vertical lines,</p>
<p>“s” for stair steps,</p>
<p>“S” for other steps, see ‘Details’ below,</p>
<p>“n” for no plotting.</p>
</blockquote>
<p>这里有个<code>&quot;n&quot;</code>的参数值可以选择，也就是什么都不会打印，先看个例子<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x &lt;- seq(-pi,pi,length = <span class="number">100</span>)</div><div class="line">plot(x,sin(x),type=<span class="string">'p'</span>)</div><div class="line">plot(x,sin(x),type=<span class="string">'l'</span>)</div><div class="line">plot(x,sin(x),type=<span class="string">'n'</span>)</div></pre></td></tr></table></figure></p>
<p>分别是这样色儿的<br><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-sin.png" alt="points"><br><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-sin-line.png" alt="line"><br><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-sine-none.png" alt="none"><br>看最后一个，也就是什么都没画。什么都没有有什么用！？<br><strong>存在即合理</strong>，它可以用来弄一个画布，然后再在上面画其他图形</p>
<p>比如：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>))</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-canvas-with-something.png" alt="with points"></p>
<p>这里<code>plot</code>的<code>x</code>,<code>y</code>参数是用向量指定的，<code>x</code>坐标的放一起，<code>y</code>坐标的放一起，其实坐标点是<code>(0,0)</code>,和<code>(10,10)</code>，在这两个坐标上，默认是画了两个小圆圈。但是如果我想要一个有坐标系的这样的一个画布，我就可以</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-canvas-blank.png" alt="no points canvas"></p>
<p>而这里<code>x</code>,<code>y</code>的作用就是撑开画布坐标系的大小，我如果<code>plot(c(0,50),c(0,50),type=&#39;n&#39;)</code>，那坐标系就变大了。</p>
<h1 id="lines"><a href="#lines" class="headerlink" title="lines"></a>lines</h1><blockquote>
<p>A generic function taking coordinates given in various ways and joining the corresponding points with line segments.<br>lines(x, …)</p>
<h2 id="Default-S3-method"><a href="#Default-S3-method" class="headerlink" title="Default S3 method:"></a>Default S3 method:</h2><p>lines(x, y = NULL, type = “l”, …)</p>
</blockquote>
<p>就是根据像<code>plot</code>那样<code>x</code>,<code>y</code>解释的意思，将两点连起来，<del>同时用<code>type</code>指定的样式画出这点线</del><br>这个说法有点不正确，好像是说<code>type</code>指定的是线的样式，比如实线，虚线，不是的。<code>lty</code>这个参数才是指定“线样式的”</p>
<p>我这里看到了<code>lines(x,...)</code>说明可以不用指定<code>y</code>，那画出来是什么？？<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">&gt; lines(c(<span class="number">0</span>,<span class="number">1</span>))</div><div class="line">&gt; lines(c(<span class="number">5</span>,<span class="number">9</span>))</div><div class="line">&gt; lines(c(<span class="number">2</span>,<span class="number">4</span>))</div><div class="line">&gt; lines(c(<span class="number">10</span>,<span class="number">1</span>))</div><div class="line">&gt; lines(c(<span class="number">4</span>,<span class="number">7</span>))</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-line%28x%29.png" alt="line(x)"><br>可以看出来给出的<code>c(a,b)</code>，a,b都是表示纵坐标，默认好像横坐标是1到2，那这样就是画<code>(1,a)</code>到<code>(2,b)</code>的线？<br>至少实验出来是这样的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; lines(c(<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>))</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-line%28x%29-456.png" alt="line(x)456"><br>三个向量元素，那上面的猜测是对的，现在是画<code>(1,a)</code>,<code>(2,b)</code>,<code>(3,c)</code>的线段，估计向量元素增多，就是横坐标到4，5，6了吧</p>
<h2 id="lines-的type"><a href="#lines-的type" class="headerlink" title="lines 的type"></a>lines 的type</h2><blockquote>
<p>lines(x, y, type = “l”, …)<br>type<br>character indicating the type of plotting; actually any of the types as in plot.default.</p>
</blockquote>
<p>说是根据<code>plot</code>的<code>type</code>来，一开始我觉得这不跟<code>lty</code>参数重复了么，其实两个是不一样的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">&gt; lines(c(<span class="number">2</span>,<span class="number">4</span>),c(<span class="number">3</span>,<span class="number">8</span>),type = <span class="string">"s"</span>)</div><div class="line">&gt; lines(c(<span class="number">6</span>,<span class="number">7</span>),c(<span class="number">3</span>,<span class="number">8</span>),type = <span class="string">"s"</span>,lty=<span class="number">2</span>)</div><div class="line">&gt; lines(c(<span class="number">6</span>,<span class="number">7</span>),c(<span class="number">3</span>,<span class="number">8</span>),type = <span class="string">"l"</span>,lty=<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-type-lty.png" alt="type-lty"><br>当<code>type=&quot;s&quot;</code>是，画的是折线！！！，<code>s</code>解释为step，相当于画的是曼哈顿路径。<br><code>lty</code>才是线是什么样子的形式的。而<code>type</code>应该是画的什么什么形状吧，不知道怎么描述</p>
<h3 id="lty的实验"><a href="#lty的实验" class="headerlink" title="lty的实验"></a>lty的实验</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">1</span>,<span class="number">6</span>),c(<span class="number">1</span>,<span class="number">1</span>),type=<span class="string">'l'</span>,lty=<span class="number">1</span>,ylim=c(<span class="number">0</span>,<span class="number">8</span>))</div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">2</span>:<span class="number">6</span>)&#123;</div><div class="line">  lines(c(<span class="number">1</span>,<span class="number">6</span>),c(i,i),type = <span class="string">'l'</span>,lty=i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-lty.png" alt="lty"></p>
<h1 id="text"><a href="#text" class="headerlink" title="text"></a>text</h1><p>在画布上写文本吧<br>直接看实验<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">&gt; text(c(<span class="number">5</span>,<span class="number">1</span>),c(<span class="number">3</span>,<span class="number">3</span>),<span class="number">1</span>)</div><div class="line">&gt; text(c(<span class="number">5</span>,<span class="number">8</span>),c(<span class="number">2</span>,<span class="number">3</span>),c(<span class="string">"A"</span>,<span class="string">"B"</span>))</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-text.png" alt="text"></p>
<h1 id="points"><a href="#points" class="headerlink" title="points"></a>points</h1><p>画点。主要是<code>pch</code>,<code>cex</code>这两个参数有点意思</p>
<blockquote>
<p>pch<br>plotting ‘character’, i.e., symbol to use. This can either be a single character or an integer code for one of a set of graphics symbols. The full set of S symbols is available with pch = 0:18, see the examples below. (NB: R uses circles instead of the octagons used in S.)</p>
<p>Value pch = “.” (equivalently pch = 46) is handled specially. It is a rectangle of side 0.01 inch (scaled by cex). In addition, if cex = 1 (the default), each side is at least one pixel (1/72 inch on the pdf, postscript and xfig devices).</p>
<p>For other text symbols, cex = 1 corresponds to the default fontsize of the device, often specified by an argument pointsize. For pch in 0:25 the default size is about 75% of the character height (see par(“cin”)).</p>
<p>cex<br>character (or symbol) expansion: a numerical vector. This works as a multiple of par(“cex”).</p>
</blockquote>
<p>目前我的理解就是pch就是点的样式，cex就是指定大小</p>
<h2 id="pch-实验"><a href="#pch-实验" class="headerlink" title="pch 实验"></a>pch 实验</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type=<span class="string">'n'</span>)</div><div class="line">line.draw = <span class="number">9</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">25</span>)&#123;</div><div class="line">	<span class="keyword">if</span>((i-<span class="number">1</span>) %% <span class="number">5</span>==<span class="number">0</span>)&#123;</div><div class="line">		line.draw = line.draw - <span class="number">1</span></div><div class="line">	&#125;</div><div class="line">	points((i-<span class="number">1</span>)%%<span class="number">5</span>,line.draw,pch=i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-points-pch.png" alt="pch"></p>
<h1 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h1><p>画这样的一个三角形。思路就是用<code>points</code>画大一点的圆圈，<code>text</code>来写<code>A</code>这中标签，然后<code>lines</code>来画线，没什么难度<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type = <span class="string">'n'</span>)</div><div class="line">lines(c(<span class="number">3</span>,<span class="number">5</span>),c(<span class="number">4</span>,<span class="number">9</span>),type = <span class="string">'l'</span>,lty=<span class="number">1</span>)</div><div class="line">lines(c(<span class="number">5</span>,<span class="number">7</span>),c(<span class="number">9</span>,<span class="number">4</span>),type = <span class="string">'l'</span>,lty=<span class="number">1</span>)</div><div class="line">lines(c(<span class="number">3</span>,<span class="number">7</span>),c(<span class="number">4</span>,<span class="number">4</span>),type = <span class="string">'l'</span>,lty=<span class="number">1</span>,xlim=c(<span class="number">2.5</span>,<span class="number">6.7</span>))</div><div class="line">points(<span class="number">5</span>,<span class="number">9</span>,pch=<span class="number">1</span>,cex = <span class="number">5</span>)</div><div class="line">text(<span class="number">5</span>,<span class="number">9</span>,<span class="string">'A'</span>)</div><div class="line">points(<span class="number">3</span>,<span class="number">4</span>,pch=<span class="number">1</span>,cex = <span class="number">5</span>)</div><div class="line">text(<span class="number">3</span>,<span class="number">4</span>,<span class="string">'B'</span>)</div><div class="line">points(<span class="number">7</span>,<span class="number">4</span>,pch=<span class="number">1</span>,cex = <span class="number">5</span>)</div><div class="line">text(<span class="number">7</span>,<span class="number">4</span>,<span class="string">'C'</span>)</div></pre></td></tr></table></figure></p>
<p>不过我这样，太啰嗦了啊</p>
<p>R中的最常用的对象就是向量，很多运算都支持向量操作。可以用向量<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plot(c(<span class="number">0</span>,<span class="number">10</span>),c(<span class="number">0</span>,<span class="number">10</span>),type = <span class="string">'n'</span>)</div><div class="line">x &lt;- c(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</div><div class="line">y &lt;- c(<span class="number">4</span>,<span class="number">9</span>,<span class="number">4</span>)</div><div class="line">points(x,y,cex=<span class="number">5</span>)</div><div class="line">text(x,y,c(<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>))</div><div class="line">lines(x,y,type=<span class="string">'l'</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Rplot-plot-triangle-vector.png" alt="triangle-vector"></p>
<p><code>lines(x,y)</code> , 这个<code>x</code>，<code>y</code>的坐标，相当于这里，两个坐标的<code>x</code>都提取出来到<code>x</code>，两个坐标的<code>y</code>都提取出来到<code>y</code>，相当于起始点终点的<code>x</code>坐标放一起，起始点终点的<code>y</code>坐标放一起.感觉python中的<code>map(None,x,y)</code> 后就是<code>[(3,4),(5,9),(7,4)]</code> 其实就是各点的坐标</p>
<p>但是是不闭合的，为什么，其实两个组合确定一条线，可能<code>lines</code>中的向量，<code>x</code>先是<code>(3,5)</code>,在是<code>(5,7)</code>,<code>y</code>对应，但后面没有回去<code>(7，3)</code>。要手动添加<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lints(c(x,<span class="number">3</span>),c(y,<span class="number">4</span>),type=<span class="string">'l'</span>)</div></pre></td></tr></table></figure></p>
<p>这样就和开篇的fancybox的图片里面一样了。</p>
]]></content>
    
    <summary type="html">
    
      主要是plot, lines, text , points 四个函数的使用
    
    </summary>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/categories/R/"/>
    
    
      <category term="R-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/R-piece/"/>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/tags/R/"/>
    
      <category term="plot" scheme="http://www.mmmmmcclxxvii.cn/tags/plot/"/>
    
  </entry>
  
  <entry>
    <title>自我约束-开会</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/06/self-discipline-meeting/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/06/self-discipline-meeting/</id>
    <published>2017-04-06T14:54:22.000Z</published>
    <updated>2017-04-06T15:01:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果不能做到以下，那么你就把你的屁股老老实实的坐到那该死的团会上，体验如坐针毡的感觉。</p>
<p>自己真的做的惜时如金的时候，真的做到压榨每一分每一秒的时候，真的做到push self的时候，当感觉到跑在计划前面的时候。</p>
<p><strong>不能不趁三十之前，立志猛进也</strong></p>
<p>野蛮生长</p>
]]></content>
    
    <summary type="html">
    
      所谓自我约束是指在向某些困难发起挑战时，故意给自己戴上一个枷锁，把自己逼到穷途末路， 制定只属于自己的规矩，正因为有了那个枷锁，你才会认真面对挑战，而一旦失败，你就能通过实践那个规矩，让自己得到严格的锻炼，使得自己不断进步，这才叫自我约束。
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
      <category term="namaste" scheme="http://www.mmmmmcclxxvii.cn/tags/namaste/"/>
    
  </entry>
  
  <entry>
    <title>Intro to hadoop and MapReduce -- hdfs &amp; mapreduce (二)</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/06/hdfs-mapreduce/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/06/hdfs-mapreduce/</id>
    <published>2017-04-06T08:34:28.000Z</published>
    <updated>2017-04-06T13:29:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quiz：-Is-there-a-problem"><a href="#Quiz：-Is-there-a-problem" class="headerlink" title="Quiz： Is there a problem"></a>Quiz： Is there a problem</h2><ul>
<li>[x] network failure</li>
<li>[x] disk failure on datanode</li>
<li>[] <del>not all datanode used</del> (Why do you think that all nodes have to be used. What if you have hundreds of Data Nodes?)</li>
<li>[] <del>block sizes differ</del> (If block sizes would have to be the same, what would happen if the file could not be divided in same size blocks?)</li>
<li>[x] disk failure on namenode</li>
</ul>
<p>what if namenode had hardware problem</p>
<h2 id="Quiz-any-problems-now"><a href="#Quiz-any-problems-now" class="headerlink" title="Quiz: any problems now"></a>Quiz: any problems now</h2><ul>
<li>[x] data inaccessible  (when network failure)</li>
<li>[x] data lost forever  (when disk failure)</li>
<li>[] no problem</li>
</ul>
<p>so, depends.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quiz：-Is-there-a-problem&quot;&gt;&lt;a href=&quot;#Quiz：-Is-there-a-problem&quot; class=&quot;headerlink&quot; title=&quot;Quiz： Is there a problem&quot;&gt;&lt;/a&gt;Quiz： Is there
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.mmmmmcclxxvii.cn/tags/mapreduce/"/>
    
      <category term="udacity" scheme="http://www.mmmmmcclxxvii.cn/tags/udacity/"/>
    
  </entry>
  
  <entry>
    <title>Intro to hadoop and MapReduce -- Big Data(一)</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/04/big-data/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/04/big-data/</id>
    <published>2017-04-04T12:26:09.000Z</published>
    <updated>2017-04-06T13:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Definition-of-Big-Data"><a href="#Definition-of-Big-Data" class="headerlink" title="Definition of Big Data"></a>Definition of Big Data</h1><p>可能有些人认为几个<code>terebytes</code>的数据量是大数据，但这个量不是标准的，所以一个合理的定义是</p>
<blockquote>
<p>It’s data that’s too big to be processed on a single machine.</p>
</blockquote>
<h2 id="Quiz-Chanllenges-with-Big-Data"><a href="#Quiz-Chanllenges-with-Big-Data" class="headerlink" title="Quiz: Chanllenges with Big Data"></a>Quiz: Chanllenges with Big Data</h2><p><del>- most data is worthless</del></p>
<ul>
<li>data is created fast</li>
<li>data from different sources in various formats</li>
</ul>
<p>most data is not worthless, but actually does have a lot of value.</p>
<h1 id="The-3-V’s-of-big-data"><a href="#The-3-V’s-of-big-data" class="headerlink" title="The 3 V’s of big data"></a>The 3 V’s of big data</h1><h2 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h2><p>总结：量大。需要考虑那些能提供有用信息</p>
<blockquote>
<p>But in order to store it, you’ll need a way to scale your storage capacity up to massive volume. Hadoop, which stores data in a distributed way across multiple machines, does that</p>
</blockquote>
<h2 id="Variety"><a href="#Variety" class="headerlink" title="Variety"></a>Variety</h2><p>就是说我们如果用像MySQL,Oracle这种数据库，数据必须要适合他们的格式，但是现在我们处理的数据很大部分都是<code>unstructured</code>或者是<code>semi-structured</code>.<br>比方说现在打客服热线不都有一个提示说是会录音，一种存储是语音识别成文字保存起来，另一种是直接存储成mp3格式然后让相应的软件解码如果后面要用的话。那hadoop不管你的数据是什么样的格式，</p>
<blockquote>
<p>you can just store the data in its raw format, and manipulate and reformat it later.</p>
</blockquote>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><blockquote>
<p>Sometimes the most unlikely data can be extremely useful and lead to savings due to better planning. </p>
</blockquote>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-04%20at%209.39.47%20PM.png" alt="optimize choice"></p>
<p>比方说现在要通知附近的货车到中心取货，基于位置的系统就会通知最近的车辆过来。但往往，这个最近，不是最佳的选择。也许那里有交通堵塞，也许最近的车辆过来需要过羊肠小道，那里的路比较难走，也许是要绕一大圈才能到中心。更需要考虑的是，这辆车上也许没有足够的空间了，这辆车没有油了。所以以下都是需要考虑的</p>
<ul>
<li>Current GPS location fromi all trucks</li>
<li>Current itineraries for all trucks</li>
<li>Current traffic speed in related areas as reported by services such as waze</li>
<li>Current load of trucks by volume and weight</li>
<li>Fuel efficiency of the different vehicles</li>
</ul>
<blockquote>
<p>The world we live in is extremely complex, and there are a lot of variables to consider that you can tweak to get large benefits.</p>
<h2 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h2><p>实时更新？？<br>If we can’t store it as it arrives, we’ll end up discarding some of it, and that’s what we absolutely want to avoid.</p>
</blockquote>
<h1 id="history-of-hadoop"><a href="#history-of-hadoop" class="headerlink" title="history of hadoop"></a>history of hadoop</h1><p>来自hadoop 之父 Doug Cutting</p>
<blockquote>
<p>So, let me tell you how Hadoop came to be. About ten years ago in around 2003, I was working on an Open Source web search engine called Nutch, and we knew it needed to be something very scalable, because the Web was you know, billions of pages. terabytes, petabytes, of data, that we needed to be able to process, and we set about doing the best job we could and it was tough. We got things up and running on four or five machines, not very well, and around that time Google published some papers about how they were doing things internally. Published a paper about their distributed file system, TFS. and about their processing, framework, MapReduce. So my partner and I, at the time, in this project, Mike Cafarella. said about trying to reimplement these in Open Source. So that more people could use them than just folks at Google. Took us a couple of years, and we had Nutch up and running on, instead of four or five machines, on, 20 to 40 machines. It wasn’t perfect, it wasn’t totally reliable, but it worked. And we realize that to get it to the point where it was scaled to thousands of machines, and be as bullet proof as it needed to be, would take more than just the two of us, working part time.</p>
<p>Around that time, Yahoo approached me and said they were interested in investing in this. So I went to work for Yahoo in January of 2006. First thing I did there, was, we took the parts of Nutch that were a distributed computing platform, and put them into a separate project. A new project christened Hadoop. Over the next couple years, with, Yahoo’s help, and the help of others, we took Hadoop, and really got it to the point where it did scale to petabytes, and running on thousands of processors. And doing so quite reliably. </p>
<p>It spread to lots of companies, and mostly in the Internet sector, and became quite a success. after that, we, we started to see a bunch of other projects grow up around it. And Hadoop’s grown to be the kernel of a, which, pretty much an operating system for big data. We’ve got tools that, allow you to, more easily do, MapReduce programming, so, you can develop using SQL or a data flow language called Pig. And we’ve also got the beginnings of higher­level tools. We’ve got interactive SQL with Impala. We’ve got Search. and so we’re really seeing this develop to being a general purpose platform for data processing. that scale’s much better and that it is much more flexible than anything that’s, that’s, else is out there.</p>
</blockquote>
<h1 id="hadoop-cluster"><a href="#hadoop-cluster" class="headerlink" title="hadoop cluster"></a>hadoop cluster</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-04%20at%2010.04.35%20PM.png" alt="cluster"><br>hadoop存储数据的方法是一个分布式的文件系统叫做<code>HDFS</code>。处理数据是通过<code>MapReduce</code>。<br>核心思想就是将数据分块，然后在集群中存储，也就是各个计算机搭建的一个网络吧。那这样的好处就是我们不用从中心取数据然后再操作，我们直接在集群中就地处理数据，后续还可以继续扩大集群的规模</p>
<h1 id="hadoop-Ecosystem"><a href="#hadoop-Ecosystem" class="headerlink" title="hadoop Ecosystem"></a>hadoop Ecosystem</h1><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-04%20at%2010.31.42%20PM.png" alt="ecosystem"></p>
<blockquote>
<p>Core hadoop consists of HDFS and MapReduce<br>hadoop的生态系统。以hadoop为核心的，打造的周边产品，主要的目的就是降低使用hadoop的难度和门槛。<br>比如编写<code>MapReduce</code>的程序不是一件容易的事，有些没有编程经验的就可以用<code>Pig</code>，<code>Hive</code>，这种类似SQL语句来操作数据，但这两个都是将语句翻译为<code>MapReduce</code>然后再到集群上执行。<br>因为<code>Hive</code>和<code>Pig</code>它们本质上还是<code>MapReduce</code>的工作量，所以花费的时间可能更多。所以另一个开源项目<code>Impala</code>，它是允许直接用<code>SQL</code>语句来操作数据，不用经过<code>MapReduce</code>（具体现在我也不懂），所以这样就很快了<br>其他的也就类似了。</p>
</blockquote>
<p>Cloudera hadoop版的其实就是把这些都给你打包好了，你不用在一个一个去弄了。</p>
<p>核心还是hadoop的<code>HDFS</code>和<code>MapReduce</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Definition-of-Big-Data&quot;&gt;&lt;a href=&quot;#Definition-of-Big-Data&quot; class=&quot;headerlink&quot; title=&quot;Definition of Big Data&quot;&gt;&lt;/a&gt;Definition of Big Da
    
    </summary>
    
      <category term="bigdata" scheme="http://www.mmmmmcclxxvii.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://www.mmmmmcclxxvii.cn/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://www.mmmmmcclxxvii.cn/tags/mapreduce/"/>
    
      <category term="udacity" scheme="http://www.mmmmmcclxxvii.cn/tags/udacity/"/>
    
  </entry>
  
  <entry>
    <title>seven-principle</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/04/04/seven-principle/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/04/04/seven-principle/</id>
    <published>2017-04-04T05:58:52.000Z</published>
    <updated>2017-04-06T07:41:12.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><strong>自带鸡血</strong>，能源源不断地给自己充电，遇到打击能迅速恢复，哪怕这种打击沉重而有力，也就是，抗压能力强。<br><img src="http://onexs3cnv.bkt.clouddn.com/balalal" alt="balala"></li>
<li><strong>不能给自己设限</strong>，既没有上限，也没有下限，凡事能想到的事，都敢做，给联合国秘书长写信也没啥不敢的</li>
<li><strong>格局大，顺势而为</strong>.胸怀达到全宇宙，又能找到把猪吹上天的风口，从来站在更大的地位上思考问题，绝不想同事蹭吃了一盒酸奶之类的小时；</li>
<li>对自己高标准，<strong>永不满足</strong>，一旦自己陷入舒适圈，马上调整自己，给自己提更高的要求，让自己不舒适，让自己不高心，让自己不痛快，给自己找别扭，上升到更高的level</li>
<li><strong>做不可替代的角色</strong></li>
<li><strong>极度自律，执行力超强（强调）</strong>。别跟我说自律，其实就是一个人呆着的时候，不放纵自己，做应当做的是，不玩游戏，不看电视剧，<strong>不在低附加值的事情上浪费时间</strong>。同时，你不能想着，我要有时间就好了，然后每天还能睡到中午12点，然后慵懒的发发朋友圈，谈谈诗和远方。</li>
<li>具备<strong>逆向思维</strong>，善于创新，说白了，就不跟大家一样思考，常人怎么想，总是反着想，具备创新精神。剑走偏锋</li>
</ol>
]]></content>
    
    <summary type="html">
    
      七条
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
      <category term="principle" scheme="http://www.mmmmmcclxxvii.cn/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>自我约束-你好</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/30/self-discipline/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/30/self-discipline/</id>
    <published>2017-03-30T08:02:29.000Z</published>
    <updated>2017-04-06T13:30:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>坐公交好几次都碰见她，一位穿着比较啰哩啰嗦的，时尚的。我想认识她</p>
<p>今天，我在看nba勇士队的比赛，她突然过来，没有一丝丝准备，都不知道我发型有没有乱的，问我能不能帮她刷下公交卡，她转支付宝给我，我下意识的说不用，现在老后悔了。</p>
<p>不过，从我过往的经验看，大多是我自己自作多情，人家也只是想寻求帮助，不要想太多了，今天不是你也是其他人。</p>
<p>但还是挺开心的，借此聊了一会，得知是大三外语系的。哈哈哈</p>
<p>这次的自我约束：<br>如果你能静下心来，不要胡思乱想。进入自己的zone, 认认真真做自己的事情，专注！！<br>看缘分，如果能做到专注，那么下次遇见的时候就厚着脸皮要个联系方式吧，不然就永远当个路人</p>
]]></content>
    
    <summary type="html">
    
      所谓自我约束是指在向某些困难发起挑战时，故意给自己戴上一个枷锁，把自己逼到穷途末路， 制定只属于自己的规矩，正因为有了那个枷锁，你才会认真面对挑战，而一旦失败，你就能通过实践那个规矩，让自己得到严格的锻炼，使得自己不断进步，这才叫自我约束。
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
      <category term="namaste" scheme="http://www.mmmmmcclxxvii.cn/tags/namaste/"/>
    
  </entry>
  
  <entry>
    <title>python name and values</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/29/python-name-and-values/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/29/python-name-and-values/</id>
    <published>2017-03-29T13:54:00.000Z</published>
    <updated>2017-03-29T14:50:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>阅读 <a href="https://nedbatchelder.com/text/names.html" target="_blank" rel="external">Facts and myths about Python names and values</a> 做的摘记<br>内容不是很深，只是这里面提到了一些需要注意的点。最主要还是<code>name</code>和<code>value</code>的区别<br><a id="more"></a></p>
<h1 id="Fact-Names-have-no-type-values-have-no-scope"><a href="#Fact-Names-have-no-type-values-have-no-scope" class="headerlink" title="Fact: Names have no type, values have no scope."></a>Fact: Names have no type, values have no scope.</h1><blockquote>
<p>Just as names have no type, values have no scope. When we say that a function has a local variable, we mean that the name is scoped to the function: you can’t use the name outside the function, and when the function returns, the name is destroyed. But as we’ve seen, if the name’s value has other references, it will live on beyond the function call. It is a local name, not a local value.</p>
</blockquote>
<p>翻译：</p>
<p>就跟名字没有类型一样，数值是没有作用范围的。当我们说一个函数有局部变量的时候，我们只是说的是名字只在函数作用域中起作用而已，你不能在函数外使用这个名字，当函数返回的时候，这个名字也就摧毁了。但是，如果这个名字指向的数值还有其他引用，它就会继续生存下去，不管这个函数了。局部变量，而不是局部数值。</p>
<h1 id="Fact-Values-can’t-be-deleted-only-names-can"><a href="#Fact-Values-can’t-be-deleted-only-names-can" class="headerlink" title="Fact: Values can’t be deleted, only names can."></a>Fact: Values can’t be deleted, only names can.</h1><blockquote>
<p>Python’s memory management is so central to its behavior, not only do you not have to delete values, but there is no way to delete values. You may have seen the del statement:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="keyword">del</span> nums</div></pre></td></tr></table></figure>
<blockquote>
<p>This does not delete the value nums, it deletes the name nums. The name is removed from its scope, and then the usual reference counting kicks in: if nums’ value had only that one reference, then the value will be reclaimed. But if it had other references, then it will not.</p>
</blockquote>
<h1 id="Fact-Assignment-never-copies-data"><a href="#Fact-Assignment-never-copies-data" class="headerlink" title="Fact: Assignment never copies data."></a>Fact: Assignment never copies data.</h1><blockquote>
<p>Mutable means that the value has methods that can change the value in-place. Immutable means that the value can never change, instead when you think you are changing the value, you are really making new values from old ones.</p>
</blockquote>
<p>比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">3</span></div><div class="line">y = x</div></pre></td></tr></table></figure></p>
<p><code>x</code>和<code>y</code>只是一起指向了<code>3</code>而已，并没有给<code>y</code>再来一个<code>3</code>。这里<code>x</code>,<code>y</code>是<code>name</code>，<code>3</code>是<code>value</code><br>上面说到的<code>Mutable</code>是什么意思，也就是因为这个赋值不拷贝数据的特性，当<code>y</code>变了的时候，比如<code>y+=1</code>，那<code>x</code>还变不变？这里就要考虑到可变类型和不可变类型了</p>
<p>Immutable values:</p>
<ol>
<li>numbers</li>
<li>strings</li>
<li>tuples </li>
</ol>
<p>Mutable values:</p>
<ol>
<li>lists</li>
<li>dicts</li>
<li>user-defined objects</li>
</ol>
<p>那在上面<code>y+=1</code>之后，其实是给<code>y</code>重新<code>reference</code>到了4</p>
<p>关于mutable的直接截图：</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/list_mutate_value.png" alt="list_mutate"></p>
<hr>
<h1 id="Fact-Python-passes-function-arguments-by-assigning-to-them"><a href="#Fact-Python-passes-function-arguments-by-assigning-to-them" class="headerlink" title="Fact: Python passes function arguments by assigning to them."></a>Fact: Python passes function arguments by assigning to them.</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def my_func(x,y)</div><div class="line">	return x+y</div><div class="line">print(my_func(8,9))</div></pre></td></tr></table></figure>
<blockquote>
<p>The names x and y are local to the function, so when the function returns, those names go away. But if the values they refer to are still referenced by other names, the values live on.</p>
</blockquote>
<p><strong>注意</strong>，这里就出现<code>name</code>和<code>value</code>的区别了，可以这样理解，<code>value</code>就是一个实物，<code>name</code>只是这个实物的标签，我可以贴很多标签，而看到这个标签，我就联想到这个实物，实物可以有多个标签，一个标签只能对应一个实物。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">augment_twice</span><span class="params">(a_list,val)</span>:</span></div><div class="line">	a_list.append(val)</div><div class="line">	a_list.append(val)</div><div class="line"></div><div class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">augment_twice(nums, <span class="number">4</span>)</div><div class="line">print(nums) <span class="comment">#[1,2,3,4,4]</span></div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-03-29%20at%2010.23.49%20PM.png" alt="before"></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-03-29%20at%2010.23.55%20PM.png" alt="after"></h2><p>虚线框表示本地<code>name</code>在一个新的<code>frame</code>里面，而参数传递只是一种赋值操作，<code>a_list</code> “指向” <code>nums</code>指向的<code>value</code>,而<code>list</code>类型是可变数据类型，所以任何<code>name</code>对它的改变都是就地的，可以通过<code>id()</code>操作来查看是否改变了地址</p>
<p>另外一个程序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">augment_twice_bad</span><span class="params">(a_list,val)</span>:</span></div><div class="line">	a_list = a_list + [val,val]</div><div class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">augment_twice_bad(nums,<span class="number">4</span>)</div><div class="line">print(nums) <span class="comment">#[1,2,3]</span></div></pre></td></tr></table></figure>
<p>这个跟上面的程序就不同在函数里面一个是用<code>.append()</code>来增加元素，一个则用加法然后赋值，赋值，赋值，重要的事情说三遍，这是个赋值操作，一旦出现赋值，就相当于等式左边的<code>name</code><strong>rebind</strong>出现在等式右边的<code>value</code></p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-03-29%20at%2010.35.39%20PM.png" alt="bad_before"></h2><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-03-29%20at%2010.35.45%20PM.png" alt="bad_after"></p>
<blockquote>
<p>It’s really important to keep in mind the difference between mutating a value in place, and rebinding a name. augment_twice worked because it mutated the value passed in, so that mutation was available after the function returned. augment_twice_bad used an assignment to rebind a local name, so the changes weren’t visible outside the function.</p>
</blockquote>
<h1 id="其他的-facts-myths都知道了，上面的需要注意一下就可以了。过"><a href="#其他的-facts-myths都知道了，上面的需要注意一下就可以了。过" class="headerlink" title="其他的 facts, myths都知道了，上面的需要注意一下就可以了。过"></a>其他的 facts, myths都知道了，上面的需要注意一下就可以了。过</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读 &lt;a href=&quot;https://nedbatchelder.com/text/names.html&quot;&gt;Facts and myths about Python names and values&lt;/a&gt; 做的摘记&lt;br&gt;内容不是很深，只是这里面提到了一些需要注意的点。最主要还是&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;value&lt;/code&gt;的区别&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>用R来找最大连通子图</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/25/r-maximal-connected-subgraph/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/25/r-maximal-connected-subgraph/</id>
    <published>2017-03-25T00:35:37.000Z</published>
    <updated>2017-05-15T10:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>求上图的最大连通子图，其实就是图的遍历，图的遍历有深度优先和广度优先<br>图有很多种对应的存储结构，在R里面最简单的就是邻接矩阵了。</p>
<p>-update-</p>
<ul>
<li>用深度优先搜索做</li>
<li>在深度优先里面涉及到的R中的全局，局部变量<a id="more"></a>
</li>
</ul>
<h1 id="构造邻接矩阵"><a href="#构造邻接矩阵" class="headerlink" title="构造邻接矩阵"></a>构造邻接矩阵</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">m &lt;- matrix(<span class="number">0</span>,<span class="number">5</span>,<span class="number">5</span>)</div><div class="line">m[<span class="number">1</span>,<span class="number">2</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">1</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">2</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">4</span>,<span class="number">5</span>] &lt;- <span class="number">1</span></div><div class="line"></div><div class="line">m &lt;- m + t(m)</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; m</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">0</span>    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span></div><div class="line">[<span class="number">3</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></div><div class="line">[<span class="number">4</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span></div><div class="line">[<span class="number">5</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span></div></pre></td></tr></table></figure>
<p>主要也就是<code>m&lt;-m+t(m)</code>这一步，因为是无向图，是对称矩阵，可以先构造一半然后与转置相加。<strong>这是对称矩阵的性质的应用！！</strong></p>
<blockquote>
<p>在线性代数中，实对称矩阵是一个方形矩阵，其元素都为实数，且转置矩阵和自身相等<br><a href="https://zh.wikipedia.org/wiki/%E5%AE%9E%E5%AF%B9%E7%A7%B0%E7%9F%A9%E9%98%B5" target="_blank" rel="external">实对称矩阵</a></p>
</blockquote>
<h1 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h1><p>主要思想就是它分两个部分，一个部分保存已经访问过的，一个部分是未访问的，未访问部分是用一个队列来存储，每次从队头出一个元素i，然后将这个元素的能够够到的节点依次加到队尾去。这一步其实就是邻接表中的第i行中为1的元素加进来</p>
<p>先考虑简单的情况，从第1个节点出发，寻找包含1的最大联通子图，其实就是1能够直接或间接够到的所有节点，在图中我们可以直观的看到是1，2，3，三个节点。</p>
<h2 id="错误的代码"><a href="#错误的代码" class="headerlink" title="错误的代码"></a>错误的代码</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">visited &lt;- c(<span class="number">1</span>)</div><div class="line">unvisited &lt;- m[<span class="number">1</span>,]</div><div class="line"></div><div class="line"><span class="keyword">while</span>(length(unvisited)&gt;<span class="number">0</span>)&#123;</div><div class="line">	now &lt;- unvisited[<span class="number">1</span>]</div><div class="line">	unvisited &lt;- unvisited[-<span class="number">1</span>]</div><div class="line">	candidate &lt;- m[now,]</div><div class="line">	candidate &lt;- setdiff(candidate,visited)</div><div class="line">	unvisited &lt;- union(candidate,unvisited)</div><div class="line">	visited &lt;- c(visited,now)</div><div class="line">&#125;</div><div class="line"></div><div class="line">print(visited)</div></pre></td></tr></table></figure>
<p>这里我犯了一个错误，<code>unvisited &lt;- m[1,]</code>,这是<code>unvisited</code>里面保存的是什么？？<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; unvisited</div><div class="line">[<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>那我想要的是什么？应该是<code>visisted</code>中一开始是<code>1</code>,<code>unvisisted</code>中将<code>1</code>的邻接节点加进来是<code>2,3</code>,然后后面每次循环体内做的是队头元素出队列。但是加进来的元素应该是代表这个节点的符号,反应在矩阵中的应该是下标。矩阵里面存的其实是边信息，<code>1</code>代表有边,<code>0</code>代表无边，<strong>其实要的是<code>0 1 1 0 0</code>对应的下标！！！需要的是节点信息</strong>，这其实是两个概念</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>我欠缺的也就是我知道我想要的是什么，但是不熟悉R语法，或者说不知道怎么用R语言来实现，虽然我熟悉python语法，但我也不能保证我能写出很优雅的代码，因为跟别人差就差在，他们不仅精通语法，还知道他们的性能，能有很多组合。</p>
<p>这里我需要的是读进来第1行矩阵元素有<code>1</code>的下标，取下标怎么取</p>
<p>有关下标的函数,目前只注意到下面的三个</p>
<ul>
<li><code>which</code>:Give the TRUE indices of a logical object, allowing for array indices.</li>
<li><code>which.min</code>:最小值的下标</li>
<li><code>which.max</code>:最大值的下标</li>
</ul>
<p>按照条条大路通罗马的理论，只要这个函数跟目标有点沾边的肯定能实现，只是看你的想象力，是否能突破天际<br>因为<code>which</code>是需要一组逻辑向量，在R中逻辑值只有<code>TRUE</code>和<code>FALSE</code>,然后它会返回<code>TRUE</code>的下标<br>只要把<code>0 1 1 0 0</code>转换为逻辑值就行了。查了一下<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; as.logical(c(-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>))</div><div class="line">[<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></div></pre></td></tr></table></figure></p>
<p>可以看到<code>as.logical</code>认为只有<code>0</code>是<code>FALSE</code>，其它为<code>TRUE</code>,这样路就通了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">visited &lt;- c(<span class="number">1</span>)</div><div class="line">unvisited &lt;- which(as.logical(m[<span class="number">1</span>,]))</div></pre></td></tr></table></figure></p>
<p>因为只要得到逻辑向量就可以了，那逻辑操作还可以用<code>m[1,] == 1</code>来得到逻辑向量值。这也可以<br>还有没有其他方案？</p>
<p>因为我注意到这里要么是<code>0</code>,要么是<code>1</code>,可以用向量<code>1 2 3 4 5</code>去乘，就得到了<code>0 2 3 0 0</code>,然后只要大于0的就行了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">index &lt;- c(<span class="number">1</span>:<span class="number">5</span>)</div><div class="line">edge2node &lt;- index*m[<span class="number">1</span>,]</div><div class="line">unvisited &lt;- edge2node[edge2node &gt; <span class="number">0</span>]</div></pre></td></tr></table></figure></p>
<p><code>edge2node[edge2node &gt; 0]</code> 中的<code>edge2node&gt;0</code>计算完之后是逻辑值，然后用<code>[]</code>下标操作取逻辑值只为<code>TRUE</code>的元素</p>
<p>上面两种得到的<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; unvisited</div><div class="line">[<span class="number">1</span>] <span class="number">2</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>就是我想要的</p>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>上面一开始写的错误的代码中也就是和上面一样的问题。只要改了这一部分就行了。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(length(unvisited)&gt;<span class="number">0</span>)&#123;</div><div class="line">	now &lt;- unvisited[<span class="number">1</span>]</div><div class="line">	unvisited &lt;- unvisited[-<span class="number">1</span>] <span class="comment"># 队头元素出队列</span></div><div class="line">	<span class="comment">#candidate &lt;- m[now,]</span></div><div class="line">	candidate &lt;- which(as.logical(m[now,]))</div><div class="line">	candidate &lt;- setdiff(candidate,visited)</div><div class="line">	unvisited &lt;- union(candidate,unvisited) <span class="comment"># 将队头元素的邻接节点加入队列</span></div><div class="line">	visited &lt;- c(visited,now)  <span class="comment"># 将队头元素加入已访问的</span></div><div class="line">&#125;</div><div class="line">print(visited)</div></pre></td></tr></table></figure></p>
<p>这里<code>setdiff</code>和<code>union</code>是集合运算，因为可以在图上直观的看到，<code>1</code>这个节点可以找到<code>2</code>,<code>3</code>。到<code>2</code>这个节点，可以找到<code>1</code>,<code>3</code>,但此时，<code>1</code>这个节点是已经访问了的，如果不处理，还是加进队列里面的话，那就不断在循环了！！！</p>
<p><code>setdiff</code>是取差值，注意参数的位置，<strong>是将<code>visited</code>里面有的元素从<code>candidate</code>中消掉</strong><br><code>union</code>是取并集，没什么好说的了<br>还有一个<code>intersect(x, y)</code>就是取交集</p>
<p>最后的结果<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; print(visited)</div><div class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<h2 id="全图对每个节点进行同样的操作"><a href="#全图对每个节点进行同样的操作" class="headerlink" title="全图对每个节点进行同样的操作"></a>全图对每个节点进行同样的操作</h2><p>图的最大连通子图，那就对每个节点都进行上面的操作，然后图包含节点最多的就是这个图的最大联通子图了</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">max_node_num &lt;- <span class="number">0</span></div><div class="line">maximal_connected_subgraph &lt;- <span class="literal">NULL</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">5</span>)&#123;</div><div class="line">  visited &lt;- c(i)</div><div class="line">  unvisited &lt;- which(as.logical(m[i,]))</div><div class="line">  <span class="keyword">while</span>(length(unvisited)&gt;<span class="number">0</span>)&#123;</div><div class="line">    now &lt;- unvisited[<span class="number">1</span>]</div><div class="line">    unvisited &lt;- unvisited[-<span class="number">1</span>]</div><div class="line">    candidate &lt;- which(as.logical(m[now,]))</div><div class="line">    candidate &lt;- setdiff(candidate,visited)</div><div class="line">    unvisited &lt;- union(candidate,unvisited)</div><div class="line">    visited &lt;- c(visited,now)</div><div class="line">  &#125;</div><div class="line">  current_node_num &lt;- length(visited)</div><div class="line">  <span class="keyword">if</span>(current_node_num &gt; max_node_num)&#123;</div><div class="line">    max_node_num &lt;- current_node_num</div><div class="line">    maximal_connected_subgraph &lt;- visited</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sort(maximal_connected_subgraph)</div><div class="line">print(m[maximal_connected_subgraph,maximal_connected_subgraph])</div></pre></td></tr></table></figure>
<p>result:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; print(m[maximal_connected_subgraph,maximal_connected_subgraph])</div><div class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</div><div class="line">[<span class="number">1</span>,]    <span class="number">0</span>    <span class="number">1</span>    <span class="number">1</span></div><div class="line">[<span class="number">2</span>,]    <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span></div><div class="line">[<span class="number">3</span>,]    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span></div></pre></td></tr></table></figure></p>
<h1 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h1><p>深度优先就是一条道走到底，无路可走的时候，及时浪子回头，然后又不听教诲又去浪到底，直到玩累了，回家的过程。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>涉及到一个回朔。这样就需要一个<code>parent_node</code>来保存父节点的信息。这里我想到，是不是要回去的时候要重新计算父节点的邻接节点，因为这样才能知道其他节点啊。</p>
<p>同样还需要一个<code>visited</code>来保存已经访问过的节点。然后在访问完一个节点，要将这个节点加入<code>visited</code>中，在要遍历下一个节点的时候，需要取一个节点。那这个时候需要看这个节点是不是已经访问了。<br>这里我想到了两个方案：</p>
<ol>
<li>一个一个取。意思是下标操作，取一个对比一下是不是在<code>visited</code>中，可以用<code>any(visited == current_node)</code>如果是<code>FALSE</code>就是还未访问过。<code>visisted == current_node</code>返回的是一个逻辑向量，然后用<code>any</code>函数如果有一个是<code>TRUE</code>那返回值是<code>TRUE</code>，返回<code>FALSE</code>说明没有一个是相等的。</li>
<li>一下子全取出来。然后用集合运算，做差，然后再取出一个。</li>
</ol>
<p>然后我用笔在纸上模拟的时候，发现这应该是个递归的过程。那<code>visisted</code>需要全局来维护，那这样函数体内就用循环可以了，遍历一个节点的所有邻接节点，然后对每一个节点再进入这个函数。这样就不需要<code>parent_node</code>来维护了，但是需要一个边界条件来终止递归。那就是一个节点的所有邻接节点都被访问过了。</p>
<h2 id="发现的问题，visited全局变量"><a href="#发现的问题，visited全局变量" class="headerlink" title="发现的问题，visited全局变量"></a>发现的问题，<code>visited</code>全局变量</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">m &lt;- matrix(<span class="number">0</span>,<span class="number">5</span>,<span class="number">5</span>)</div><div class="line">m[<span class="number">1</span>,<span class="number">2</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">1</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">2</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">4</span>,<span class="number">5</span>] &lt;- <span class="number">1</span></div><div class="line"></div><div class="line">m &lt;- m + t(m)</div><div class="line"></div><div class="line">visited &lt;- c(<span class="number">1</span>)</div><div class="line"></div><div class="line">dfs &lt;- <span class="keyword">function</span>(current_node)&#123;</div><div class="line">  <span class="comment">#browser()  # 调试用的</span></div><div class="line">  </div><div class="line">  candidate_node &lt;- which(as.logical(m[current_node,]))</div><div class="line">  candidate_node &lt;- setdiff(candidate_node,visited)</div><div class="line">  <span class="comment">#print(candidate_node)</span></div><div class="line">  <span class="keyword">if</span>(length(candidate_node) == <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">return</span>(<span class="number">0</span>) <span class="comment">#这个0返回的没有意义的，随便都可以，只是单纯的结束</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> candidate_node)&#123;</div><div class="line">    visited &lt;- c(visited,i) <span class="comment">#访问i节点</span></div><div class="line">    dfs(i) <span class="comment">#递归</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">dfs(<span class="number">1</span>)</div><div class="line">print(visited)</div></pre></td></tr></table></figure>
<p>上面的结果出错了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error: evaluation nested too deeply: infinite recursion / options(expressions=)?</div><div class="line">Error during wrapup: evaluation nested too deeply: infinite recursion / options(expressions=)?</div></pre></td></tr></table></figure></p>
<p>那就是递归没返回<br>调试了一下，发现问题出现在<code>visited</code>上，<code>dfs(i)</code>进去的时候，理想中<code>visited</code>应该是全局变量，在循环中我将<code>i</code>节点加入已访问的节点中，但是发现递归进去的时候，<code>candidate_node &lt;- setdiff(candidate_node,visited)</code>这时候的<code>visited</code>值是<code>1</code>,就是初始值。可是为什么呢？？？</p>
<blockquote>
<p>内部函数在它的环境中查找visited的值（查找的顺序为：首先函数体的局部变量，参数；然后是外部函数中的局域变量，参数；最后是全局变量） </p>
</blockquote>
<p>所以当在函数内做赋值的时候，相当于就建立了一个局部变量，那在第一层的时候<code>visited &lt;- c(visited,i)</code>这个语句还没执行到的时候，此时的<code>visited</code>在函数体内还没有定义！那找到的就是外部的变量，所以调试的时候看到的是<code>1</code>，那其实相当于因为在递归的时候可以看作都是进入自己的函数，所以每一层的<code>visited</code>都是独立的。</p>
<h2 id="方案-1-return-visited"><a href="#方案-1-return-visited" class="headerlink" title="方案 1 : return(visited)"></a>方案 1 : return(visited)</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">dfs2 &lt;- <span class="keyword">function</span>(current_node,vis=<span class="literal">NULL</span>)&#123;</div><div class="line">	candidate_node &lt;- which(as.logical(m[current_node,]))</div><div class="line">	candidate_node &lt;- setdiff(candidate_node,visited)</div><div class="line">	    </div><div class="line">	<span class="keyword">if</span>(length(candidate_node) == <span class="number">0</span>)&#123;</div><div class="line">		<span class="keyword">return</span>(<span class="literal">NULL</span>) </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(i <span class="keyword">in</span> candidate_node)&#123;</div><div class="line">		<span class="keyword">if</span>(!any(visited == i))&#123;</div><div class="line">			visited &lt;- c(visited,dfs2(i))</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span>(visited)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这么写有两个问题！！！<br>第一个是有闭环的时候，因为我在前面的代码计算<code>candidate_node</code>的时候是依赖<code>visited</code>的，在每一层的函数进去后，因为前面说了，每一层的<code>visited</code>是独立的，所以在没有赋值之前，也就是没有在下一层<code>return</code>之前，用的都是外部的<code>visited &lt;- c(1)</code>这个值，所以这时候计算的<code>candidate_node</code>肯定是不正确的，不是我们想要的，因为不能正确判断是否邻接节点已经访问过。这是根源，所以导致了在下面<code>for</code>循环的时候，在闭环的情况下，因为没有正确的将已经访问的排除掉，而无限的递归。</p>
<p>第二个是分叉，就最简单的情况，<code>1</code>连接<code>2</code>,<code>3</code>,但后两个不连接，因为到<code>2</code>中，<code>visited</code>是外部的<code>1</code>，所以这里是恰好，凑巧，刚刚好<code>candidate_node</code>计算为空，返回，但是！！！返回的是空！这样<code>visited &lt;- c(visited,dfs2(i))</code>这个语句就没有起作用，追其根源那就是<code>return</code>写的不正确。一方面是这里连<code>return(visited)</code>都没执行到，相当于在<code>2</code>层这里直接返回<code>NULL</code>，但是并没有把<code>2</code>这个节点加入<code>visited</code>中。<br>而且，即使不管上面的情况，在<code>2</code>饭后会，后面直接<code>return(visited)</code>了，函数直接退出了。<code>3</code>根本就没做。</p>
<p>试错：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">m &lt;- matrix(<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>)</div><div class="line">m[<span class="number">1</span>,<span class="number">2</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">1</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m + t(m) -&gt; m</div><div class="line"></div><div class="line">visited &lt;- c(<span class="number">1</span>)</div><div class="line"></div><div class="line">print(dfs2(<span class="number">1</span>))</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; print(dfs2(<span class="number">1</span>))</div><div class="line">[<span class="number">1</span>] <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>[todo] 使用return 写递归应该是可以的，那就是我整体的递归应该不是按照原来的思路了。但目前还没有想到怎么写</p>
<h2 id="方案-2-这个visited当作一个参数传递就行了"><a href="#方案-2-这个visited当作一个参数传递就行了" class="headerlink" title="方案 2 : 这个visited当作一个参数传递就行了"></a>方案 2 : 这个<code>visited</code>当作一个参数传递就行了</h2><p>但是发现，这个只是值传递参数，不是引用传递，也就是参数变了，最后<code>visited</code>自己没有改变没有用啊，<code>print(visited)</code>就没用，最后结果就只是<code>1</code></p>
<h2 id="lt-lt-解决"><a href="#lt-lt-解决" class="headerlink" title="&lt;&lt;-解决"></a><code>&lt;&lt;-</code>解决</h2><p>然后我<a href="https://zhangjg.github.io/blog/2015/12/25/The-Closure-in-R.html" target="_blank" rel="external">查到</a>里面提到了<code>&lt;&lt;-</code>，可能这个操作符才是将变量复制到全局变量中去，不然<code>&lt;-</code>就在函数体内生成了一个同名的局部变量<br>然后我就将上面的<code>visited &lt;- c(visited,i)</code>改为<code>visited &lt;&lt;- c(visited,i)</code><br>得到的结果是<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; print(visited)</div><div class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>多了一个<code>3</code>，这个是因为在第一层的时候也就是<code>current_node</code>为<code>1</code>的时候，邻接节点是<code>2</code>,<code>3</code>,在<code>for</code>循环中，先进入<code>2</code>节点，此时可以遍历的只有<code>3</code>,然后进入<code>3</code>,访问完，回朔，此时应该是在这个图下<code>1</code>,<code>2</code>,<code>3</code>都是遍历完了的，但是回朔到<code>1</code>节点的时候，<code>for</code>循环还有一个<code>3</code>没执行，所以在<code>for</code>循环里面还要再加一个条件，看是否已经遍历过。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> candidate_node)&#123;</div><div class="line">	<span class="keyword">if</span>(!any(visited == i))&#123;</div><div class="line">		visited &lt;&lt;- c(visited,i) <span class="comment">#访问i节点</span></div><div class="line">	&#125;</div><div class="line">	dfs(i) <span class="comment">#递归</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; print(visited)</div><div class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<h2 id="寻找最大连通子图"><a href="#寻找最大连通子图" class="headerlink" title="寻找最大连通子图"></a>寻找最大连通子图</h2><p>那就是再用一个<code>for</code>循环封装一下，和上面<code>BFS</code>一样。</p>
<p>完整代码<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">m &lt;- matrix(<span class="number">0</span>,<span class="number">5</span>,<span class="number">5</span>)</div><div class="line">m[<span class="number">1</span>,<span class="number">2</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">1</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">2</span>,<span class="number">3</span>] &lt;- <span class="number">1</span></div><div class="line">m[<span class="number">4</span>,<span class="number">5</span>] &lt;- <span class="number">1</span></div><div class="line"></div><div class="line">m &lt;- m + t(m)</div><div class="line"></div><div class="line">max_length &lt;- <span class="number">0</span></div><div class="line">maximal_connected_subgraph &lt;- <span class="literal">NULL</span></div><div class="line">node_num &lt;- length(m[,<span class="number">1</span>])</div><div class="line"></div><div class="line">dfs &lt;- <span class="keyword">function</span>(current_node,vis=<span class="literal">NULL</span>)&#123;</div><div class="line">  candidate_node &lt;- which(as.logical(m[current_node,]))</div><div class="line">  candidate_node &lt;- setdiff(candidate_node,visited)</div><div class="line">  <span class="keyword">if</span>(length(candidate_node) == <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">return</span>(<span class="literal">NULL</span>) <span class="comment">#这个0返回的没有意义的，随便都可以，只是单纯的结束</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> candidate_node)&#123;</div><div class="line">    <span class="keyword">if</span>(!any(visited == i))&#123;</div><div class="line">      visited &lt;&lt;- c(visited,i) <span class="comment">#访问i节点</span></div><div class="line">    &#125;</div><div class="line">    dfs(i) <span class="comment">#递归</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:node_num)&#123;</div><div class="line">  visited &lt;- c(i)</div><div class="line">  dfs(i)</div><div class="line">  print(visited)</div><div class="line">  current_length &lt;- length(visited)</div><div class="line">  <span class="keyword">if</span>(current_length &gt; max_length)&#123;</div><div class="line">    max_length &lt;- current_length</div><div class="line">    maximal_connected_subgraph &lt;- visited</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">sort(maximal_connected_subgraph)</div><div class="line">print(m[maximal_connected_subgraph,maximal_connected_subgraph])</div></pre></td></tr></table></figure></p>
<h2 id="测试复杂的用例"><a href="#测试复杂的用例" class="headerlink" title="测试复杂的用例"></a>测试复杂的用例</h2><p>构造一个新的图<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-11%20at%208.00.24%20PM.png" alt="new-test"><br>这么构造是因为多了一个闭环，以及让<code>1</code>,和<code>2</code>节点多了一个选择，测试回朔的过程<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; sort(maximal_connected_subgraph)</div><div class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>结果正确，就是打印的时候有点歧义，因为打印出来的矩阵如果没指定名字，又是1,2,3..顺序来的，会误以为是那几个节点，改一下名字就可以了<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mresult &lt;- m[maximal_connected_subgraph,maximal_connected_subgraph]</div><div class="line">colnames(mresult) &lt;- maximal_connected_subgraph</div><div class="line">rownames(mresult) &lt;- maximal_connected_subgraph</div><div class="line">print(mresult)</div></pre></td></tr></table></figure></p>
<p>结果是：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; print(mresult)</div><div class="line">   <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">9</span> <span class="number">7</span> <span class="number">8</span> <span class="number">10</span></div><div class="line"><span class="number">1</span>  <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>  <span class="number">1</span></div><div class="line"><span class="number">2</span>  <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">0</span></div><div class="line"><span class="number">3</span>  <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">0</span></div><div class="line"><span class="number">6</span>  <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">0</span></div><div class="line"><span class="number">9</span>  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>  <span class="number">0</span></div><div class="line"><span class="number">7</span>  <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span>  <span class="number">0</span></div><div class="line"><span class="number">8</span>  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>  <span class="number">0</span></div><div class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>  <span class="number">0</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;求上图的最大连通子图，其实就是图的遍历，图的遍历有深度优先和广度优先&lt;br&gt;图有很多种对应的存储结构，在R里面最简单的就是邻接矩阵了。&lt;/p&gt;
&lt;p&gt;-update-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用深度优先搜索做&lt;/li&gt;
&lt;li&gt;在深度优先里面涉及到的R中的全局，局部变量
    
    </summary>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/categories/R/"/>
    
    
      <category term="R-piece" scheme="http://www.mmmmmcclxxvii.cn/tags/R-piece/"/>
    
      <category term="R" scheme="http://www.mmmmmcclxxvii.cn/tags/R/"/>
    
      <category term="BFS" scheme="http://www.mmmmmcclxxvii.cn/tags/BFS/"/>
    
      <category term="DFS" scheme="http://www.mmmmmcclxxvii.cn/tags/DFS/"/>
    
      <category term="algorithm" scheme="http://www.mmmmmcclxxvii.cn/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>naruto</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/20/naruto/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/20/naruto/</id>
    <published>2017-03-20T07:44:12.000Z</published>
    <updated>2017-04-06T14:16:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迈特凯语录"><a href="#迈特凯语录" class="headerlink" title="迈特凯语录"></a>迈特凯语录</h1><blockquote>
<p>唯有努力，我不想输给他</p>
<p>真正的胜利，不是击败强者，而是保护对你而言最重要的东西。</p>
<p>不相信自己的人，连努力的价值都没有。</p>
<p>真正重要的东西，不管痛苦也好、悲伤也好…都要努力到底，就算失去生命也要用双手来保护到底!如此一来，就算死掉的话，也会永远留下男子汉活过的证据…</p>
<p>努力是绝不会背叛人的</p>
<p>你只要相信自己所走的路，大步向前走就好，然后就那样成为一个能让别人带着笑容守望着的人吧。</p>
<p>天资聪颖的人并非幸福，能够为自己所信任之人去努力拼搏的人才是幸福的！</p>
<p>当新叶萌发，新春到来之时，才是青春的最高潮燃烧得最火热的时刻！</p>
<p>既然我已经摆出帅哥的姿势来耍帅了,就必须要彻底地遵守约定! </p>
<p>小李,你要休息了吗? </p>
<p>青春的勋章离不开『热血』</p>
<p>我相信木叶的莲花一定会再次定放!!</p>
<p>青春的操场500圈!!</p>
<p>这就是青春!!!</p>
<p>李洛克：在一个有觉悟的男人面前，任何哀愁和悲伤都是对他的侮辱</p>
</blockquote>
<p>在凯开八门遁甲，这个差点一脚踢出大结局的男人，令卡卡西尊敬不已，我反复看了好几遍。<br>凯这个集逗逼与热血气质于一身的男人。</p>
<h1 id="迈特凯父亲，迈特戴的语录"><a href="#迈特凯父亲，迈特戴的语录" class="headerlink" title="迈特凯父亲，迈特戴的语录"></a>迈特凯父亲，迈特戴的语录</h1><blockquote>
<p>不要和你的努力说对不起，那样会多对不起你的努力啊！</p>
<p>祝贺你从忍者 学校毕业，但青春可不能就此毕业啊。搜索<br>青春什么时候结束？<br>青春不会退缩，所以永远不会结束。那爸爸死的时候也不结束吗？<br>那才是青春的最高潮！</p>
<p> 迈特戴：不过你的努力也不算错，就算只跑完一半，你也确实努力了。<br> 迈特戴：你的忍术和体术不行，这才叫爸爸高兴，知道自己的短处，才能让长处发光，<br> 迈特戴：爸爸很高兴，能让儿子在这么小的时候就发现长处，<br> 迈特凯：爸爸，其实你在逞强吧，<br> 迈特戴：短处也能变成长处，唠叨代表周到，啰嗦说明热门，顽固意味着专注，</p>
<p>迈特戴：所谓自我约束是指在向某些困难发起挑战时，故意给自己戴上一个枷锁，把自己逼到穷途末路， 制定只属于自己的规矩，正因为有了那个枷锁，你才会认真面对挑战，而一旦失败，你就能通过实践那个规矩，让自己得到严格的锻炼，使得自己不断进步，这才叫自我约束。</p>
</blockquote>
<p>迈特戴为迈特凯的父亲，他影响了迈特凯的一生，而迈特凯也将这种影响传给了自己的徒弟李洛克</p>
<p>青春，热血！！！</p>
<p>迈特戴经常在别人嘲笑他的时候，对别人说，谢谢支持。</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/self1.jpg" alt="self1"><br><img src="http://onexs3cnv.bkt.clouddn.com/self2.jpg" alt="self2"></p>
]]></content>
    
    <summary type="html">
    
      想成为像鸣人那样能感染身边人的人；迈特凯和李的青春！！！
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>project of stackoverflow - python object(一)</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/14/stackoverflow_object_1/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/14/stackoverflow_object_1/</id>
    <published>2017-03-14T14:27:10.000Z</published>
    <updated>2017-05-15T10:55:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what-does-‘super’-do-in-python"><a href="#what-does-‘super’-do-in-python" class="headerlink" title="what does ‘super’ do in python"></a><a href="http://stackoverflow.com/questions/222877/what-does-super-do-in-python" target="_blank" rel="external">what does ‘super’ do in python</a></h1><p>下面两个的区别是？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(SomeBaseClass)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		super(Child, self).__init__()</div></pre></td></tr></table></figure>
<p>和<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(SomeBaseClass)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		SomeBaseClass.__init__(self)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>我在单个继承中已经看到<code>super</code> 被用的很多了。我能知道为什么要在多重继承的时候用它，但是还是不清楚在这种情况用它的好处。</p>
<hr>
<p>180票的回答：（John Millikin)</p>
<p>在单一继承用<code>super</code>的好处很小–只是你不再需要硬编码基类名字到方法里面去了</p>
<p>然后，在多重继承里，不用<code>super()</code>几乎是不可能的。这包括常见的习语，像是mixins，interface,abstract classes等，<br>这能让你的代码在之后延伸。如果以后有人想写一个拓展<code>Child</code> 和 mixin的类，他们的代码不会很好的工作。</p>
<hr>
<p>75票的回答：</p>
<p><strong>区别是什么？</strong></p>
<p><code>SomeBaseClass.__init__(self)</code>意思是调用<code>SomeBaseClass</code>的<code>__init__</code>方法<br>然后，<code>super(Child,self).__init__()</code>意思是从<code>Child</code>类的MRO的父类中调用一个绑定方法<code>__init__</code><br>如果实例是Child的子类，有可能在方法解释顺序中的下一个父类是不一样的？？？</p>
<p><strong>向前兼容间接 ？？ （Indirection with Forward Compatibility) </strong></p>
<p>这能给你什么？对于单重继承，问题中给出的例子几乎等同于静态分析。然而使用<code>super</code> 提供了具有向前兼容性的间接层<br>向前兼容对于经验丰富的开发者来说是很重要的。你希望你的代码在做出一些细微的改动之后还能工作。当您查看修订历史记录时，您希望准确地查看何时更改了哪些内容。</p>
<p>你可能先从单重继承开始，但是当你增加另外的基类，你只需要改变基类的顺序（change the line with the bases）<br>（if the bases change in a class you inherit from）如果类继承关系变了（比如增加了一个mixin)，其实你就没做什么改变。<br>尤其在python2中，要想给super正确的方法参数是很难的。如果你知道你在单重继承下正确的使用<code>super</code>，这样是的调试就容易一点了</p>
<p><strong>依赖注入 Dependency Injection </strong></p>
<p>其他人可以使用你的代码然后插入一些父类到方法解释中(method resolution):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeBaseClass</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="string">'SomeBaseClass.__init__(self) called'</span>)</div><div class="line">			</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsuperChild</span><span class="params">(SomeBaseClass)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="string">'UnsuperChild.__init__(self) called'</span>)</div><div class="line">		SomeBaseClass.__init__(self)</div><div class="line">							</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperChild</span><span class="params">(SomeBaseClass)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="string">'SuperChild.__init__(self) called'</span>)</div><div class="line">		super(SuperChild, self).__init__()</div></pre></td></tr></table></figure>
<p>现在你增加其他类，然后在Foo和Bar之间插入一个类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InjectMe</span><span class="params">(SomeBaseClass)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		print(<span class="string">'InjectMe.__init__(self) called'</span>)</div><div class="line">		super(InjectMe, self).__init__()</div><div class="line">				</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsuperInjector</span><span class="params">(UnsuperChild, InjectMe)</span>:</span> <span class="keyword">pass</span></div><div class="line">					</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperInjector</span><span class="params">(SuperChild, InjectMe)</span>:</span> <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>使用un-super子类未能注入依赖，因为你是用的子类在自己执行打印后调用的是硬编码方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>o = UnsuperInjector()</div><div class="line">UnsuperChild.__init__(self) called</div><div class="line">SomeBaseClass.__init__(self) called</div></pre></td></tr></table></figure>
<p>然而使用<code>super</code>的子类能正确的依赖注入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>o2 = SuperInjector()</div><div class="line">SuperChild.__init__(self) called</div><div class="line">InjectMe.__init__(self) called</div><div class="line">SomeBaseClass.__init__(self) called</div></pre></td></tr></table></figure>
<p>(我：因为super按照MRO来寻找next类的，不是就是去找父类SomeBaseClass,<br>因为SuperInjector的MRO是自身&gt; UnsuperChild &gt; InjectMe &gt; SomeBaseClass &gt; object</p>
<p>还有就是 super 不是在SuperChild内么，为什么要按SuperInjector的MRO来？？<br>这里应该是因为SuperInjector的init没有定义，然后是用的supserchild的，但是还是按照自身的MRO来。<br>怎么做实验</p>
<p>)</p>
<p><strong>结论</strong><br>一直使用<code>super</code>来引用父类就好了</p>
<p>你想要引用的父类是MRO下一个类，而不是你看到的继承的关系</p>
<p>不使用<code>super</code> 回让你代码的使用者多了很多不必要的限制</p>
<hr>
<h1 id="我的："><a href="#我的：" class="headerlink" title="我的："></a>我的：</h1><p>一个例子就是<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections imoprt Counter, OrderedDict</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedCounter</span><span class="params">(Counter, OrderedDict)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line">oc = OrderedCounter(<span class="string">"abracadabra"</span>)</div></pre></td></tr></table></figure></p>
<p>之前还一直奇怪这个为什么类里面pass，什么都不用写就能结合，现在知道是因为有super<br>相当于我先把参数传递到Counter初始化，然后因为有super找到的是下一个MRO，然后到OrderedDict初始化<br>相当于两个工序，先count再order。</p>
<hr>
<h1 id="How-does-Python’s-super-actually-work-in-the-general-case"><a href="#How-does-Python’s-super-actually-work-in-the-general-case" class="headerlink" title="How does Python’s super() actually work, in the general case?"></a><a href="http://stackoverflow.com/questions/33290894/how-does-pythons-super-actually-work-in-the-general-case/33291315?noredirect=1#comment72867412_33291315" target="_blank" rel="external">How does Python’s super() actually work, in the general case?</a></h1><p>现在有很多有关<code>super()</code>的资源，包括<a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" target="_blank" rel="external">这个</a>博客写的，还有很多stackoverflow上的问题。但是我感觉它们都没有解释它在普遍情况下是怎么工作的，也就是底层的实现。</p>
<p>考虑下面的这个继承层次：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">print</span> <span class="string">'A foo'</span></div><div class="line">			</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">print</span> <span class="string">'B foo before'</span></div><div class="line">		super(B, self).foo()</div><div class="line">		<span class="keyword">print</span> <span class="string">'B foo after'</span></div><div class="line">										</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">print</span> <span class="string">'C foo before'</span></div><div class="line">		super(C, self).foo()</div><div class="line">		<span class="keyword">print</span> <span class="string">'C foo after'</span></div><div class="line">																	</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">print</span> <span class="string">'D foo before'</span></div><div class="line">		super(D, self).foo()</div><div class="line">		<span class="keyword">print</span> <span class="string">'D foo after'</span></div></pre></td></tr></table></figure>
<p>如果你读过python的方法解释顺序的规则，你就知道上面的MRO是（D,B,C,A,object)。 这是被D.<strong>mro</strong>决定的<br><code>(&lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;type &#39;object&#39;&gt;))</code></p>
<p>和<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d = D()</div><div class="line">d.foo()</div></pre></td></tr></table></figure></p>
<p>打印出的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">D foo before</div><div class="line">B foo before</div><div class="line">C foo before</div><div class="line">A foo</div><div class="line">C foo after</div><div class="line">B foo after</div><div class="line">D foo after</div></pre></td></tr></table></figure>
<p>结果符合MRO。 但是，考虑上面的B中的<code>super(B,self).foo()</code> 实际调用的是<code>C.foo</code>，这个是在<code>b=B()</code>中；<code>b.foo()</code> 会直接到<code>A.foo</code> 很显然使用<code>super(B,self).foo()</code>不是<code>A.foo(self)</code>的快捷键，虽然有时是</p>
<p>很显然<code>super()</code>是有意识的在意之前的调用，然后尝试着去跟随总的MRO链。我觉得有两个方法能完成这个。<br>第一个是做了一些类似在链中将<code>super</code>对象传递给下一个方法的<code>self</code>参数,像原来<code>self</code>对象那样，但是包含了这个信息，但是这样似乎会破坏很多东西(<code>super(D,d) is d</code>是False)，然后做了一些实验，我觉得这个方法不可行。</p>
<p>另外一个方法是类似全局变量来保存MRO和现在的链上的位置。我想象中的<code>super</code>算法是这样的：</p>
<ol>
<li>我们当前有工作的环境吗？如果没有，创建一个队列，获取MRO，将除了第一个之外的所有元素入队列</li>
<li>将当前上下文的MRO队列中pop一个元素，在构建<code>super</code>实例的时候将它作为当前的class</li>
<li>当访问<code>super</code>实例的一个方法的时候，在当前class上寻找，然后调用它</li>
</ol>
<p>但是，这样却没有解释类似使用不一样的基类当作第一个参数来调用<code>super</code>，或者调用不同方法。（这段好别扭）<br>我想知道这个的更普遍的算法。而且，如果这样的context存在的话，我能看吗？我能破坏他么？这当然是一个糟糕的想法，但是python希望你成为一个成熟的人尽管你不是。</p>
<p>这同样也引入了好多设计的考量。如果我写的B只考虑了它和A的联系，然后又有其他人写了C，还有其他人写了D，我的<code>B.foo()</code>方法必须找到一个能兼容<code>C.foo()</code>的方法来调用<code>super</code>，尽管我在写它的时候C不存在。如果我想要我的类能很简单的扩展，那我必须要考虑这些。但是我不清楚这是不是比简单的将所有的<code>foo</code>的特征设置成一样来的更复杂。还有一个问题就是什么时候将代码放在<code>super</code>之前，什么时候之后，即使在仅考虑B的基类的时候它没有什么区别</p>
<hr>
<p>7票的回答：</p>
<blockquote>
<p>super() is then obviously aware of the previous calls before it</p>
</blockquote>
<p>它不是。当你做<code>super(B,self).foo</code>,<code>super</code>知道你的MRO因为它会从<code>type(self).__mro__</code>中得到。然后它知道应该在MRO的B后面那里开始寻找<code>foo</code>，一个粗略的纯 python写的应该是这样的:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">super</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, klass, obj)</span>:</span></div><div class="line">		self.klass = klass</div><div class="line">		self.obj = obj</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attrname)</span>:</span></div><div class="line">		classes = iter(type(self.obj).__mro__)</div><div class="line"></div><div class="line">		<span class="comment"># search the MRO to find self.klass</span></div><div class="line">		<span class="keyword">for</span> klass <span class="keyword">in</span> classes:</div><div class="line">			<span class="keyword">if</span> klass <span class="keyword">is</span> self.klass:</div><div class="line">				<span class="keyword">break</span></div><div class="line"></div><div class="line">		<span class="comment"># start searching for attrname at the next class after self.klass</span></div><div class="line">		<span class="keyword">for</span> klass <span class="keyword">in</span> classes:</div><div class="line">			<span class="keyword">if</span> attrname <span class="keyword">in</span> klass.__dict__:</div><div class="line">				attr = klass.__dict__[attrname]</div><div class="line">				<span class="keyword">break</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">raise</span> AttributeError</div><div class="line"></div><div class="line">		<span class="comment"># handle methods and other descriptors</span></div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			<span class="keyword">return</span> attr.__get__(self.obj, type(self.obj))</div><div class="line">		<span class="keyword">except</span> AttributeError:</div><div class="line">			<span class="keyword">return</span> attr</div></pre></td></tr></table></figure></p>
<blockquote>
<p>If I wrote B thinking only of its relation to A, then later someone else writes C and a third person writes D, my B.foo() method has to call super in a way that is compatible with C.foo() even though it didn’t exist at the time I wrote it!</p>
</blockquote>
<p>并不要求你要从随机的类中多种继承。除非<code>foo</code>是被特意设计成在多重继承的时候将兄弟类的重写。D不应该存在。</p>
]]></content>
    
    <summary type="html">
    
      搬运stackoverflow有关python的问题 之 object部分 （一）
    
    </summary>
    
      <category term="stackoverflow" scheme="http://www.mmmmmcclxxvii.cn/categories/stackoverflow/"/>
    
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
      <category term="object" scheme="http://www.mmmmmcclxxvii.cn/tags/object/"/>
    
      <category term="stackoverflow" scheme="http://www.mmmmmcclxxvii.cn/tags/stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title>understanding MRO</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/13/mro/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/13/mro/</id>
    <published>2017-03-13T09:28:31.000Z</published>
    <updated>2017-03-30T13:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实我一直觉得遇到什么障碍再去学什么是效率比较高的，这时候是带着问题去解决问题，比起干看，没有与实际相结合，要有用多了。所以等你真正遇到这个问题了，再来看看。<strong> 这个<code>MRO</code>是理解<code>super</code>方法的前序 </strong>,以下考虑的都是多重继承，单重继承讨论这个就没什么价值了。</p>
<h1 id="Method-Resolution-Order"><a href="#Method-Resolution-Order" class="headerlink" title="Method Resolution Order"></a>Method Resolution Order</h1><blockquote>
<p>In computing, the C3 superclass linearization is an algorithm used primarily to obtain the order in which methods should be inherited (the “linearization”) in the presence of multiple inheritance, and is often termed Method Resolution Order (MRO)<br>from wikipedia – <a href="https://en.wikipedia.org/wiki/C3_linearization" target="_blank" rel="external">C3 linearization</a></p>
</blockquote>
<p>这里引进这个概念。因为在继承中，会有子类继承父类当中的一些元素或方法，但是在多重继承中，到底是哪一个呢？这里就涉及到了<code>MRO</code>，方法解释顺序。可以想像一个列表，里面是继承关系的顺序，当调用子类的方法，或访问子类的元素的时候，就按照这个顺序依次的查找。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(A,B,C)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>你可以试一下，这个<code>D</code>类是定义不了的，会报错<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: Error when calling the metaclass bases</div><div class="line">  Cannot create a consistent method resolution</div><div class="line">order (MRO) <span class="keyword">for</span> bases object, B, C</div></pre></td></tr></table></figure></p>
<p>这里是因为破坏了<code>MRO</code>的一个(<code>monotomic</code>)单调性规定：</p>
<blockquote>
<p>if C1 precedes C2 in the linearization of C, then C1 precedes C2 in the linearization of any subclass of C.</p>
</blockquote>
<p>通过C3算法得出的<code>MRO</code>就可以满足上面的这个要求</p>
<h1 id="C3-linearization"><a href="#C3-linearization" class="headerlink" title="C3 linearization"></a>C3 linearization</h1><p>先定义几个符号表示：<br><code>C1C2....CN</code> 表示一个[C1,C2,C3….CN]的解决顺序列表，在这样的一个列表中，<code>head</code>是<code>C1</code>，<strong>其余的</strong>都叫做<code>tail</code>。<br>注意：是从C2到最后都算tail.<br><code>C+(C1C2...CN) = CC1C2...CN</code> 表示<code>[C] + [C1,C2...CN]</code><br><code>L[C]</code>表示<code>linearization of class C</code>，规定<code>L[O] = O</code>,<code>O</code>表示<code>object</code></p>
<p>算法可以描述为一个递归的过程：</p>
<blockquote>
<p>the linearization of C is the Sum of C plus the merge of the linearizations of the parents and the list of the parents.<br><code>L[C(B1B2...BN)] = C + merge(L[B1],...L[BN],B1...BN)</code><br>顺序很重要，一一对应的。</p>
</blockquote>
<p>merge 算法描述为(原文)：</p>
<blockquote>
<p>take the head of the first list, i.e L[B1][0]; if this head is not in the tail of any of the other lists, then add it to the linearization of C and remove it from the lists in the merge, otherwise look at the head of the next list and take it. if it is a good head, then report the operation until all the class are removed or it is impossible to find good heads. If fail, python will refuse to create the class C and will raise an exception.</p>
</blockquote>
<h2 id="没看懂直接看例子。"><a href="#没看懂直接看例子。" class="headerlink" title="没看懂直接看例子。"></a>没看懂直接看例子。</h2><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-03-30%20at%207.18.59%20PM.png" alt="example-class-inherit"></p>
<p>写出各个的<code>linearization</code>（这个翻译成啥我也不知道）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">L[O] = O</div><div class="line">L[E] = EO</div><div class="line">L[D] = DO</div><div class="line">L[F] = FO</div><div class="line">L[B] = B + merge(L[D],L[E],DE)</div><div class="line">     = B + merge(DO,EO,DE)</div></pre></td></tr></table></figure></p>
<p>这里是要<code>merge</code>3个<code>list</code>，<code>DO</code>,<code>EO</code>,<code>DE</code>，从第一个<code>DO</code>开始，它的<code>head</code>是<code>D</code>，然后看<code>D</code>是否出现在其他<code>list</code>的<code>tail</code>中中，注意<code>tail</code>是指除了<code>head</code>其余的所有。比如有一个<code>list</code>是<code>ADCBEF</code>,那<code>D</code>出现在第2个位置也算是在<code>tail</code>中，而不是在最后一个位置才算是<code>tail</code>。也就是说只有<code>D</code>出现在其他<code>list</code>首位置的时候，或者就根本没有<code>D</code>，这个<code>D</code>算是一个<code>good head</code>，然后将<code>D</code>加入<code>B</code>的linearization中，如果<code>D</code>不满足上面的条件，那么顺推到下一个<code>list</code> <code>EO</code>中的<code>E</code>，如果再不满足，继续顺推，都不满足的话就<code>raise an exception</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">L[B] = B + merge(L[D],L[E],DE)</div><div class="line">     = B + merge(DO,EO,DE)</div><div class="line">	 = B + D + merge(O,EO,E) <span class="comment">#再从第一个list O 开始去第一个元素O，但O不满足，出现在了第二个EO的tail中，顺延</span></div><div class="line">	 = B + D + E + merge(O,O)</div><div class="line">	 = B + D + E + O</div><div class="line">	 = BDEO</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">L[C] = C + merge(DO,FO,DF)</div><div class="line">	 = C + D + merge(O,FO,F)</div><div class="line">	 = C + D + F + merge(O,O)</div><div class="line">	 = CDFO</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">L[A] = A + merge(L[B],L[C],BC)</div><div class="line">	 = A + merge(BDEO,CDFO,BC)</div><div class="line">	 = A + B + merge(DEO,CDFO,C)</div><div class="line">	 = A + B + C + merge(DEO,DFO)</div><div class="line">	 = A + B + C + D + merge(EO,FO)</div><div class="line">	 = A + B + C + D + E + merge(O,FO)</div><div class="line">	 = A + B + C + D + E + F + merge(O,O)</div><div class="line">	 = A + B + C + D + E + F + O</div><div class="line">	 = ABCDEFO</div></pre></td></tr></table></figure>
<hr>
<h2 id="另一个例子–-不能生成mro"><a href="#另一个例子–-不能生成mro" class="headerlink" title="另一个例子– 不能生成mro"></a>另一个例子– 不能生成mro</h2><p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-03-30%20at%207.39.09%20PM.png" alt="bad-example"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">L[O] = O</div><div class="line">L[X] = XO</div><div class="line">L[Y] = YO</div><div class="line">L[A] = AXYO </div><div class="line">L[B] = BYXO <span class="comment">#这两个其实也应该通过上面那个merge算法算出来的，只不过这里一眼就能看出来</span></div></pre></td></tr></table></figure>
<p>关键看类C<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">L[C] = C + merge(AXYO,BYXO,AB)</div><div class="line">	 = C + A + merge(XYO,BYXO,B)</div><div class="line">	 = C + A + B + merge(XYO,YXO)</div></pre></td></tr></table></figure></p>
<p>到了这里就做不下去了，这里<code>XYO</code>,<code>YXO</code>，不管第一个<code>X</code>还是第二个的<code>Y</code>，都不行！！</p>
<blockquote>
<p>X is in the tail of YXO whereas Y is in the tail of XYO<br>因此算法结束.<code>raise an error refuese to create class C</code></p>
</blockquote>
<h1 id="快速判别能否生成MRO的方法"><a href="#快速判别能否生成MRO的方法" class="headerlink" title="快速判别能否生成MRO的方法"></a>快速判别能否生成MRO的方法</h1><p>以下来自 <a href="http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html" target="_blank" rel="external">python Attributes and Methods</a><br><img src="http://www.cafepy.com/article/python_attributes_and_methods/images/simple_hierarchy.png" alt="simple hierarchy"><br>现在要定义一个新的类<code>class N(A,B,C)</code><br><img src="http://www.cafepy.com/article/python_attributes_and_methods/images/beads_on_strings.png" alt="game abacus style beads"><br>画的稍微歪了，第一排全是<code>O</code>，那ok，<code>result</code>中也生成<code>O</code>放在顶部，第二排，<code>BBC</code>，不一样，要全部一样才能放在最后的<code>result</code>中，所以这个是失败的。</p>
<p>如果将类<code>N</code>的定义改为<code>class N(A,C,B)</code><br><img src="http://www.cafepy.com/article/python_attributes_and_methods/images/beads_on_strings_solved.png" alt="solved-beads on strings"></p>
<hr>
<p>以上深入了解以下这个机制就可以，在编程的时候可以调用<code>__mro__</code>属性来查看一个类的<code>mro</code>，了解这个更有助于你理解你写的程序，比如<code>super</code>，比如描述符当中也会用到这个概念</p>
<hr>
<p>出处：</p>
<ol>
<li><a href="https://www.python.org/download/releases/2.3/mro/" target="_blank" rel="external">The Python 2.3 Method Resolution Order</a></li>
<li><a href="http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html" target="_blank" rel="external">python Attributes and Methods</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实我一直觉得遇到什么障碍再去学什么是效率比较高的，这时候是带着问题去解决问题，比起干看，没有与实际相结合，要有用多了。所以等你真正遇到这个问题了，再来看看。&lt;strong&gt; 这个&lt;code&gt;MRO&lt;/code&gt;是理解&lt;code&gt;super&lt;/code&gt;方法的前序 &lt;/st
    
    </summary>
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
      <category term="mro" scheme="http://www.mmmmmcclxxvii.cn/tags/mro/"/>
    
      <category term="python-object" scheme="http://www.mmmmmcclxxvii.cn/tags/python-object/"/>
    
  </entry>
  
  <entry>
    <title>python中的对象属性查找</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/08/object-attribute-look-up/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/08/object-attribute-look-up/</id>
    <published>2017-03-08T14:06:02.000Z</published>
    <updated>2017-04-02T02:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.betterprogramming.com/object-attribute-lookup-in-python.html" target="_blank" rel="external">原文链接</a></p>
<p>这里面已经讲的很详细了。暂时还没有自己的深刻的思考和理解，就先搬运过来。</p>
<h1 id="Instance-attribute-look-up-实例属性查找"><a href="#Instance-attribute-look-up-实例属性查找" class="headerlink" title="Instance attribute look up 实例属性查找"></a>Instance attribute look up 实例属性查找</h1><blockquote>
<p>The implementation works through a precedence chain that gives data descriptors priority over instance variables, instance variables priority over non-data descriptors, and assigns lowest priority to getattr() if provided.</p>
</blockquote>
<p>现在有一个类<code>C</code>和一个实例<code>c = C()</code>，现在调用<code>c.name</code>，相当于在实例<code>c</code>中查找<code>name</code>属性，流程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Get the Class from Instance</div><div class="line">Call the Class&apos;s special method __getattribute__.All objects have a default __getattribute__</div><div class="line">	Get the Class&apos;s __mro__ as ClassParents</div><div class="line">	For each ClassParent in ClassParents</div><div class="line">		if the Attribute is in the ClassParent&apos;s __dict__</div><div class="line">			if this attribute is data descriptor</div><div class="line">				return the result from calling the data descriptor&apos;s special method __get__()</div><div class="line">				Breaking the for each(do not continue searching the same Attribute any further)</div><div class="line">	</div><div class="line">	If the Attribute is in Instance&apos;s __dict__</div><div class="line">		return the value as it is(even if the value is a data descriptor)</div><div class="line">		#这个意思是即使是描述符也直接返回这个对象，不会去调用__get__(),返回值类似&lt;__main__ descriptor object at Ox..&gt;</div><div class="line">	For each ClassParent in ClassParents</div><div class="line">		if the Attribute is in the ClassParent&apos;s __dict__</div><div class="line">			if is a non-data descriptor</div><div class="line">				return the result from calling the non-data descriptor&apos;s special method __get__()</div><div class="line">			if it is Not a descriptor</div><div class="line">				return the value</div><div class="line">	</div><div class="line">	If Class has the special method __getattr__</div><div class="line">		return the result from calling the Class&apos;s special method __getattr__</div><div class="line">	</div><div class="line">	Raise an AttributeError</div></pre></td></tr></table></figure></p>
<p>有几个点要记住！</p>
<ol>
<li>descriptors are invoked by the <code>getattribute()</code> method</li>
<li>overriding <code>getattribute()</code> prevents automatic descriptor calls</li>
<li><code>getattribute()</code> is only available with new style classes and objects</li>
<li><code>object.getattribute()</code> and <code>type.getattribute()</code> make different calls to <code>get()</code></li>
<li>data descriptors always override instance dictionaries.</li>
<li>non-data descriptors may be overridden by instance dictionaries.</li>
</ol>
<h1 id="Class-attribute-look-up-类属性的查找"><a href="#Class-attribute-look-up-类属性的查找" class="headerlink" title="Class attribute look up 类属性的查找"></a>Class attribute look up 类属性的查找</h1><p>一个<code>metaclass</code> <code>M</code>，和一个<code>M</code>的实例，类<code>C</code>，这时候调用<code>C.name</code>的流程：<br>其实和实例访问一一对应，就是各自都升了一个level<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Get the MetaClass from Class</div><div class="line">Call the Metaclass&apos;s special method __getattribute__</div><div class="line">	Get the Metaclass&apos;s __mro__ as MetaParents</div><div class="line">	For each MetaParent in MetaParents</div><div class="line">		if the Attribute is in the MetaParent&apos;s __dict__</div><div class="line">			if is a data descriptor</div><div class="line">				return the result from calling the data descriptor&apos;s special method __get__()</div><div class="line">	</div><div class="line">	Get the Class&apos;s __mro__ as ClassParents</div><div class="line">	For each ClassParent in ClassParents</div><div class="line">		if the Attribute is in the ClassParents&apos;s __dict__</div><div class="line">			if is a(data or non-data) descriptor</div><div class="line">				return the result from calling the descriptor&apos;s special method __get__()</div><div class="line">				# 实例在这层上不会调用__get__()</div><div class="line">			else</div><div class="line">				return the value</div><div class="line">	</div><div class="line">	For each MetaParent in MetaParents</div><div class="line">		if the Attribute is in the MetaParents&apos;s __dict__</div><div class="line">			if is a non-data descriptor</div><div class="line">				return the result from calling the non-data descriptor&apos;s special method __get__()</div><div class="line">			if it is NOT a descriptor</div><div class="line">				return the value</div><div class="line">	</div><div class="line">	If MetaClass has the special method __getattr__</div><div class="line">		return the result from calling the MetaClass&apos;s special method __getattr__</div><div class="line">	</div><div class="line">	Raises an AttributeError</div></pre></td></tr></table></figure></p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a><a href="https://gist.github.com/Crayon277/cd05d4c058a5e11c7bd202aa44fff876" target="_blank" rel="external">例子</a></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Desc</span><span class="params">(object)</span>:</span> <span class="comment"># 定一个非数据描述符</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, msg)</span>:</span></div><div class="line">        self.msg = msg</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner=None)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"&#123;0&#125;: &#123;1&#125;"</span>.format(self.typ, self.msg) <span class="comment"># self.typ是啥？？？？</span></div><div class="line"></div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonDesc</span><span class="params">(Desc)</span>:</span></div><div class="line">    <span class="comment"># non-data descriptor </span></div><div class="line">    typ = <span class="string">'NonDesc'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataDesc</span><span class="params">(Desc)</span>:</span></div><div class="line">    <span class="comment"># data descriptor</span></div><div class="line">    typ = <span class="string">'DataDesc'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">M</span><span class="params">(type)</span>:</span></div><div class="line">    x = <span class="string">'x from M'</span></div><div class="line">    y = NonDesc(<span class="string">'y from cls M'</span>)</div><div class="line">    z = DataDesc(<span class="string">'z from cls M'</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"getattr M &#123;0&#125;"</span>.format(name)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="comment">#t = 't from A'</span></div><div class="line">    <span class="comment">#u = NonDesc('u from cls A')</span></div><div class="line">    <span class="comment">#v = DataDesc('v from cls A')</span></div><div class="line">    x = <span class="string">'x from A'</span></div><div class="line">    y = NonDesc(<span class="string">'y from cls A'</span>)</div><div class="line">    z = DataDesc(<span class="string">'z from cls A'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    metaclass is M</div><div class="line">    """</div><div class="line">    __metaclass__ = M</div><div class="line">    <span class="string">"""</span></div><div class="line">    这个metaclass什么用？？？？</div><div class="line">    """</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    metaclass is inherited from C</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"getattr C: &#123;0&#125;"</span>.format(name)</div><div class="line">    </div><div class="line"></div><div class="line">c = C()</div><div class="line"><span class="keyword">print</span> <span class="string">'******'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'c.__class__'</span>, c.__class__  <span class="comment">#其实就是type(c), 还有注意c是新式类，格式应该是&lt;class '__main__.C'&gt;之类的</span></div><div class="line"><span class="keyword">print</span> <span class="string">'c.__class__.__getattribute__'</span>, c.__class__.__getattribute__ <span class="comment"># 因为c.__class__也是一个对象</span></div><div class="line"><span class="comment"># &lt;slot wrapper '__getattribute__' of 'object' objects&gt;</span></div><div class="line"><span class="keyword">print</span> <span class="string">'c.__class__.__mro__'</span>, c.__class__.__mro__ <span class="comment"># method resolution order C B A O</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'******'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'c.x'</span>, c.x </div><div class="line"><span class="string">"""</span></div><div class="line">父类们寻找顺序是根据c.__class__.__mro__ 来的</div><div class="line">c先去寻找父类们中有没有x的描述符，没有，然后在自己的__dict__中找x，也咩有，然后再去父类们的__dict__中找</div><div class="line">有没有这个属性名的non-data 描述符，没有，不是描述符而是直接属性的呢？A中有，返回A中的x值</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">'c.y'</span>, c.y</div><div class="line"><span class="string">"""</span></div><div class="line">同上，父类的顺序不废话了</div><div class="line">最终在第三阶段找到A中的y，它是一个non-data descriptor，NonDesc: y from cls A</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">'c.z'</span>, c.z</div><div class="line"><span class="string">"""</span></div><div class="line">在第一个阶段中的A中找到z 是一个data descriptor，饭后 DataDesc: z from cls A</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">'c.nope'</span>, c.nope</div><div class="line"><span class="string">"""</span></div><div class="line">当前三个阶段都找不到的时候，如果类中有定义__getattr__，就到这里去，没有报错</div><div class="line">这里所有三个阶段没有nope属性，然后到了__getattr__，返回 getattr C: nope</div><div class="line">"""</div><div class="line"></div><div class="line">c.t = <span class="string">'t from obj c'</span></div><div class="line">c.u = NonDesc(<span class="string">'u from obj c'</span>)</div><div class="line">c.v = DataDesc(<span class="string">'v from obj c'</span>)</div><div class="line">c.x = <span class="string">'x from obj c'</span></div><div class="line">c.y = NonDesc(<span class="string">'y from obj c'</span>)</div><div class="line">c.z = DataDesc(<span class="string">'z from obj c'</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'******'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'c.t'</span>, c.t</div><div class="line"><span class="string">"""</span></div><div class="line">如上，在第二个阶段找到t, 返回 t from obj c</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">'c.u'</span>, c.u</div><div class="line"><span class="string">"""</span></div><div class="line">在第二个阶段在c字典里面找到，不管是值还是descriptor ，这里会调用__get__()  NonDesc: u from obj c</div><div class="line">update:更正</div><div class="line">因为在</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">'c.v'</span>, c.v</div><div class="line"><span class="string">"""</span></div><div class="line">在第二阶段c字典里找到, 调用__get__() ，返回 DataDesc: v from obj c</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">'c.x'</span>, c.x</div><div class="line"><span class="string">"""</span></div><div class="line">因为在第一阶段是在类父类中找描述符，虽然A中有属性x但不是描述符，因此进入第二个阶段，在实例字典中找，不管是不是描述符</div><div class="line">只要名字对了就返回. 这里在这个阶段返回x from obj c</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">'c.y'</span>, c.y</div><div class="line"><span class="string">"""</span></div><div class="line">同上，返回的是 NonDesc: y from obj c</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">'c.z'</span>, c.z</div><div class="line"><span class="string">"""</span></div><div class="line">同上，返回的是 DataDesc: z from obj c</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'******'</span>  <span class="comment"># 这里是用到 class attribute look up 。 以上是对实例进行点运算</span></div><div class="line"><span class="keyword">print</span> <span class="string">"C.x"</span>, C.x</div><div class="line"><span class="string">"""</span></div><div class="line">因为B的metaclass是M了，C继承B，C现在的metaclass也是M</div><div class="line">现在要将上面的所有概念都升级，原来class变成metaclass，原来instance变成class</div><div class="line">先根据metaclass里的mro决定先后顺序metaparents</div><div class="line">因为这里是类属性访问，C类的metaclass是M，M.__mro__ 是 (&lt;class '__main__.M'&gt;, &lt;type 'type'&gt;, &lt;type 'object'&gt;)</div><div class="line">按顺序找x的描述符，但M中没有x的描述符，然后type，object都没有。</div><div class="line">进入第二个阶段，先计算C.__mro__,按照顺序依次访问类字典C,B,A,O ， </div><div class="line">如果有属性重名，先要描述符，不然只要是在__dict__中就返回</div><div class="line">c中没有x,然后去B，B里面也咩有x，到A中，有x但是不是描述符，没关系直接返回,因为也没有名字为x的描述符了。</div><div class="line">返回x from A</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">"C.y"</span>, C.y</div><div class="line"><span class="string">"""</span></div><div class="line">同上，虽然在M中有y但是是非数据描述符，在第2阶段中的A类中找到y非数据描述符,返回 NonDesc: y from cls A</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">"C.z"</span>, C.z</div><div class="line"><span class="string">"""</span></div><div class="line">这是在第一个阶段中的M里找到z数据描述符， 返回 DataDesc: z from cls M</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">"C.nope"</span>, C.nope</div><div class="line"><span class="string">"""</span></div><div class="line">上面三个阶段都没有，进入第四个阶段，这个阶段不是去C中的__getattr__，因为上面说了都升了一级，现在是在</div><div class="line">M中的__getattr__，如果M里面没有__getattr__，那么就回报错，现在M有，返回 getattr M nope</div><div class="line">"""</div><div class="line"></div><div class="line">C.t = <span class="string">'t from obj C'</span></div><div class="line">C.u = NonDesc(<span class="string">'u from obj C'</span>)</div><div class="line">C.v = DataDesc(<span class="string">'v from obj C'</span>)</div><div class="line">C.x = <span class="string">'x from obj C'</span></div><div class="line">C.y = NonDesc(<span class="string">'y from obj C'</span>)</div><div class="line">C.z = DataDesc(<span class="string">'z from obj C'</span>)</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">如果是类属性访问，好像没有A，B什么事 !!!!</div><div class="line">写在流程搞错之前，之前在第二阶段没有计算类的__mro__</div><div class="line">重新看一下流程</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">'******'</span></div><div class="line"><span class="keyword">print</span> <span class="string">"C.t"</span>, C.t</div><div class="line"><span class="string">"""</span></div><div class="line">因为metaclass以及mro中都没有t，进入下一个阶段</div><div class="line">在第二阶段中现在C类中有t这个属性了，返回 t from obj C</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">"C.u"</span>, C.u</div><div class="line"><span class="string">"""</span></div><div class="line">同上，在第二阶段中C类的__dict__中找到，返回 NonDesc: u from obj C</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">"C.v"</span>, C.v</div><div class="line"><span class="string">"""</span></div><div class="line">同上，在第二阶段中返回 DataDesc: v from obj C</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">"C.x"</span>, C.x</div><div class="line"><span class="string">"""</span></div><div class="line">和M中有重名，但是因为M中的不是数据描述符，这个的优先级高，在第二阶段返回 x from obj C</div><div class="line">虽然A中也有x，但是mro顺序C排在A前面</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">"C.y"</span>, C.y</div><div class="line"><span class="string">"""</span></div><div class="line">同上，有重名，但是M中是非数据描述符，第一阶段过，到第二阶段，返回 NonDesc: y from obj C</div><div class="line">然后A中同理</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">"C.z"</span>, C.z</div><div class="line"><span class="string">"""</span></div><div class="line">重名，但是z在M中是数据描述符，在第一阶段就返回 DataDesc: z from cls M</div><div class="line">"""</div><div class="line"><span class="keyword">print</span> <span class="string">"C.nope"</span>, C.nope</div><div class="line"><span class="string">"""</span></div><div class="line">这个没有变 getattr M nope</div><div class="line">"""</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">******</div><div class="line">c.__class__ &lt;class '__main__.C'&gt;</div><div class="line">c.__class__.__getattribute__ &lt;slot wrapper '__getattribute__' of 'object' objects&gt;</div><div class="line">c.__class__.__mro__ (&lt;class '__main__.C'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)</div><div class="line">******</div><div class="line">c.x x from A</div><div class="line">c.y NonDesc: y from cls A</div><div class="line">c.z DataDesc: z from cls A</div><div class="line">c.nope getattr C: nope</div><div class="line">******</div><div class="line">c.t t from obj c</div><div class="line">c.u &lt;__main__.NonDesc object at 0x1009b8f10&gt;</div><div class="line">c.v &lt;__main__.DataDesc object at 0x1009b8f50&gt;</div><div class="line">c.x x from obj c</div><div class="line">c.y &lt;__main__.NonDesc object at 0x1009b8f90&gt;</div><div class="line">c.z DataDesc: z from cls A</div><div class="line">******</div><div class="line">C.x x from A</div><div class="line">C.y NonDesc: y from cls A</div><div class="line">C.z DataDesc: z from cls M</div><div class="line">C.nope getattr M nope</div><div class="line">******</div><div class="line">C.t t from obj C</div><div class="line">C.u NonDesc: u from obj C</div><div class="line">C.v DataDesc: v from obj C</div><div class="line">C.x x from obj C</div><div class="line">C.y NonDesc: y from obj C</div><div class="line">C.z DataDesc: z from cls M</div><div class="line">C.nope getattr M nope</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      分为实例调用和类调用，两者查找属性的流程是不一样的
    
    </summary>
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
      <category term="object" scheme="http://www.mmmmmcclxxvii.cn/tags/object/"/>
    
  </entry>
  
  <entry>
    <title>descriptor</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/08/descriptor/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/08/descriptor/</id>
    <published>2017-03-08T00:50:01.000Z</published>
    <updated>2017-04-02T02:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实自己没有深入的研究源码，这篇也是基于阅读一些官方文档和他人的博客做的总结。<br>我这里的思路是从描述符的渊源到为什么有这个描述符，然后怎么用<br>这里先直接给出描述符的定义，先有个印象，如果一开始阅读感觉没什么联系，没关系，最终那些点将连成线的。<br>官方的定义：</p>
<blockquote>
<p>In general, a descriptor is an object attribute with “binding behavior”, one whose attribute access has been overridden by methods in the descriptor protocol. Those methods are <strong>get</strong>(), <strong>set</strong>(), and <strong>delete</strong>(). If any of those methods are defined for an object, it is said to be a descriptor.<br>from – <a href="https://docs.python.org/2/howto/descriptor.html#definition-and-introduction" target="_blank" rel="external">Descriptor HowTo Guide</a></p>
</blockquote>
<p>也就是只要一个类定义了<code>__get__()</code>,<code>__set__()</code>,<code>__delete__()</code>当中的任意一个<strong>特殊方法</strong>,这个类就有了个别名“描述符”啦</p>
<h1 id="描述符的由来"><a href="#描述符的由来" class="headerlink" title="描述符的由来"></a>描述符的由来</h1><p>首先，因为python是一种动态编译的语言，他能在运行中动态添加类属性或类对象属性。那这些属性是被保存在比如<code>a.__dict__</code>这个里面，这里<code>a</code>是一个实例<code>a=A()</code>。其实类也有一个<code>__dict__</code>属性，通过<code>A.__dict__</code>就可以访问到.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            self.attr = <span class="number">1</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">print</span> self.attr</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(a)</div><div class="line">[<span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__format__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__module__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'attr'</span>, <span class="string">'foo'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(A)</div><div class="line">[<span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__format__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__module__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'foo'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.__dict__</div><div class="line">&#123;<span class="string">'attr'</span>: <span class="number">1</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A.__dict__</div><div class="line">dict_proxy(&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'A'</span> objects&gt;, <span class="string">'foo'</span>: &lt;function foo at <span class="number">0x101bba668</span>&gt;, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'A'</span> objects&gt;, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x101bba5f0</span>&gt;&#125;)</div></pre></td></tr></table></figure>
<p>注意到在<code>A</code>类中定义了一个<code>foo</code>函数，像这样的函数在C++语言中被称为成员函数，但是可以看到在<code>a.__dict__</code>中没有<code>foo</code>，在<code>A.__dict__</code>中有。其实通过访问，可以看出<code>a.__dict__</code>中保存的都是一些变量属性。这么理解，在C++中成员函数是被所有对象所共享的，不会为没个对象复制一份，这里也一样，可以看作是类的一个属性，不是实例的属性。那其实在python中，这么做是牵涉到了它的另外的两个概念，<strong>绑定，未绑定函数</strong>和<strong>描述符</strong>。先说一下，所有的类成员函数都是<strong><code>non-data despriptor</code></strong>。后面会继续解释</p>
<hr>
<blockquote>
<p>In a nutshell, a descriptor is a way to customize what happens when you reference an attribute on a model.<br>from – <a href="http://martyalchin.com/2007/nov/23/python-descriptors-part-1-of-2/" target="_blank" rel="external">Python Descriptors, Part 1 of 2</a></p>
</blockquote>
<hr>
<blockquote>
<p>Descriptor are the mechanism behind properties, methods,  static methods, class methods and <code>super()</code><br>from – <a href="https://docs.python.org/2/howto/descriptor.html#definition-and-introduction" target="_blank" rel="external">Descriptor HowTo Guide</a></p>
</blockquote>
<hr>
<h1 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h1><p><a href="http://www.mmmmmcclxxvii.cn/2017/03/08/object-attribute-look-up/">查找属性的访问顺序</a><br>建议先把下面的看了再来看这个</p>
<p>我之所以说先看下面，又不得不把这个主题先放上来，是因为其实描述符归根结底，目前看到就是对属性的取值赋值操作，<strong>只不过是对这个操作封装了一下</strong>而已。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a.attr = <span class="number">1</span></div><div class="line">tmp = a.attr</div></pre></td></tr></table></figure></p>
<p>一般的取值赋值就是这样子的，如果<code>attr</code>事先在类里面定义好了的<code>self.attr = arg</code> 上面的<code>a.attr = 1</code>其实就是重新将“标签”<code>a.attr</code>贴到<code>1</code>数值上去，如果没有那就是动态生成<code>attr</code>属性。<br><strong>但是这样的赋值太单一了，什么意思，也就是说，如果我要对赋入的值做下额外的检查，比如学生的成绩，不可能出现负数，身高也不可能出现负数。所以想到了在<code>__init__</code>当中增加一些逻辑代码进行检查</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,score)</span>:</span></div><div class="line">	<span class="keyword">assert</span> score&gt;=<span class="number">0</span>,<span class="string">"value error"</span></div><div class="line">	self.score = score</div></pre></td></tr></table></figure></p>
<p>但是这样只是在初始化的时候，像<code>a = A(-1)</code>会报错，那之后如果<code>a.score = -100</code>像这样的误操作，也没人阻止。那我们又有了另一种思路<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></div><div class="line">	<span class="keyword">return</span> self.score</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self,new_score)</span>:</span></div><div class="line">	<span class="keyword">assert</span> new_score&gt;=<span class="number">0</span>,<span class="string">"value error"</span></div><div class="line">	self.score = new_score</div></pre></td></tr></table></figure></p>
<p>通过<code>a.set_score(-100)</code>，调用一个函数，并在函数体内进行检查来进行赋值。</p>
<p><strong>总的来讲，python的属性获取，设置，这个属性只是一个存储的地方，只是一个容器，但往往你可能需要更多的功能，比如赋值的时候检验，然后，一般的，是用一些方法来做这些事情，<em>但是如果对于已经存在了的属性，你想用函数代替取值，赋值，你就要重写代码，找到所有用到这些属性的方法，然后改成函数</em>，比如上面的所有<code>a.score = 1</code>像这样的操作改成<code>a.set_score(1)</code>。这样就增加了工作量，这也是为什么在java程序中一个简单的取值都要封装成一个函数，就是为了避免何种情况，常见的模式也就是属性定义为私有变量，然后开放一个公有接口。python中的描述符只不过是另一种方法来实现这种对属性额外控制的需求而已</strong></p>
<h1 id="描述符实例"><a href="#描述符实例" class="headerlink" title="描述符实例"></a>描述符实例</h1><p>描述符的用法应该不局限于下面给出的例子，要多看其他高人的代码！！！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Positive</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line">		self.name = name</div><div class="line">		</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self,instance,owner)</span>:</span></div><div class="line">		<span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">			<span class="keyword">return</span> self <span class="comment">#这里相当于如果通过类调用,Student.score，就返回是类似&lt;descriptor.Positive object at 0x123455..&gt;之类的</span></div><div class="line">		<span class="keyword">return</span> instance.__dict__[self.name]</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self,instance,value)</span>:</span></div><div class="line">		<span class="keyword">if</span> value &lt; <span class="number">0</span>:</div><div class="line">			<span class="keyword">raise</span> ValueError(<span class="string">"negative value error..."</span>)</div><div class="line">		instance.__dict__[self.name] = value</div></pre></td></tr></table></figure></p>
<p>上面就定义了一个描述符。其实就是一个类，描述符只是个名称而已。在我的世界里，我想叫它皮皮虾都可以。只是全世界就这么流通规定了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">	score = Positive(<span class="string">'score'</span>) <span class="comment">#这句话就将score属性让描述符代理了</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></div><div class="line">		self.name = name</div><div class="line">		self.score = score</div></pre></td></tr></table></figure></p>
<p>现在如果有这么一个语句<code>s = Student(&#39;cy&#39;,100);a = s.score</code>，其实是相当于在做<code>a = type(s).__dict__[&#39;score&#39;].__get__(s,type(s))</code><br>可以查看<code>Student.__dict__</code>中的<code>score</code>属性是<code>&#39;score&#39;: &lt;__main__.Positive object at 0x101bb8ed0&gt;</code>这样子的。<br>当作了<code>type(s).__dict__[&#39;score&#39;]</code>时其实就是获得了一个实例，之后还可以继续用点运算符往下接着做。</p>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="Positive-描述符中的-set-为什么参数中没有类？"><a href="#Positive-描述符中的-set-为什么参数中没有类？" class="headerlink" title="Positive 描述符中的__set__为什么参数中没有类？"></a>Positive 描述符中的<code>__set__</code>为什么参数中没有类？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Student.__dict__</div><div class="line">dict_proxy(&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'score'</span>: &lt;__main__.Positive object at <span class="number">0x101bb8ed0</span>&gt;, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'Student'</span> objects&gt;, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'Student'</span> objects&gt;, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x101bbaaa0</span>&gt;&#125;)</div><div class="line"><span class="comment">#注意上面的score属性的值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Student.score = <span class="number">12</span>  <span class="comment"># 通过类访问</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Student.__dict__</div><div class="line">dict_proxy(&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'score'</span>: <span class="number">12</span>, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'Student'</span> objects&gt;, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'Student'</span> objects&gt;, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x101bbaaa0</span>&gt;&#125;)</div><div class="line"><span class="comment">#再对比一下score的值</span></div></pre></td></tr></table></figure>
<p><strong>当类调用的时候，其实就是设置同名新值了，它将原来的描述符给替换覆盖了。</strong></p>
<h3 id="Student类里面的score和self-score-到底用的是哪个？？"><a href="#Student类里面的score和self-score-到底用的是哪个？？" class="headerlink" title="Student类里面的score和self.score,到底用的是哪个？？"></a>Student类里面的score和self.score,到底用的是哪个？？</h3><p>可以先看一下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'cy'</span>,<span class="string">'100'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.__dict__</div><div class="line">&#123;<span class="string">'score'</span>: <span class="string">'100'</span>, <span class="string">'name'</span>: <span class="string">'cy'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Student.__dict__</div><div class="line">dict_proxy(&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'score'</span>: &lt;__main__.Positive object at <span class="number">0x101bb8ed0</span>&gt;, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'Student'</span> objects&gt;, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'Student'</span> objects&gt;, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x101bbaaa0</span>&gt;&#125;)</div></pre></td></tr></table></figure></p>
<p>其实这里涉及到一个优先级的问题，也就是上面的访问属性的顺序链接。这里可以再跳回去看。因为描述符的优先级高！并且会改变默认的<code>get</code>,<code>set</code>方法。</p>
<blockquote>
<p>If an instance’s dictionary has an entry with the same name as a data descriptor, the data descriptor takes precedence. If an instance’s dictionary has entry with the same name as a non-data descriptor,the dictionary entry takes precedence.<br>from <a href="https://docs.python.org/2/howto/descriptor.html#descriptor-protocol" target="_blank" rel="external">Descriptor HowTo Guide</a></p>
</blockquote>
<p>什么是non-data descriptor后面会说明。</p>
<h3 id="2引申的一个问题就是如果self-score-score没有定义会是什么情况"><a href="#2引申的一个问题就是如果self-score-score没有定义会是什么情况" class="headerlink" title="2引申的一个问题就是如果self.score = score没有定义会是什么情况"></a><code>2</code>引申的一个问题就是如果<code>self.score = score</code>没有定义会是什么情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    score = Positive(<span class="string">'score'</span>)</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line"><span class="meta">... </span>        self.name = name</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'cy'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.__dict__</div><div class="line">&#123;<span class="string">'score'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'cy'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">-10</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">10</span>, <span class="keyword">in</span> __set__</div><div class="line">ValueError: negative error</div></pre></td></tr></table></figure>
<p>还是照样行得通。因为<code>instance.__dict__[self.name] = value</code>.虽然初始化的时候没有<code>score</code>这个属性，但其实后面的字典操作，相当于动态增加了这个属性，而且访问的优先级照样根据那个顺序来</p>
<h3 id="如果是self-score-Positive-39-score-39-会怎么样"><a href="#如果是self-score-Positive-39-score-39-会怎么样" class="headerlink" title="如果是self.score = Positive(&#39;score&#39;)会怎么样"></a>如果是<code>self.score = Positive(&#39;score&#39;)</code>会怎么样</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line"><span class="meta">... </span>        self.name = name</div><div class="line"><span class="meta">... </span>        self.score = Positive(<span class="string">'score'</span>)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'cy'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.__dict__</div><div class="line">&#123;<span class="string">'score'</span>: &lt;__main__.Positive object at <span class="number">0x101bc70d0</span>&gt;, <span class="string">'name'</span>: <span class="string">'cy'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">-10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.__dict__</div><div class="line">&#123;<span class="string">'score'</span>: <span class="number">-10</span>, <span class="string">'name'</span>: <span class="string">'cy'</span>&#125;</div></pre></td></tr></table></figure>
<p>没有起到作用，这是必然的。如果你知道访问顺序了之后，访问<code>s.score</code>时，因为类中没有同名的描述符，所以到实例中的<code>__dict__</code>看，如果有这个<code>key</code>，返回，但这里是赋值操作，参考另一篇<a href="http://www.mmmmmcclxxvii.cn/2017/03/29/python-name-and-values/">python name and values</a>，<code>s.scorei = -10</code>只不过是将<code>score</code>这个<strong>name</strong>重新贴标签贴到数值<code>-10</code>上去。</p>
<h3 id="get-中参数owner什么用，也没有用到它啊？"><a href="#get-中参数owner什么用，也没有用到它啊？" class="headerlink" title="__get__中参数owner什么用，也没有用到它啊？"></a><code>__get__</code>中参数<code>owner</code>什么用，也没有用到它啊？</h3><p>后面在<code>classmethod</code>中就会用到这个参数。其实函数参数写在哪里，也不一定都要用到，但更关心为什么要这么设计。后面看看源代码</p>
<p>看一个图：<br><img src="http://onexs3cnv.bkt.clouddn.com/descriptor-example-student.png" alt="descriptor-example-Student"></p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>python中有个叫修饰器的东西，<code>property()</code>，它是描述符的简介版<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@property</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></div><div class="line">	<span class="keyword">return</span> self.__score</div><div class="line"></div><div class="line"><span class="meta">@score.setter</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self,score)</span>:</span></div><div class="line">	<span class="keyword">if</span> score &lt; <span class="number">0</span>:</div><div class="line">		<span class="keyword">raise</span> ValueError(<span class="string">'negative'</span>)</div><div class="line">	self.__score = score</div></pre></td></tr></table></figure></p>
<blockquote>
<p>calling propery() is a succinct way of building a data descriptor that triggers function calls upon access to an attribute<br>from <a href="https://docs.python.org/2/howto/descriptor.html#properties" target="_blank" rel="external">Descriptor HowTo Guide</a></p>
</blockquote>
<p>上面的写法<code>@property</code>使用到了<a href="">装饰器</a></p>
<ol>
<li>但是如果一个类里面有很多属性是相同的限制，比如学生的身高不能负数，成绩不能负数，体重不能负数，如果用<code>property</code>的话，那就多了很多重复的代码，每个属性都要像上面一样写一遍。这时候就可以考虑用写一个描述符类来“一统天下”了</li>
<li>在之前说的对于已存在的属性，如果要对它们要进行限制，通过方法的话要找到每一处，这样很不方便，如果使用描述符只需要在类中加上<code>tall = Positive(&#39;tall&#39;)</code>像这样的语句就可以了，而且完全没有任何副作用！！</li>
</ol>
<hr>
<blockquote>
<p>If looked-up value is an object defining one of the descriptor methods, then python may override the default behavior and invoke the descriptor method instead.<br>from <a href="https://docs.python.org/2/howto/descriptor.html#definition-and-introduction" target="_blank" rel="external">Descriptor HowTo Guide</a></p>
</blockquote>
<h1 id="描述符的种类"><a href="#描述符的种类" class="headerlink" title="描述符的种类"></a>描述符的种类</h1><blockquote>
<p>学习也要遵循20/80定律，学到的20%就足够写程序了，先跑起来再来完善接下来的80%<br>– 尔东诚霍划夫斯基<br>描述符分<code>data descriptor</code>和<code>non-data descriptor</code><br>两者之前的区别就是，后者只定义了<code>__get__</code>。也就是没有设置。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实自己没有深入的研究源码，这篇也是基于阅读一些官方文档和他人的博客做的总结。&lt;br&gt;我这里的思路是从描述符的渊源到为什么有这个描述符，然后怎么用&lt;br&gt;这里先直接给出描述符的定义，先有个印象，如果一开始阅读感觉没什么联系，没关系，最终那些点将连成线的。&lt;br&gt;官方的定义：
    
    </summary>
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
      <category term="descriptor" scheme="http://www.mmmmmcclxxvii.cn/tags/descriptor/"/>
    
      <category term="object" scheme="http://www.mmmmmcclxxvii.cn/tags/object/"/>
    
  </entry>
  
  <entry>
    <title>zlt-project</title>
    <link href="http://www.mmmmmcclxxvii.cn/2017/03/01/zlt-project/"/>
    <id>http://www.mmmmmcclxxvii.cn/2017/03/01/zlt-project/</id>
    <published>2017-03-01T02:24:31.000Z</published>
    <updated>2017-04-02T03:10:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在用python写，这个也用python试试。需求图示<br><img src="http://onexs3cnv.bkt.clouddn.com/demands.jpeg" alt="demands"></p>
<p>用到：</p>
<ul>
<li>正则表达式：用来匹配test.py中的test名的</li>
<li>shutil模块，shutil.copy复制</li>
<li>os模块，切换目录用的。os.listdir,os.path.isfile等</li>
<li>sys模块，sys.argv命令行参数</li>
<li>Tkinter，图形化界面</li>
</ul>
<hr>
<h1 id="主要的拷贝逻辑写出来"><a href="#主要的拷贝逻辑写出来" class="headerlink" title="主要的拷贝逻辑写出来"></a>主要的拷贝逻辑写出来</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">path_a = sys.argv[<span class="number">1</span>]</div><div class="line">path_b = sys.argv[<span class="number">2</span>]</div><div class="line"></div><div class="line">candidate_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(path_b) <span class="keyword">if</span> os.path.isfile(x) <span class="keyword">and</span> x[<span class="number">0</span>]!=<span class="string">'.'</span>]</div><div class="line">p = re.compile(<span class="string">'\w+'</span>)</div><div class="line">candidate = [p.match(file_name).group() <span class="keyword">for</span> file_name <span class="keyword">in</span> candidate_list]</div><div class="line"><span class="comment">#先把B文件中的文件名提取出来</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> prefix <span class="keyword">in</span> candidate:</div><div class="line">	<span class="keyword">for</span> every_file <span class="keyword">in</span> os.listdir(path_a):</div><div class="line">		<span class="keyword">if</span> predix <span class="keyword">in</span> every_file:</div><div class="line">			file_path = path_a + <span class="string">'/'</span> + every_file</div><div class="line">			shutil.copy(file_path,path_b)</div><div class="line">			<span class="keyword">print</span> <span class="string">'copy %s to %s'</span>%(every_file,path_b)</div></pre></td></tr></table></figure>
<p>接下来就是披上一件外衣了，Tkinter。<img src="http://onexs3cnv.bkt.clouddn.com/mind-map-project-zlt.png" alt="思维导图"><br>下面是代码</p>
<h1 id="zlt-main-frame-listbox-py-这个是显示文件夹功能的窗口"><a href="#zlt-main-frame-listbox-py-这个是显示文件夹功能的窗口" class="headerlink" title="zlt_main_frame_listbox.py 这个是显示文件夹功能的窗口"></a><code>zlt_main_frame_listbox.py</code> 这个是显示文件夹功能的窗口</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># File Name: zlt.py</span></div><div class="line"><span class="comment"># Created Time: Sun Mar  5 21:56:03 2017</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Crayon Chaney &lt;mmmmmcclxxvii@gmail.com&gt;'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> Tkinter <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"><span class="keyword">import</span> pdb</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowList</span><span class="params">(Frame)</span>:</span></div><div class="line">    <span class="comment"># count = 0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,parent,initdir=None)</span>:</span></div><div class="line">        <span class="comment"># super(ShowList,self).__init__(parent)</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        上面这个为什么不行？？？</div><div class="line">        """</div><div class="line">        Frame.__init__(self,parent)</div><div class="line">        </div><div class="line">        self.parent = parent</div><div class="line"></div><div class="line">        self.cwd = StringVar(self)</div><div class="line">        self.wholecwd = StringVar(self) </div><div class="line">        self.dir_display = Label(self,font = (<span class="string">'Helvetica'</span>,<span class="number">12</span>,<span class="string">'bold'</span>),fg = <span class="string">'blue'</span>)</div><div class="line">        self.dir_display.pack()</div><div class="line"></div><div class="line">        self.dirfm = Frame(self)</div><div class="line">        self.dirsb_y = Scrollbar(self.dirfm)</div><div class="line">        self.dirsb_x = Scrollbar(self.dirfm,orient=<span class="string">"horizontal"</span>)</div><div class="line">        self.dirlb = Listbox(self.dirfm,yscrollcommand = self.dirsb_y.set,xscrollcommand = self.dirsb_x.set,height =<span class="number">20</span>,width = <span class="number">30</span> )</div><div class="line">        self.dirsb_y.config(command = self.dirlb.yview)</div><div class="line">        self.dirsb_x.config(command = self.dirlb.xview)</div><div class="line"></div><div class="line">        self.dirlb.bind(<span class="string">'&lt;Double-1&gt;'</span>,func=self.selectAndGo)</div><div class="line"></div><div class="line">        self.dirsb_y.pack(side = RIGHT,fill=Y)</div><div class="line">        self.dirsb_x.pack(side = BOTTOM,fill=X)</div><div class="line">        self.dirlb.pack(side=LEFT,fill=BOTH)</div><div class="line">        </div><div class="line">        self.dirfm.pack()</div><div class="line"></div><div class="line">        self.input = Entry(self,textvariable=self.cwd)</div><div class="line">        self.input.bind(<span class="string">'&lt;Return&gt;'</span>,func = self.doLs)</div><div class="line">        self.input.pack()</div><div class="line"></div><div class="line">        self.dirbuttonfm = Frame(self)</div><div class="line">        </div><div class="line">        self.clrbutton = Button(self.dirbuttonfm,text=<span class="string">'clear'</span>,command=self.clrEntry)</div><div class="line">        self.clrbutton.pack(side=LEFT)</div><div class="line">        self.listbutton = Button(self.dirbuttonfm,text=<span class="string">'List Directory'</span>,command=self.doLs)</div><div class="line">        self.listbutton.pack(side=LEFT)</div><div class="line"></div><div class="line">        self.dirbuttonfm.pack()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> initdir:</div><div class="line">            self.cwd.set(initdir)</div><div class="line">            self.doLs()</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clrEntry</span><span class="params">(self,ev = None)</span>:</span></div><div class="line">        self.cwd.set(<span class="string">''</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectAndGo</span><span class="params">(self,ev=None)</span>:</span></div><div class="line">        self.last = self.cwd.get()</div><div class="line">        self.dirlb.config(selectbackground=<span class="string">'red'</span>)</div><div class="line">        self.cwd.set(self.dirlb.selection_get())</div><div class="line">        self.doLs()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doLs</span><span class="params">(self,ev = None)</span>:</span></div><div class="line">        cur = self.cwd.get()</div><div class="line">        error = <span class="string">''</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(cur):</div><div class="line">            error = <span class="string">'%s is not exists'</span>%cur</div><div class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> os.path.isdir(cur):</div><div class="line">            error = <span class="string">"%s is not dir"</span>%cur</div><div class="line"></div><div class="line">        <span class="keyword">if</span> error:</div><div class="line">            self.cwd.set(error)</div><div class="line">            self.parent.update()</div><div class="line">            sleep(<span class="number">2</span>)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (hasattr(self,<span class="string">'last'</span>) <span class="keyword">and</span> self.last):</div><div class="line">                self.last = os.curdir</div><div class="line">            self.cwd.set(self.last)</div><div class="line">            self.dirlb.config(selectbackground=<span class="string">'LightSkyBlue'</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        self.cwd.set(<span class="string">'Fetching...'</span>)</div><div class="line">        self.parent.update()</div><div class="line"></div><div class="line">        dirfiles = os.listdir(cur)</div><div class="line">        os.chdir(cur)</div><div class="line"></div><div class="line">        self.dir_display.config(text=os.getcwd())</div><div class="line">        self.wholecwd.set(os.getcwd())</div><div class="line">        dirfiles.sort()</div><div class="line">        self.dirlb.delete(<span class="number">0</span>,END)</div><div class="line">        self.dirlb.insert(END,os.curdir)</div><div class="line">        self.dirlb.insert(END,os.pardir)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> eachdirname <span class="keyword">in</span> dirfiles:</div><div class="line">            self.dirlb.insert(END,eachdirname)</div><div class="line"></div><div class="line">        self.cwd.set(os.curdir)</div><div class="line">        self.dirlb.config(selectbackground=<span class="string">'LightSkyBlue'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    root = Tk()</div><div class="line">    ShowList(root,os.curdir).pack()</div><div class="line">    root.mainloop()</div></pre></td></tr></table></figure>
<h1 id="zlt-windows-py-主窗口"><a href="#zlt-windows-py-主窗口" class="headerlink" title="zlt_windows.py 主窗口"></a><code>zlt_windows.py</code> 主窗口</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># File Name: zlt_windows.py</span></div><div class="line"><span class="comment"># Created Time: Mon Mar  6 14:13:52 2017</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Crayon Chaney &lt;mmmmmcclxxvii@gmail.com&gt;'</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> zlt_main_frame_listbox <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CopyDir</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.top = Tk()</div><div class="line">        self.top.title(<span class="string">'你花大爷呕心沥血作'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># ShowList(self.top).pack(side=LEFT)</span></div><div class="line">        self.A = ShowList(self.top,os.curdir)</div><div class="line">        self.A.pack(side=LEFT)</div><div class="line">        self.topbuttonfm = Frame(self.top)</div><div class="line">        self.copybutton = Button(self.topbuttonfm,text=<span class="string">'&lt;--A  copy  B--&gt;'</span>,width = <span class="number">15</span>,command = self.confirmCopy)</div><div class="line">        self.copybutton.pack()</div><div class="line">        self.quitbutton = Button(self.topbuttonfm,text=<span class="string">'退出'</span>,command = self.top.quit)</div><div class="line">        self.quitbutton.pack()</div><div class="line">        self.topbuttonfm.pack(side = LEFT,ipadx = <span class="number">5</span>)</div><div class="line">        <span class="comment"># ShowList(self.top).pack(side=LEFT)</span></div><div class="line">        self.B = ShowList(self.top,os.curdir)</div><div class="line">        self.B.pack(side=LEFT,ipadx = <span class="number">5</span>)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">confirmCopy</span><span class="params">(self,ev = None)</span>:</span></div><div class="line">        self.confirmtop = Toplevel(self.top)</div><div class="line"></div><div class="line">        <span class="comment"># pdb.set_trace()</span></div><div class="line"></div><div class="line">        self.a_path =  self.A.wholecwd.get()</div><div class="line">        self.b_path = self.B.wholecwd.get()</div><div class="line">        </div><div class="line">        listfiles_a = os.listdir(self.a_path)</div><div class="line">        listfiles_b = os.listdir(self.b_path)</div><div class="line">        </div><div class="line">        title_msg = <span class="string">'复制这些到%s'</span>%self.b_path</div><div class="line">        self.confirmtop.title(title_msg)</div><div class="line"></div><div class="line">        <span class="comment"># self.fm = Frame(self.confirmtop) # to be pack</span></div><div class="line">        self.copy_candidates_info = Text(self.confirmtop,height=<span class="number">30</span>,width = <span class="number">20</span>) <span class="comment"># to be pack</span></div><div class="line">        </div><div class="line">        pattern = re.compile(<span class="string">'\w+'</span>)</div><div class="line">        self.to_be_copied_list = []</div><div class="line">        <span class="keyword">for</span> to_be_copied <span class="keyword">in</span> listfiles_b:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                prefix = pattern.match(to_be_copied).group()</div><div class="line">            <span class="keyword">except</span> AttributeError,e:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">                <span class="comment"># print e</span></div><div class="line">                <span class="comment"># if 'NoneType' in e:</span></div><div class="line">                    <span class="comment"># continue</span></div><div class="line">                <span class="comment"># else:</span></div><div class="line">                    <span class="comment"># sys.exit()</span></div><div class="line">            <span class="keyword">for</span> eachfile <span class="keyword">in</span> listfiles_a:</div><div class="line">                <span class="keyword">if</span> prefix <span class="keyword">in</span> eachfile :<span class="comment"># and os.path.isfile(self.a_path+'/'+prefix): 可能在windows下不支持</span></div><div class="line">                    self.to_be_copied_list.append(eachfile)</div><div class="line"></div><div class="line">        <span class="comment"># self.copy_candidates_info.delete(0,END)</span></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.to_be_copied_list:</div><div class="line">            self.copy_candidates_info.insert(END,item+<span class="string">'\n'</span>) <span class="comment"># window下换行符可能不一样 \r\n</span></div><div class="line"></div><div class="line">        self.copy_candidates_info.pack(side = LEFT,padx = <span class="number">10</span>)</div><div class="line"></div><div class="line">        information = <span class="string">'copy to %s'</span>%self.b_path</div><div class="line">        self.other_information = Label(self.confirmtop,text = information)</div><div class="line">        self.other_information.pack(side=LEFT,ipadx = <span class="number">5</span>,ipady = <span class="number">13</span>)</div><div class="line"></div><div class="line">        self.fm = Frame(self.confirmtop)</div><div class="line">        self.result_info = Label(self.fm,font = (<span class="string">'Helvetica'</span>,<span class="number">12</span>,<span class="string">'bold'</span>),fg=<span class="string">'red'</span>)</div><div class="line">        self.confirmbutton = Button(self.fm,text=<span class="string">'确认'</span>,command = self.copyExecute)</div><div class="line">        self.cancelbutton = Button(self.fm,text=<span class="string">'取消'</span>,command = self.confirmtop.quit)</div><div class="line">        <span class="string">"""</span></div><div class="line">        为什么点击取消会全体退出？？？ 想要的效果是只是这个确认窗口退出而已</div><div class="line">        """</div><div class="line">        self.result_info.pack(side=LEFT)</div><div class="line">        self.confirmbutton.pack(side = LEFT)</div><div class="line">        self.cancelbutton.pack(side=LEFT)</div><div class="line">        self.fm.pack(side = BOTTOM)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyExecute</span><span class="params">(self,ev=None)</span>:</span></div><div class="line">        os.chdir(self.a_path)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (hasattr(self,<span class="string">'to_be_copied_list'</span>) <span class="keyword">and</span> len(self.to_be_copied_list)):</div><div class="line">            self.result_info.config(text=<span class="string">'Failed'</span>)</div><div class="line">            <span class="keyword">return</span> </div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.to_be_copied_list:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                shutil.copy(item,self.b_path)</div><div class="line">            <span class="keyword">except</span> Exception,e:</div><div class="line">                self.result_info.config(text=e)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.result_info.config(text=<span class="string">'Successful'</span>)</div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    c = CopyDir()</div><div class="line">    mainloop()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h1 id="发现的bug："><a href="#发现的bug：" class="headerlink" title="发现的bug："></a>发现的bug：</h1><ol>
<li>因为我现在是在一个窗口生成了两个文件夹展示的frame，但是在一个进程中，一个文件夹切换了路径，另一个就跟着切换了导致出现bug，解决方法，要用多线程</li>
</ol>
]]></content>
    
    <summary type="html">
    
      章礼腾要我做的一个程序，他需求是，有AB两个文件夹，我想通过B文件夹中文件的文件名将A文件夹中相同文件名的文件复制到B文件夹
    
    </summary>
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
      <category term="project" scheme="http://www.mmmmmcclxxvii.cn/tags/project/"/>
    
      <category term="Tkinter" scheme="http://www.mmmmmcclxxvii.cn/tags/Tkinter/"/>
    
  </entry>
  
  <entry>
    <title>python types and objects</title>
    <link href="http://www.mmmmmcclxxvii.cn/2016/12/03/python-types-and-objects/"/>
    <id>http://www.mmmmmcclxxvii.cn/2016/12/03/python-types-and-objects/</id>
    <published>2016-12-03T00:02:26.000Z</published>
    <updated>2017-04-04T09:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html" target="_blank" rel="external">Python Types and Objects</a><br>这篇文章解释了：</p>
<ul>
<li>什么是<code>&lt;type &#39;type&#39;&gt;</code>和<type 'object'=""></type></li>
<li>用户自定义的类和实例是怎么联系在一起的以及和内建类型的联系</li>
<li>什么是<code>metaclass</code>元类</li>
</ul>
<a id="more"></a>
<h1 id="type和object"><a href="#type和object" class="headerlink" title="type和object"></a><code>type</code>和<code>object</code></h1><p>从之前的学习面向对象编程来看，我们可以通过继承来定义一个类，也可以查看一个对象属于哪个类。其实这就可以抽象出两种关系<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-04%20at%202.56.02%20PM.png" alt="relationship"><br>图中虚线就是<code>type</code>，表示一个<strong>对象</strong>(又称‘实例’)的类型是尖头指向的那个<br>图中的实线是<code>base</code>，表示一个<strong>类</strong>的基类是尖头指向的那个</p>
<blockquote>
<p>the type and base(if exist) are important, coz they define special relationships an object with other objects.</p>
</blockquote>
<p>因为在python中一切皆为对象，所以<code>base</code>到头了就是<code>object</code>，这个是在python中一切类的祖宗。<br>而因为python中一切皆为对象, 它就有类型，<code>object</code>也是一个对象，它的类型就是<code>type</code>，<code>type</code>本身也是一个对象，为了满足python这样的设定，它的类型就是它自己。<strong><code>type</code>既是一个对象，也是一个类</strong>。就说我们自己定义了一个类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">pass</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A.__bases__</div><div class="line">(&lt;type <span class="string">'object'</span>&gt;,)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>A.__class__</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>他也有类型，就是<code>type</code>类型</p>
<blockquote>
<p>keep in mind that the types and bases of objects just other objects</p>
</blockquote>
<p>既然像类也是一种”对象”,那它是谁的对象？？答案就是<code>metaclass</code>，<code>type</code>就是<code>metaclass</code>。<br>先有鸡还是先有蛋？<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-04%20at%202.42.19%20PM.png" alt="explain"></p>
<h2 id="类和类型的统一"><a href="#类和类型的统一" class="headerlink" title="类和类型的统一"></a>类和类型的统一</h2><p>这个问题在知乎上有一个解答不错</p>
<blockquote>
<p>旧式类的实现不够好，类是类，实例是实例，类的类型是classobj，实例的类型是instance，两者的联系只在于<strong>class</strong>，这和内置对象是不同的，int对象的类型就是int，同时int()返回的也是int类型的对象，内置对象和自定义对象不同就对代码统一实现带来很大困难。比如说有段代码输入一个对象，返回一个默认构造的同类型对象，本来应该写作type(obj)()，现在就必须写成：obj.<strong>class</strong>() if hasattr(obj, ‘<strong>class</strong>‘) else type(obj)()。如果想用自定义的类去替代一些系统内置类型，比如说自定义一个dictionary，这样的不一致就会出问题新式类之后自定义类和内置类型就一致了：1. 所有类型的类型都是type2. 所有类型调用的结果都是构造，返回这个类型的实例3. 所有类型都是object的子类这样就不再需要区分自定义类和类型了。实现这件事其实并不容易，理性上来想，type的基类是object，而object的类型是type，这是一个先有鸡还是先有蛋的问题。Python通过对这几个类的特殊处理实现了这样的逻辑。</p>
<p>作者：灵剑<br>链接：<a href="https://www.zhihu.com/question/38803693/answer/103128686" target="_blank" rel="external">https://www.zhihu.com/question/38803693/answer/103128686</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<hr>
<h1 id="自定义类和内建类型"><a href="#自定义类和内建类型" class="headerlink" title="自定义类和内建类型"></a>自定义类和内建类型</h1><p>图片来自那个文章顶部那个链接,这篇文章写的很详细了<br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-04%20at%203.35.31%20PM.png" alt="python objects map"></p>
<blockquote>
<ol>
<li>Dashed lines cross spacial boundaries (i.e. go from object to meta-object). Only exception is <type 'type'=""> (which is good, otherwise we would need another space to the left of it, and another, and another…).</type></li>
<li>Solid lines do not cross space boundaries. Again, <type 'type'=""> -&gt; <type 'object'=""> is an exception.</type></type></li>
<li>Solid lines are not allowed in the rightmost space. These objects are too concrete to be subclassed.</li>
<li>Dashed line arrow heads are not allowed rightmost space. These objects are too concrete to be instantiated.</li>
<li>Left two spaces contain types. Rightmost space contains non-types.</li>
<li>If we created a new object by subclassing <type 'type'=""> it would be in the leftmost space, and would also be both a subclass and instance of <type 'type'="">.</type></type></li>
</ol>
</blockquote>
<h2 id="两个对象"><a href="#两个对象" class="headerlink" title="两个对象"></a>两个对象</h2><p>python中分<code>Type</code>对象和<code>Non-Type</code>对象，这个<code>Non-Type</code>不是一个正式的概念，只是这么称呼，这类对象，比如2，就是2，2怎么再派生？怎么再实例化，不行，所以是<strong>too concrete</strong>。怎么判断，只要<code>type(obj)</code>出来的是<code>&lt;type &#39;type&#39;&gt;</code>就是<code>Type</code>对象，不然就是<code>Non-Type</code>对象</p>
<blockquote>
<ul>
<li>Type objects - can create instances, can be subclassed.</li>
<li>Non-type objects - cannot create instances, cannot be subclassed.</li>
<li><code>objectname.__class__</code> exists for every object and points the type of the object.</li>
<li><code>objectname.__bases__</code> exists for every type object and points the superclasses of the object. It is empty only for <code>&lt;type &#39;object&#39;&gt;</code>.</li>
<li>Some non-type objects can be created using special Python syntax. For example, <code>[1, 2, 3]</code> creates an instance of <code>&lt;type &#39;list&#39;&gt;</code>.</li>
</ul>
</blockquote>
<h2 id="两个动作"><a href="#两个动作" class="headerlink" title="两个动作"></a>两个动作</h2><p>两种关系对应两种动作可以生成两种对象。有可能是<code>Type</code>对象,也有可能是<code>Non-Type</code>对象。<br>两个动作就是<code>subclassing</code>和<code>instantiating</code>.</p>
<h3 id="subclassing"><a href="#subclassing" class="headerlink" title="subclassing"></a>subclassing</h3><p>这个动作具体就是<code>class</code>语句,定义一个类，或者说定一个<code>type</code>，</p>
<blockquote>
<p>This means you can create a new object that is somewhat similar to existing type objects.</p>
<p>To create a new object using subclassing, we use the class statement and specify the bases (and, optionally, the type) of the new object. This always creates a type object.</p>
</blockquote>
<p><del>这段代码抽象代表的就是一个类</del></p>
<h3 id="instantiating"><a href="#instantiating" class="headerlink" title="instantiating"></a>instantiating</h3><p>这个动作就是实例化，由一个<code>type</code>实例化出对象，<code>type</code>相当于一个工厂的模型，具体就是通过<code>()</code>操作。</p>
<blockquote>
<p>To create a new object using instantiation, we use the call operator (()) on the type object we want to use. This may create a type or a non-type object, <strong>depending on which type object was used</strong>.</p>
<p>This means you can create a new object that is an instance of the existing type object.</p>
</blockquote>
<p>python中的内建类型是在启动python后生成的。比如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(list)</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list.__bases__</div><div class="line">(&lt;type <span class="string">'object'</span>&gt;,) <span class="comment"># list是从object派生而来了</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ml = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(ml)</div><div class="line">&lt;type <span class="string">'list'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>如果问<code>[1,2,3]</code>是什么类型啊？列表类型啊。列表类型是什么类型啊？<code>type</code>类型啊。<code>type</code>类型是什么类型啊？<code>type</code>类型。。。当我们创建{‘a’:1,’b’:2},(1,2)这种，是从<code>&lt;type &#39;list&#39;&gt;</code>,<code>&lt;type &#39;dict&#39;&gt;</code>实例化出来的，也就是相应的<code>type</code>，包括自定义。</p>
<h1 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h1><p>很重要的一点就是，当我<code>class</code>语句定义了一个类，我就自动的有了一个<code>type</code>，其实也就是说<code>__class__</code>（新式类）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p><code>type(C)</code>就已经定了。它是根据所继承的父类的<code>type</code>延续下来的，因为<code>object</code>的类型是<code>type</code>所以<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;type(C)</div><div class="line">&lt;type <span class="string">'type'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>那其实这样追溯下去，因为<code>object</code>类型是<code>type</code>类，所以所有的类都是<code>type</code>类。除了<code>Non-Type</code>对象的类型是相对应的类。所以那幅图的前面两列的虚线都指到<code>type</code>。<br>这里有一个问题就是它是由继承关系决定的，那如果是多重继承呢？是继承哪个？<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; class M1(type):</div><div class="line">...     pass</div><div class="line">...</div><div class="line">&gt;&gt;&gt; class M2(type):</div><div class="line">...     pass</div><div class="line">...</div><div class="line">&gt;&gt;&gt; class A(object):</div><div class="line">...     __metaclass__ = M1</div><div class="line">...</div><div class="line">&gt;&gt;&gt; class B(object):</div><div class="line">...     __metaclass__ = M2</div><div class="line">...</div><div class="line">&gt;&gt;&gt; type(A)</div><div class="line">&lt;class '__main__.M1'&gt;</div><div class="line">&gt;&gt;&gt; type(B)</div><div class="line">&lt;class '__main__.M2'&gt;</div><div class="line">&gt;&gt;&gt; class C(A,B):</div><div class="line">...     pass</div><div class="line">...</div><div class="line">Traceback (most recent call last):</div><div class="line">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</div><div class="line">  TypeError: Error when calling the metaclass bases</div><div class="line">      metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases</div></pre></td></tr></table></figure></p>
<p>如果大家的<code>metaclass</code>都一样，那就没得说了，如果不一样，那么就会混乱，这时候要指定。什么时候会不一样呢？一般情况下都是<code>type</code>，除非自己定义<code>specialType</code>然后派生。但<strong>建议是不要用这个特性</strong>。</p>
<p>另一个问题就是，到底怎么自定义<code>specialType</code>？上面例子已经给出答案了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></div><div class="line">	__metaclass__ = specialType</div></pre></td></tr></table></figure></p>
<h1 id="隐式关系"><a href="#隐式关系" class="headerlink" title="隐式关系"></a>隐式关系</h1><p>图片来自文章顶部链接文章中的：<br><a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html" target="_blank" rel="external"><img src="http://www.cafepy.com/article/python_types_and_objects/images/relationships_transitivity.png" alt="transitivity of relationships"></a></p>
<p><code>issubclass</code>问的是一个<code>class</code>是不是<code>subclass</code> of 另一个<code>class</code>。<code>class</code>和<code>class</code>之间的关系<br><code>isinstance</code>问的是一个<code>object</code>是不是<code>instance</code> of 另一个<code>class</code>。<code>object</code>和<code>class</code>之间的关系</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(type,type) <span class="comment">#虚线，type指向自己 </span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(type,object) <span class="comment">#因为type是自身的实例，type又是object的子类，所以type是object的实例</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(object,object) <span class="comment">#因为object是type的实例，type又是object的子类，所以object是object的实例</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(object,type) <span class="comment"># 虚线</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(type,type) <span class="comment"># A class is considered a subclass of itself</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(type,object) <span class="comment"># 实线</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(object,object) <span class="comment"># 任何类都是object的子类</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>issubclass(object,type) <span class="comment"># object在类的金字塔顶端，它上面就没人啦</span></div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://docs.python.org/2/library/functions.html#issubclass" target="_blank" rel="external">A class is considered a subclass of itself</a></p>
</blockquote>
<hr>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><ol>
<li><p><code>class</code>,<code>object</code>,<code>instance</code>的关系</p>
<blockquote>
<p>An object is an instance of a class, and may be called a class instance or class object; instantiation is then also known as construction. Not all classes can be instantiated – abstract classes cannot be instantiated, while classes that can be instantiated are called concrete classes.</p>
</blockquote>
</li>
<li><p>How does python really create a new object?</p>
<blockquote>
<p>Internally, when python creates a new object, it always uses a type and creates an instance of that object. Specifically it uses the <strong>new</strong>() and <strong>init</strong>() methods of the type. In a sense, the type serves as a factory that can churn out new objects, the type of these manufactured objects will be the type object used to create them. This is why every object has a type.</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html&quot;&gt;Python Types and Objects&lt;/a&gt;&lt;br&gt;这篇文章解释了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是&lt;code&gt;&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;&lt;/code&gt;和&lt;type &#39;object&#39;&gt;&lt;/li&gt;
&lt;li&gt;用户自定义的类和实例是怎么联系在一起的以及和内建类型的联系&lt;/li&gt;
&lt;li&gt;什么是&lt;code&gt;metaclass&lt;/code&gt;元类&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.mmmmmcclxxvii.cn/tags/python/"/>
    
      <category term="object" scheme="http://www.mmmmmcclxxvii.cn/tags/object/"/>
    
      <category term="type" scheme="http://www.mmmmmcclxxvii.cn/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>Interesting experience -- challenge school master swimming</title>
    <link href="http://www.mmmmmcclxxvii.cn/2016/11/11/swimming-with-master/"/>
    <id>http://www.mmmmmcclxxvii.cn/2016/11/11/swimming-with-master/</id>
    <published>2016-11-11T15:14:56.000Z</published>
    <updated>2017-02-20T10:14:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>–update–<br>其实现在想想，可能当初会有更成熟的做法。</p>
<hr>
<a id="more"></a>
<p>其实真的，在决定要去雷励的时候，众筹这个任务就已经压在我的肩上了，虽然后来真的校长答应我的挑战促使了我的任务圆满完成，但这其中的历程更值得细嚼慢咽</p>
<h1 id="公开信的问题"><a href="#公开信的问题" class="headerlink" title="公开信的问题"></a>公开信的问题</h1><p>发邮件给学校办公室，给校长邮箱，我是不知道会不会有人看到，或者能有多大的反响，站在我自己的角度上，我肯定是希望校长本人能看见，然后我还想像着趁校长吃饭的空隙，上演5分钟演讲感动全世界的戏码。其实就在我点发送的一瞬间，多米诺效应就开始了。首先指出我的几个问题，我把事情想象的太简单了。</p>
<h2 id="道德绑架"><a href="#道德绑架" class="headerlink" title="道德绑架"></a>道德绑架</h2><p>我是出于一种目的来挑战校长的比赛，虽然说以公益的名义，但是糊里糊涂的校长就被我拉上船了，在与管理学校社交平台的学长的沟通上，也是这个问题阻碍了帮我转发。</p>
<h2 id="我没写输了怎么办"><a href="#我没写输了怎么办" class="headerlink" title="我没写输了怎么办"></a>我没写输了怎么办</h2><p>我只写了赢了，好，校长你施舍点我吧。但是我真想不出来，我输了能怎么办，我还卖身不成么？简直胡闹么，这样影响更不好。</p>
<hr>
<p>这两点是最致命的。我是接到了辅导员的电话，才知道我的信已经被学校宣传部拦下来了，在老师中间已经传开了，但是校长在意大利调研，所以还没回国。辅导员对我说基于这个目的是好的，但是不保证能不能行。其实我知道基于那两个致命的缺陷，校长能有一百个理由拒绝。然后又出现了一个更要命的，更“政治化”的问题。那就是学校和公益组织之间的关系，他们想知道为什么做公益还要众筹（这是雷励的传统，因此也更有挑战，基金拿来项目地的建材费用等）。<br>他们考虑到是不是行骗组织，因为前几年清华大学就出了一件乌龙事件，自称罗斯柴尔德家族的人来访，清华大学以最高的规格接待，结果发现是骗子。基于对学生的保护，也基于对学校名誉的保护，任何情况下，校长做决定都是谨慎的。因为即使现在没有组织的任何负面新闻，不代表将来没有，所以这一点，只要校长应战了，学校和组织之间就捆绑了。</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/7-160325235000.jpg" alt="qinghua"></p>
<hr>
<p>但是想不到的是，校长答应了。听说还很爽快。</p>
<hr>
<p><img src="http://onexs3cnv.bkt.clouddn.com/%E6%A0%A1%E9%95%BF%E9%A2%98%E8%AF%8D.jpg" alt="校长题词"></p>
<h1 id="关于推动这个挑战中的问题"><a href="#关于推动这个挑战中的问题" class="headerlink" title="关于推动这个挑战中的问题"></a>关于推动这个挑战中的问题</h1><p>这里面的问题更多的设计营销推广文案的问题。最主要的就是我没能很好的把那么大量的阅读者人引流到众筹平台。最重要的原因就是没有做好链接。其实我重写了公开信，但是转发的都是第一版的，所以那部分上千人的受众群体其实是流失了的。想想每个人捐我1元，任务也都完成了。后来我还特地的关于众筹的写了另一个版本的面向大学生的公开信，希望能引流一部分。我还增加了很多众筹回报。在微博平台上的长微博中发布中不是还有文字描述么，这里可以增加好几个链接，我一开始增加了好几个链接到众筹回报，会长告诉我说，不要，什么都不要，直入主题，就只放一个众筹平台的链接。后来想想这才是我推文的主要目的。这无疑的正确的。</p>
<hr>
<p>大道至简，直奔主题，细节决定成败</p>
<hr>
<h1 id="备战"><a href="#备战" class="headerlink" title="备战"></a>备战</h1><p>其实之前我是不抱有任何希望的，对于这件事能不能行，但是后来接到记者的电话，再得到辅导员的证实，我心情异常的激动。连我最好的一个朋友原来也说亮瞎了的想法，变成惊呆了。也是。我要是变成那么忙的人，我也会避轻就重。纵观这件事情，最要紧的点就是校长金口开了，答应了，才有了故事的后续。我并不觉得我做了多么了不起的事，我没有想象中的很努力的去争取这个机会，整天堵在校长办公室门口或怎样，寻找一个能面对面交流然后获得机会这样一个场景。我只不是在电脑前打了几行字而已。但既然要比赛了，我就努力吧。我之前基本上游泳因为场地，时间问题就没怎么游了。但还是要练，时间也挺紧张的，我当时在转塘凤凰创意园学影视后期制作，最近的游泳场所，我要去定安游泳馆，来回要三个多小时，但还是在有限的时间去了几次，在那里我遇到美院游泳队的漂亮姐姐，然后我就上去请她们指导，还有一个很有经验的老头，也请他指导我的动作，基本上一些技术性的小细节事临时改过来的。直到比赛当天上午，我还去游了1000米，但是我始终没有测试过800米到底多少成绩，然后有多大的底气。这里非常感谢陪伴我的一个朋友，赖志鹏，帮我记录了练习跳水的镜头。</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-06%20at%2010.24.26%20PM.png" alt="plunge"></p>
<hr>
<p>梦想还是要有的，万一实现了呢？-马云<br>最重要的是，要时刻准备着 -me火花</p>
<hr>
<h1 id="跟外界沟通"><a href="#跟外界沟通" class="headerlink" title="跟外界沟通"></a>跟外界沟通</h1><p>没有和记者朋友打过交道，但毕竟看过新闻，也知道一些舆论力量，所以在接到采访电话的时候，我几乎是不敢乱说话的，就怕好事被搅浑了，没见过大场面，hold不住这架势，没打过着交道，不知道里边是怎样的。一开始我还天真的什么都说，把自己知道的都说出来，但关键就在这，你不知道你自己知道的到底是不是真的，但媒体会信以为真。后来雷励CEO 陆丰老师还打电话过来，跟我聊了。之后我尽量只谈我自己的东西，关于组织的，学校的，我就告诉他们找官方。然后陆丰老师还要求我在记者发稿的时候要看一下最终稿有没有问题。</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/%E5%92%8Cgari%E5%90%88%E7%85%A7.jpg" alt="和gari合照"></p>
<p>毕竟我还承担着两方的某些利益，小心驶得万年船。还好这一环节没出什么大问题。不知道怎么放链接，我就不把新闻整理出来了。</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-06%20at%2010.33.22%20PM.png" alt="xinwen"><br><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-06%20at%2010.33.56%20PM.png" alt="pinglun"></p>
<hr>
<p>对所说的话负责。保证知道的都是权威的。</p>
<hr>
<h1 id="赛后"><a href="#赛后" class="headerlink" title="赛后"></a>赛后</h1><p>这又是我没想到的一个点。涉世未深。不过在我看来，这应该不是什么大问题，只是这种现象已经根深在人们印象中了。就是我到底该不该赢。这个问题是马后炮。因为，我事先也不知道校长的实力，校长也不知道我的实力，大家更不知道，体军部的老师也不知道。我只是一股脑的想赢，这样挑战也名正言顺。但是后来某些人说你不应该赢，我就方了，我不会做错事了吧，想想也是，我算哪根葱，校长给你面子了，你不给校长面子？我没想到这个问题，但其实在我比赛环节之前有一个老师对学生的接力友谊赛，算是热身赛，然后有队员说，老师让我们游慢一点，故意输。但我没想到我身上。想想赛后一个记者过来和我握手说，我没想到你会赢。这是看不起我还是？不过后来校领导开过会讨论过了，党组织部的老师说这样的结果是最好的，青出于蓝而胜于蓝，而且学校游泳队取得了不俗的成绩，比不过老师说不过去。各位，你们想想，我是个年轻人，体力上本来就占有一定的优势，校长58岁，还能保持这样的竞技状态，这样的生活态度，这才是重点。况且我赢的不多，才十几秒，我一点都没放水，要不是途中多次咬牙坚持，我还很又可能输。就凭这一点，我真的很佩服我们校长。</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/race.jpeg" alt="race"></p>
<p>不过我真是感受了一把受网络键盘侠攻击的滋味。</p>
<p><img src="http://onexs3cnv.bkt.clouddn.com/Screen%20Shot%202017-04-06%20at%2010.42.37%20PM.png" alt="personalattack"></p>
<p>辅导员也说，这些人很多的啊，不要管。但我想想，很大的原因，还是因为信息的不对称，媒体没有很好的做好中介，把事情原本的样子展现出来。</p>
<hr>
<p>但愿我不被规矩世俗束缚，追求本真</p>
<hr>
<p>最后谢谢钱江晚报的一个朋友，帮我做的一个简短的<a href="https://v.qq.com/x/page/l03065kvzrh.html" target="_blank" rel="external">视频</a>，记录这美妙的时刻。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;–update–&lt;br&gt;其实现在想想，可能当初会有更成熟的做法。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/categories/life/"/>
    
    
      <category term="life" scheme="http://www.mmmmmcclxxvii.cn/tags/life/"/>
    
      <category term="rock the boat" scheme="http://www.mmmmmcclxxvii.cn/tags/rock-the-boat/"/>
    
  </entry>
  
</feed>
